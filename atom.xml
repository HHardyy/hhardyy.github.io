<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hardy黄炳圳</title>
  
  <subtitle>With headphones on, the world is full of code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-26T16:08:27.028Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BingZhenhuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构与算法之美手记</title>
    <link href="http://yoursite.com/2018/12/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E%E6%89%8B%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/12/20/数据结构与算法之美手记/</id>
    <published>2018-12-20T01:25:03.000Z</published>
    <updated>2018-12-26T16:08:27.028Z</updated>
    
    <content type="html"><![CDATA[<p>跟随Google大佬的脚步。。。（一如既往的跟不上）</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=486412012&auto=0&height=66"></iframe><br><a id="more"></a></p><p>突然看到《数据结构与算法之美》，突然买，突然看，突然继续看，突然反复看。。。</p><h3 id="什么是数据结构？什么是算法？"><a href="#什么是数据结构？什么是算法？" class="headerlink" title="什么是数据结构？什么是算法？"></a>什么是数据结构？什么是算法？</h3><p>1、从广义上讲，数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。<br>举例：<br>图书馆储藏书籍你肯定见过吧？为了方便查找，图书管理员一般会将书籍分门别类进行“存储”。按照一定规律编号，就是书籍这种“数据”的存储结构。<br>那我们如何来查找一本书呢？有很多种办法，你当然可以一本一本地找，也可以先根据书籍类别的编号，是人文，还是科学、计算机，来定位书架，然后再依次查找。笼统地说，这些查找方法都<br>是算法。<br>2、从狭义上讲，是指某些著名的数据结构和算法，比如队列、栈、堆、二分查找、动态规划等。这些都是前人智慧的结晶，都是前人从很多实际操作场景中抽象出来的，经过非常多的求证和检验，<br>可以高效地帮助我们解决很多实际的开发问题。</p><h3 id="数据结构和算法有什么关系？"><a href="#数据结构和算法有什么关系？" class="headerlink" title="数据结构和算法有什么关系？"></a>数据结构和算法有什么关系？</h3><p>数据结构是为算法服务的，算法要作用在特定的数据结构之上。<br>举例：<br>数组具有随机访问的特点，常用的二分查找算法需要用数组来存储数据。但如果我们选择链表这种数据结构，二分查找算法就无法工作了，因为链表并不支持随机访问。<br>数据结构是静态的，它只是组织数据的一种方式。如果不在它的基础上操作、构建算法，孤立存在的数据结构就是没用的。</p><h3 id="我们怎么选用合适的数据结构和算法？有什么衡量标准吗？"><a href="#我们怎么选用合适的数据结构和算法？有什么衡量标准吗？" class="headerlink" title="我们怎么选用合适的数据结构和算法？有什么衡量标准吗？"></a>我们怎么选用合适的数据结构和算法？有什么衡量标准吗？</h3><p>衡量的标准(metric)—时间复杂度和空间复杂度，也就是数据结构与算法中最重要的概念——复杂度分析。数据结构和算法解决的是如何更省、更快地存储和处理数据的问题，因此，我们就需要<br>一个考量效率和资源消耗的方法，这就是复杂度分析方法，知道怎么去分析复杂度，才能得出正确的判断。</p><h3 id="几种常见时间复杂度实例分析"><a href="#几种常见时间复杂度实例分析" class="headerlink" title="几种常见时间复杂度实例分析"></a>几种常见时间复杂度实例分析</h3><p>虽然代码千差万别，但是常见的复杂度量级并不多。我稍微总结了一下，这些复杂度量级几乎涵盖了了你今后可以接触的所有代码的复杂度量级。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/4.jpg" alt="复杂度量级，按数量级递增" title="">                </div>                <div class="image-caption">复杂度量级，按数量级递增</div>            </figure><br>可以粗略地分为两类，多项式量级和非多项式量级，其中，非多项式量级只有两个：O(2n) 和 O(n!)。<br>当数据规模n越来越大时，非多项式量级的算法的执行时间会急剧增加，求解决问题的执行时间会无限增长，所以非多项式时间复杂度的算法其实是非常低效的算法。</p><h4 id="多项式时间复杂度"><a href="#多项式时间复杂度" class="headerlink" title="多项式时间复杂度"></a>多项式时间复杂度</h4><p>1、O（1）<br>O（1）只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码，比如这段代码，即便有三行，它的时间复杂度也是O（1），而不是O（3）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int i = 8;</div><div class="line">int j = 6;</div><div class="line">int sum = i + j;</div></pre></td></tr></table></figure></p><p>总结：只要代码的执行时间不随着n的增大而增大，这样代码的时间复杂度我们都记作O（1）。或者说，一般情况下，只要算法中不存在循环语句，递归语句，即使有成千上万行的代码，其时间复杂度也是O（1）。</p><p>2、O（logn）、O（nlogn）<br>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i=1;</div><div class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</div><div class="line">  i = i * 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>根据复杂度分析方法，第三行代码是循环执行次数最多的，所以，只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。<br>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。<br>如果把它一个一个列出来，就应该是这个样子的：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>所以，只要知道 x 值是多少,就知道这行代码执行的次数了。通过 2x=n 求解 x。所以，这段代码的时间复杂度就是 O(log2n)。<br>现在，把代码稍微改下，再看看，这段代码的时间复杂度是多少？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i=1;</div><div class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</div><div class="line">  i = i * 3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>根据刚刚的思路，很简单就能看出来,这段代码的时间复杂度为 O(log3n)。实际上，不管是以 2 为底、以 3 为底，还是以 10 为底。我们可以把所有对数阶的时间复杂度都记<br>为 O(logn)。为什么呢？<br>我们知道，对数之间是可以互相转换的，log3n 就等于 log32 <em> log2n，所以 O(log3n) = O(C </em>log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：在采用大<br>O标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p><h3 id="十个经典的排序算法"><a href="#十个经典的排序算法" class="headerlink" title="十个经典的排序算法"></a>十个经典的排序算法</h3><p>看java算法教程时候的截图笔记~~~~<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/1.JPG" alt="十大经典排序算法导图" title="">                </div>                <div class="image-caption">十大经典排序算法导图</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/2.JPG" alt="对比表中关键字字母解释" title="">                </div>                <div class="image-caption">对比表中关键字字母解释</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/3.JPG" alt="各种术语说明" title="">                </div>                <div class="image-caption">各种术语说明</div>            </figure>  </p><h3 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h3><p>两两比较相邻的数字，左边比右边大就做交换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> bubble(arr,n)&#123;</div><div class="line"><span class="built_in">let</span> temp=null;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=0;i&lt;n-1;i++)&#123;</div><div class="line"><span class="keyword">if</span>(arr[i]&gt;arr[i+1])&#123;</div><div class="line">temp=arr[i];</div><div class="line">arr[i]=arr[i+1];</div><div class="line">arr[i+1]=temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;//走一遍冒泡</div><div class="line"><span class="keyword">function</span> sortBble(arr,n)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i = n;i&gt;=1;i--)&#123;</div><div class="line">bubble(arr,i)</div><div class="line">&#125;</div><div class="line">&#125;//走一组冒泡</div><div class="line"><span class="built_in">let</span> arr=[1,3,2,7,5,6,4,9,8,0]</div><div class="line">sortBble(arr,arr.length)</div><div class="line">console.log(arr)</div></pre></td></tr></table></figure></p><p>有一个骚操作是可以提高冒泡排序的性能，降低时间复杂度的，也是刚get的新技能，那就是亦或，也就是这个东西^,举个栗子,封装一个冒泡排序，普通操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function sortFunc(arr)&#123;</div><div class="line">for(let i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">   for(let j = 0; j &lt;= arr.length - i - 1; j++)&#123;</div><div class="line">       if(arr[j]&gt;arr[j+1])&#123;</div><div class="line">           //普通操作</div><div class="line">           //let wap = arr[j];</div><div class="line">           //arr[j] = arr[j+1];</div><div class="line">           //arr[j+1] = wap;</div><div class="line">    </div><div class="line">           //亦或操作</div><div class="line">           arr[j] = arr[j]^arr[j+1];</div><div class="line">           arr[j+1] = arr[j]^arr[j+1];</div><div class="line">           arr[j] = arr[j]^arr[j+1];</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="2、-选择排序"><a href="#2、-选择排序" class="headerlink" title="2、 选择排序"></a>2、 选择排序</h3><p>每次走一遍数组，找到最大的数字，然后和最后一个做交换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> getMaxIndex(arr,n)&#123;</div><div class="line"><span class="built_in">let</span> max=arr[0];</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=0;i&lt;n;i++)&#123;</div><div class="line"><span class="keyword">if</span> (arr[i]&gt;max) &#123;</div><div class="line">max=arr[i]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> arr.indexOf(max)</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> selectionSort(arr,n)&#123;</div><div class="line"><span class="built_in">let</span> maxIndex,temp;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> j=n;j&gt;0;j--)&#123;</div><div class="line">maxIndex=getMaxIndex(arr,j)</div><div class="line">temp=arr[maxIndex];</div><div class="line">arr[maxIndex]=arr[j-1];</div><div class="line">arr[j-1]=temp;</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> arr</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> arr=[1,3,2,7,5,6,4,9,8,0]</div><div class="line">console.log(selectionSort(arr,arr.length))</div></pre></td></tr></table></figure></p><h3 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h3><p>将一条记录插入到已排好的有序表中，从而得到一个新的、记录数量增1的有序表。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> insert(arr,n)&#123;</div><div class="line"><span class="built_in">let</span> key=arr[n]</div><div class="line"><span class="built_in">let</span> i=n</div><div class="line"><span class="keyword">for</span>(i;arr[i-1]&gt;key;i--)&#123;</div><div class="line"><span class="keyword">if</span>(i&lt;=0)&#123;</div><div class="line"><span class="built_in">return</span></div><div class="line">&#125;</div><div class="line">arr[i]=arr[i-1];</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> arr[i]=key;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> insertSort(arr,n)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=0;i&lt;n;i++)&#123;</div><div class="line">insert(arr,i)</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> arr</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> arr=[1,3,2,7,5,6,4,9,8,0]</div><div class="line">console.log(insertSort(arr,arr.length))</div></pre></td></tr></table></figure></p><h3 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h3><p>插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> shellSort(arr) &#123;</div><div class="line">　　var len = arr.length,</div><div class="line">　　temp,</div><div class="line">　　gap = 1;</div><div class="line">　　<span class="keyword">while</span>(gap &lt; len/5) &#123; </div><div class="line">　　　　gap =gap*5+1;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">for</span> (gap; gap &gt; 0; gap = Math.floor(gap/5)) &#123;</div><div class="line">　　　　<span class="keyword">for</span> (var i = gap; i &lt; len; i++) &#123;</div><div class="line">　　　　　　temp = arr[i];</div><div class="line">　　　　　　<span class="keyword">for</span> (var j = i-gap; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j-=gap) &#123;</div><div class="line">　　　　　　　　arr[j+gap] = arr[j];</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　　　arr[j+gap] = temp;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> arr;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(shellSort(arr));</div></pre></td></tr></table></figure></p><h3 id="5、归并排序"><a href="#5、归并排序" class="headerlink" title="5、归并排序"></a>5、归并排序</h3><p>将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> mergeSort(arr) &#123; //采用自上而下的递归方法</div><div class="line">　　var len = arr.length;</div><div class="line">　　<span class="keyword">if</span>(len &lt; 2) &#123;</div><div class="line">　　　　<span class="built_in">return</span> arr;</div><div class="line">　　&#125;</div><div class="line">　　var middle = Math.floor(len / 2),</div><div class="line">　　left = arr.slice(0, middle),</div><div class="line">　　right = arr.slice(middle);</div><div class="line">　　<span class="built_in">return</span> merge(mergeSort(left), mergeSort(right));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">function</span> merge(left, right)&#123;</div><div class="line">　　var result = [];</div><div class="line">　　<span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</div><div class="line">　　　　<span class="keyword">if</span> (left[0] &lt;= right[0]) &#123;</div><div class="line">　　　　　　result.push(left.shift());</div><div class="line">　　　　&#125; <span class="keyword">else</span> &#123;</div><div class="line">　　　　　　result.push(right.shift());</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line"> </div><div class="line">　　<span class="keyword">while</span> (left.length)&#123;</div><div class="line">　　　　result.push(left.shift());</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">while</span> (right.length)&#123;</div><div class="line">　　　　result.push(right.shift());</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> result;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(mergeSort(arr));</div></pre></td></tr></table></figure></p><h3 id="6、快速排序"><a href="#6、快速排序" class="headerlink" title="6、快速排序"></a>6、快速排序</h3><p>通过一趟排序将要排序的数据分割成独立的两部分,其中一部分的所有数据都比另外一部分的所有数据都要小,然后再按此方法对这两部分数据分别进行快速排序,整个排序过程可以递归进行,<br>以此达到整个数据变成有序序列<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> quickSort(array, left, right) &#123;</div><div class="line">　　<span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">　　　　var x = array[right], i = left - 1, temp;</div><div class="line">　　　　<span class="keyword">for</span> (var j = left; j &lt;= right; j++) &#123;</div><div class="line">　　　　　　<span class="keyword">if</span> (array[j] &lt;= x) &#123;</div><div class="line">　　　　　　　　i++;</div><div class="line">　　　　　　　　temp = array[i];</div><div class="line">　　　　　　　　array[i] = array[j];</div><div class="line">　　　　　　　　array[j] = temp;</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125;</div><div class="line">　　　　console.log(array) ;</div><div class="line">　　　　console.log(left,i) ;</div><div class="line">　　　　quickSort(array, left, i - 1);</div><div class="line">　　　　console.log(array)</div><div class="line">　　　　console.log(i,right)</div><div class="line">　　　　quickSort(array, i + 1, right);</div><div class="line">　　&#125;</div><div class="line">　　console.log(array)</div><div class="line">　　<span class="built_in">return</span> array;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(quickSort(arr,0,arr.length-1));</div></pre></td></tr></table></figure></p><h3 id="7、堆排序"><a href="#7、堆排序" class="headerlink" title="7、堆排序"></a>7、堆排序</h3><p>Heapsort是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> heapSort(array) &#123;</div><div class="line">　　var heapSize = array.length, temp;</div><div class="line">　　<span class="keyword">for</span> (var i = Math.floor(heapSize / 2) - 1; i &gt;= 0; i--) &#123;　　</div><div class="line">　　　　heapify(array, i, heapSize);</div><div class="line">　　&#125;</div><div class="line">　　//堆排序</div><div class="line">　　<span class="keyword">for</span> (var j = heapSize - 1; j &gt;= 1; j--) &#123;</div><div class="line">　　　　temp = array[0];</div><div class="line">　　　　array[0] = array[j];</div><div class="line">　　　　array[j] = temp;</div><div class="line">　　　　console.log(array)</div><div class="line">　　　　heapify(array, 0, --heapSize);</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> array;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> heapify(arr, x, len) &#123;</div><div class="line">　　var l = 2 * x + 1, r = 2 * x + 2, largest = x, temp;</div><div class="line">　　<span class="keyword">if</span> (l &lt; len &amp;&amp; arr[l] &gt; arr[largest]) &#123;</div><div class="line">　　　　largest = l;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">if</span> (r &lt; len &amp;&amp; arr[r] &gt; arr[largest]) &#123;</div><div class="line">　　　　largest = r;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">if</span> (largest != x) &#123;</div><div class="line">　　　　temp = arr[x];</div><div class="line">　　　　arr[x] = arr[largest];</div><div class="line">　　　　arr[largest] = temp;</div><div class="line">　　　　console.log(arr)</div><div class="line">　　　　heapify(arr, largest, len);</div><div class="line">　　&#125;</div><div class="line">&#125;</div><div class="line">var arr=[91,60,96,13,35,65,46,65,10,30,20,31,77,81,22];</div><div class="line">console.log(heapSort(arr));</div></pre></td></tr></table></figure></p><h3 id="8、计数排序"><a href="#8、计数排序" class="headerlink" title="8、计数排序"></a>8、计数排序</h3><p>对于给定的输入序列中的每一个元素x，确定该序列中值小于x的元素的个数（此处并非比较各元素的大小，而是通过对元素值的计数和计数值的累加来确定）。一旦有了这个信息，就可以将x直<br>接存放到最终的输出序列的正确位置上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> countingSort(array) &#123;</div><div class="line">　　var len = array.length,</div><div class="line">　　B = [],</div><div class="line">　　C = [],</div><div class="line">　　min = max = array[0];</div><div class="line">　　<span class="keyword">for</span> (var i = 0; i &lt; len; i++) &#123;</div><div class="line">　　　　min = min &lt;= array[i] ? min : array[i];</div><div class="line">　　　　max = max &gt;= array[i] ? max : array[i];</div><div class="line">　　　　C[array[i]] = C[array[i]] ? C[array[i]] + 1 : 1;</div><div class="line">　　　　console.log(C)</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">for</span> (var j = min; j &lt; max; j++) &#123;</div><div class="line">　　　　C[j + 1] = (C[j + 1] || 0) + (C[j] || 0);</div><div class="line">　　　　console.log(C)</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">for</span> (var k = len - 1; k &gt;= 0; k--) &#123;</div><div class="line">　　　　B[C[array[k]] - 1] = array[k];</div><div class="line">　　　　C[array[k]]--;</div><div class="line">　　　　console.log(B)</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> B;</div><div class="line">&#125;</div><div class="line">var arr = [2, 2, 3, 8, 7, 1, 2, 2, 2, 7, 3, 9, 8, 2, 1, 4, 2, 4, 6, 9, 2];</div><div class="line">console.log(countingSort(arr));</div></pre></td></tr></table></figure></p><h3 id="9、桶排序"><a href="#9、桶排序" class="headerlink" title="9、桶排序"></a>9、桶排序</h3><p>将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> bucketSort(array, num) &#123;</div><div class="line">　　<span class="keyword">if</span> (array.length &lt;= 1) &#123;</div><div class="line">　　　　<span class="built_in">return</span> array;</div><div class="line">　　&#125;</div><div class="line">　　var len = array.length, buckets = [], result = [], min = max = array[0], space, n = 0;</div><div class="line"></div><div class="line">　　var index = Math.floor(len / num) ;</div><div class="line">　　<span class="keyword">while</span>(index&lt;2)&#123;</div><div class="line"></div><div class="line">　　　　num--;</div><div class="line">　　　　index = Math.floor(len / num) ;</div><div class="line">　　&#125;</div><div class="line"></div><div class="line">　　<span class="keyword">for</span> (var i = 1; i &lt; len; i++) &#123;</div><div class="line">　　　　min = min &lt;= array[i] ? min : array[i];</div><div class="line">　　　　max = max &gt;= array[i] ? max : array[i];</div><div class="line">　　&#125;</div><div class="line">　　space = (max - min + 1) / num;  //步长</div><div class="line">　　<span class="keyword">for</span> (var j = 0; j &lt; len; j++) &#123;</div><div class="line">　　　　var index = Math.floor((array[j] - min) / space);</div><div class="line">　　　　<span class="keyword">if</span> (buckets[index]) &#123; // 非空桶，插入排序</div><div class="line">　　　　　　var k = buckets[index].length - 1;</div><div class="line">　　　　　　<span class="keyword">while</span> (k &gt;= 0 &amp;&amp; buckets[index][k] &gt; array[j]) &#123;</div><div class="line">　　　　　　　　buckets[index][k + 1] = buckets[index][k];</div><div class="line">　　　　　　　　k--;</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　　　buckets[index][k + 1] = array[j];</div><div class="line">　　　　&#125; <span class="keyword">else</span> &#123; //空桶，初始化</div><div class="line">　　　　　　buckets[index] = [];</div><div class="line">　　　　　　buckets[index].push(array[j]);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">while</span> (n &lt; num) &#123;</div><div class="line">　　　　result = result.concat(buckets[n]);</div><div class="line">　　　　n++;</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> result;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(bucketSort(arr,4));</div></pre></td></tr></table></figure></p><h3 id="10、基数排序"><a href="#10、基数排序" class="headerlink" title="10、基数排序"></a>10、基数排序</h3><p>透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)<br>，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> radixSort(arr, maxDigit) &#123;</div><div class="line">　　var mod = 10;</div><div class="line">　　var dev = 1;</div><div class="line">　　var counter = [];</div><div class="line">　　<span class="keyword">for</span> (var i = 0; i &lt; maxDigit; i++, dev *= 10, mod *= 10) &#123;</div><div class="line">　　　　<span class="keyword">for</span>(var j = 0; j &lt; arr.length; j++) &#123;</div><div class="line">　　　　　　var bucket = parseInt((arr[j] % mod) / dev);</div><div class="line">　　　　　　<span class="keyword">if</span>(counter[bucket]== null) &#123;</div><div class="line">　　　　　　　　counter[bucket] = [];</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　counter[bucket].push(arr[j]);</div><div class="line">　　　　&#125;</div><div class="line">　　　　var pos = 0;</div><div class="line">　　　　<span class="keyword">for</span>(var j = 0; j &lt; counter.length; j++) &#123;</div><div class="line">　　　　　　var value = null;</div><div class="line">　　　　　　<span class="keyword">if</span>(counter[j]!=null) &#123;</div><div class="line">　　　　　　　　<span class="keyword">while</span> ((value = counter[j].<span class="built_in">shift</span>()) != null) &#123;</div><div class="line">　　　　　　　　　　arr[pos++] = value;</div><div class="line">　　　　　　　　&#125;</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> arr;</div><div class="line">&#125;</div><div class="line">var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];</div><div class="line">console.log(radixSort(arr,2));</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟随Google大佬的脚步。。。（一如既往的跟不上）&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=486412012&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树算法原理</title>
    <link href="http://yoursite.com/2018/12/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/12/05/二叉树算法原理/</id>
    <published>2018-12-04T16:08:31.000Z</published>
    <updated>2018-12-05T04:07:17.622Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树原理手记。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=865014922&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根结点的度不大于2。有了根结点之后，每个顶点定义了唯一的父结点，和最多2个子结<br>点。然而，没有足够的信息来区分左结点和右结点。如果不考虑连通性，允许图中有多个连通分量，这样的结构叫做森林。二叉树是由n（n&gt;=0）个结点组成的有序集合<br>集合或者为空，或者是由一个根节点加上两棵分别称为左子树和右子树的、互不相交的二叉树组成。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/1.JPG" alt="“二叉树”" title="">                </div>                <div class="image-caption">“二叉树”</div>            </figure>  <h3 id="设计二叉树逻辑"><a href="#设计二叉树逻辑" class="headerlink" title="设计二叉树逻辑"></a>设计二叉树逻辑</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">BinaryTree</span></span>()&#123;</div><div class="line">//定义节点</div><div class="line">var Node=<span class="keyword">function</span>(key)&#123;</div><div class="line">this.key=key;</div><div class="line">this.left=null;</div><div class="line">this.right=null;</div><div class="line">&#125;;</div><div class="line">//定义一个根节点</div><div class="line">var root=null;</div><div class="line">//node老节点,newNode新节点（要插入一个新节点的时候，如果新节点比当前的老节点的值要小，那么就可以把新节点放到老节点的左边）</div><div class="line">var insertNode=<span class="keyword">function</span>(node,newNode)&#123;  </div><div class="line"><span class="keyword">if</span> (node.key&gt;newNode.key) &#123;   //如果新节点小于老节点或者</div><div class="line"><span class="keyword">if</span> (node.left===null) &#123;    //如果新节点还没有左节点的话</div><div class="line">node.left=newNode;     //可以把新节点当作老节点的左孩子</div><div class="line">&#125;<span class="keyword">else</span>&#123;   //如果已经有左孩子了，就将这个新节点插入到左节点的左边部分</div><div class="line">insertNode(node.left,newNode);</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;    //如果新节点大于老节点、，就插入老节点右边部分</div><div class="line"><span class="keyword">if</span>(node.right===null)&#123;   //看老节点右边部分是不是为空</div><div class="line">node.right=newNode;   //如果老节点右边为空，就把这个新节点作为老节点的右孩子</div><div class="line">&#125;<span class="keyword">else</span>&#123;    //如果右孩子不为空的话，继续往右边添加</div><div class="line">insertNode(node.right,newNode);                                         //到此为止，整个树的插入逻辑就设计完成了</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.insert=<span class="keyword">function</span>(key)&#123;   //专门用来插入节点</div><div class="line">var newNode=new Node(key)  //根据传进来的节点数值，构造一个节点对象</div><div class="line"><span class="keyword">if</span> (root===null) &#123;       //如果此时根节点是空</div><div class="line">root=newNode;        //新插入的节点就是根节点</div><div class="line">&#125;<span class="keyword">else</span>&#123;                  //否则根据排序二叉树的特性插入新的节点</div><div class="line">insertNode(root,newNode)    //插入新节点的方法</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="树逻辑设计完成之后，构造一系列节点，来调用这个二叉树的接口，进行节点插入的过程"><a href="#树逻辑设计完成之后，构造一系列节点，来调用这个二叉树的接口，进行节点插入的过程" class="headerlink" title="树逻辑设计完成之后，构造一系列节点，来调用这个二叉树的接口，进行节点插入的过程"></a>树逻辑设计完成之后，构造一系列节点，来调用这个二叉树的接口，进行节点插入的过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var ndoes=[8,3,10,1,6,14,4,7,13];   //构造一个数组定义插入节点的数值</div><div class="line">var binaryTree=new BinaryTree();    //实例化一个BinaryTree</div><div class="line">//然后依次把数组中的数值插入二叉树，插入完之后，完整的二叉树就构成了</div><div class="line">ndoes.forEach(<span class="keyword">function</span>(key)&#123;</div><div class="line">    binaryTree.insert(key)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>一开始二叉树是空的，所以第一次插入节点的时候节点8就成了根节点，也就是起始二叉树的根节点<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/2.JPG" alt="“进入的第一个节点”" title="">                </div>                <div class="image-caption">“进入的第一个节点”</div>            </figure><br>用chrome调试可以看到二叉树生成的过程<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/3.JPG" alt="“根节点8”" title="">                </div>                <div class="image-caption">“根节点8”</div>            </figure><br>第二个节点3进来的时候会和根节点比较，然后成为节点8的左孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/4.JPG" alt="“左孩子3”" title="">                </div>                <div class="image-caption">“左孩子3”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/5.JPG" alt="“左孩子3”" title="">                </div>                <div class="image-caption">“左孩子3”</div>            </figure><br>第三次进来的时候是节点10，节点10会和8比对，发现比8大并且节点8的右孩子节点为空，所以节点10就成了节点8的右孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/6.JPG" alt="“左孩子3”" title="">                </div>                <div class="image-caption">“左孩子3”</div>            </figure><br>第四次进来的是节点1，此时二叉树已经有了根节点8以及左孩子3，右孩子10，然后进来的1比8小，而且此时已经有了左孩子3,左孩子3此时是没有左右孩子节点的，所以进来的1成了3的左孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/7.JPG" alt="“左孩子1”" title="">                </div>                <div class="image-caption">“左孩子1”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/8.JPG" alt="“左孩子1进来的时候和8比对”" title="">                </div>                <div class="image-caption">“左孩子1进来的时候和8比对”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/9.JPG" alt="“左孩子1和8比对之后和3比对”" title="">                </div>                <div class="image-caption">“左孩子1和8比对之后和3比对”</div>            </figure><br>第五次加入的是节点6，由于节点6是小于节点8的并且大于此时节点8的左孩子节点3，所以就成了此时空着的节点3的右节点<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/10.JPG" alt="“根节点8的左子树3的右孩子”" title="">                </div>                <div class="image-caption">“根节点8的左子树3的右孩子”</div>            </figure><br>它的过程是6进来的时候和8比对，然后8此时有了左孩子3，然后6和3比对，6&gt;3而且此时3没有右孩子，所以就成了3的右孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/11.JPG" alt="“6和8比对”" title="">                </div>                <div class="image-caption">“6和8比对”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/12.JPG" alt="“6和3比对”" title="">                </div>                <div class="image-caption">“6和3比对”</div>            </figure><br>第六次进来的是节点14，由于节点14大于节点8所以走右边，因为节点8的右孩子此时是10,14大于10而且节点10此时没有右孩子，所以就成了节点10的右孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/13.JPG" alt="“此时的二叉树”" title="">                </div>                <div class="image-caption">“此时的二叉树”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/14.JPG" alt="“14和8比对”" title="">                </div>                <div class="image-caption">“14和8比对”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/15.JPG" alt="“14和10比对”" title="">                </div>                <div class="image-caption">“14和10比对”</div>            </figure><br>以此类推，最后根据给的数组生成了一颗二叉树<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/16.JPG" alt="“生成的排序二叉树”" title="">                </div>                <div class="image-caption">“生成的排序二叉树”</div>            </figure><br>有了一棵构建好的排序二叉树之后，可以用遍历获取二叉树中每个节点的信息，遍历分三种方法，中序遍历、前序遍历、后序遍历</p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历（LDR）是二叉树遍历的一种，也叫做中根遍历、中序周游。在二叉树中，中序遍历首先遍历左子树，然后访问根结点，最后遍历右子树。<br>假如此时我处于某一个节点，处于这个节点的时候，我先看左孩子有没有，如果有的话，遍历整棵左子树，遍历完整棵左子树之后再返回来输出当前节点，输出完之后<br>再去遍历整棵右子树，遍历完之后，一个节点的左子树和右子树以及它本身就都被遍历完了，然后它沿着箭头向它的父节点遍历，依赖这个中序遍历的话实际上是以升<br>序的方式访问整个二叉树的节点</p><h4 id="给BinaryTree增加一个中序遍历的接口"><a href="#给BinaryTree增加一个中序遍历的接口" class="headerlink" title="给BinaryTree增加一个中序遍历的接口"></a>给BinaryTree增加一个中序遍历的接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var inOrderTraverseNode=<span class="keyword">function</span>(node,callback)&#123;    //node=二叉树的节点对象,callback=普通回调函数</div><div class="line"><span class="keyword">if</span>(node!==null)&#123;   //如果节点不为空的话</div><div class="line">    inOrderTraverseNode(node.left,callback)  //访问它的左子树</div><div class="line">    callback(node.key)   //访问完左子树之后访问当前节点，然后把当前节点的值传入回调函数中</div><div class="line">    inOrderTraverseNode(node.right,callback)  //继续访问当前节点的右子树</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//callback=待会要输出某个节点的值得时候，把这个节点的值传入到这个回调函数中，让这个回调函数决定如何输出</div><div class="line">this.inOrderTraverse=<span class="keyword">function</span>(callback)&#123;        </div><div class="line">inOrderTraverseNode(root,callback)   //从根节点开始遍历</div><div class="line">&#125;</div><div class="line"></div><div class="line">var callback=<span class="keyword">function</span>(key)&#123;</div><div class="line">    console.log(key)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调BinaryTree的中序接口</div><div class="line">binaryTree.inOrderTraverse(callback)</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/a.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>前序遍历（DLR），是二叉树遍历的一种，也叫做先根遍历、先序遍历、前序周游，可记做根左右。前序遍历首先访问根结点然后遍历左子树，最后遍历右子树。</p><h4 id="给BinaryTree增加一个前序遍历的接口"><a href="#给BinaryTree增加一个前序遍历的接口" class="headerlink" title="给BinaryTree增加一个前序遍历的接口"></a>给BinaryTree增加一个前序遍历的接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var preOrderTraverseNode=<span class="keyword">function</span>(node,callback)&#123;</div><div class="line"><span class="keyword">if</span>(node!==null)&#123;</div><div class="line">callback(node.key)</div><div class="line">preOrderTraverseNode(node.left,callback)   //遍历该节点左子树</div><div class="line">preOrderTraverseNode(node.right,callback)  //遍历该节点的右子树</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.preOrderTraverse=<span class="keyword">function</span>(callback)&#123;</div><div class="line">preOrderTraverseNode(root,callback)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调BinaryTree的前序接口</div><div class="line">binaryTree.preOrderTraverse(callback)</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/b.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历（LRD）是二叉树遍历的一种，也叫做后根遍历、后序周游，可记做左右根。后序遍历有递归算法和非递归算法两种。在二叉树中，先左后右再根，即首先遍历<br>左子树，然后遍历右子树，最后访问根结点。</p><h4 id="给BinaryTree增加一个后序遍历的接口"><a href="#给BinaryTree增加一个后序遍历的接口" class="headerlink" title="给BinaryTree增加一个后序遍历的接口"></a>给BinaryTree增加一个后序遍历的接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var postOrderTraverseNode=<span class="keyword">function</span>(node,callback)&#123;</div><div class="line"><span class="keyword">if</span> (node!==null) &#123;</div><div class="line">postOrderTraverseNode(node.left,callback) //先遍历当前节点的左子树</div><div class="line">postOrderTraverseNode(node.right,callback) //遍历完左子树之后遍历右子树</div><div class="line">callback(node.key)   //遍历完之后输出节点的值</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.postOrderTraverse=<span class="keyword">function</span>(callback)&#123;</div><div class="line">postOrderTraverseNode(root,callback)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调BinaryTree的前序接口</div><div class="line">binaryTree.postOrderTraverse(callback)</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/c.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><h3 id="二叉树节点查找"><a href="#二叉树节点查找" class="headerlink" title="二叉树节点查找"></a>二叉树节点查找</h3><p>主要是看某个给定数值的节点是否在二叉树中存在，设想开发作战游戏，飞机发出导弹的运行轨迹在不断改变，那它能否击中外星人了，这样就把外星人的坐标当成<br>一个二叉树，导弹前进的时候坐标也在变化，导弹每前进一次，坐标变化之后就在外星人坐标的二叉树中查找，如果导弹的坐标和外星人在二叉树中的坐标重合的话<br>，也就是说，在二叉树中找到了一个数值和导弹的数值是一样的，也就是击中了，要是找不到的话，就说明导弹击不中外星人</p><h4 id="二叉树的节点查找分三种"><a href="#二叉树的节点查找分三种" class="headerlink" title="二叉树的节点查找分三种"></a>二叉树的节点查找分三种</h4><p>1、查找二叉树最小节点，从当前节点出发查找节点左子树<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//查找二叉树最小节点接口</div><div class="line">var minNode=<span class="keyword">function</span>(node)&#123;</div><div class="line"><span class="keyword">if</span>(node)&#123;</div><div class="line"><span class="keyword">while</span>(node&amp;&amp;node.left!==null)&#123;</div><div class="line">node=node.left</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> node.key</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> null</div><div class="line">&#125;</div><div class="line">this.min=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="built_in">return</span> minNode(root)</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(`二叉树的最小节点是<span class="variable">$&#123;binaryTree.min()&#125;</span>`)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/d.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><p>2、查找二叉树最大节点，从当前节点出发查找节点右子树<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//查找二叉树最大节点接口</div><div class="line">var maxNode=<span class="keyword">function</span>(node)&#123;</div><div class="line"><span class="keyword">if</span> (node) &#123;</div><div class="line"><span class="keyword">while</span>(node&amp;&amp;node.right!==null)&#123;</div><div class="line">node=node.right</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> node.key</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> null</div><div class="line">&#125;</div><div class="line">this.max=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="built_in">return</span> maxNode(root)</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(`二叉树的最小节点是<span class="variable">$&#123;binaryTree.max()&#125;</span>`)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/e.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><p>3、给定某个节点数值，然后和根节点进行比对大小，大的话从右子树继续比对，小的话就是左子树，如果是一样的话，直接返回当前节点的值，如果没找到可以认为是查找失败<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//查找给定的节点</div><div class="line">var searchNode=<span class="keyword">function</span>(node,key)&#123;</div><div class="line"><span class="keyword">if</span> (node===null) &#123;</div><div class="line"><span class="built_in">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (node.key&gt;key) &#123;</div><div class="line"><span class="built_in">return</span> searchNode(node.left,key)</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (node.key&lt;key) &#123;</div><div class="line"><span class="built_in">return</span> searchNode(node.right,key)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.search=<span class="keyword">function</span>(key)&#123;</div><div class="line"><span class="built_in">return</span> searchNode(root,key)</div><div class="line">&#125;</div><div class="line">console.log(binaryTree.search(6)?`key is 6`:`not found`)   //6是二叉树中有的节点</div><div class="line">console.log(binaryTree.search(16)?`key is 16`:`not found`)   //16是二叉树中没有的节点</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/f.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><h3 id="二叉树节点删除"><a href="#二叉树节点删除" class="headerlink" title="二叉树节点删除"></a>二叉树节点删除</h3><h4 id="删除只有一个子树的节点"><a href="#删除只有一个子树的节点" class="headerlink" title="删除只有一个子树的节点"></a>删除只有一个子树的节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//接口</div><div class="line">var removeNode=<span class="keyword">function</span>(node,key)&#123;</div><div class="line"><span class="keyword">if</span> (node===null) &#123;</div><div class="line"><span class="built_in">return</span> null</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (key&lt;node.key) &#123;</div><div class="line">node.left=removeNode(node.left,key)</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key&gt;node.key) &#123;</div><div class="line">node.right=removeNode(node.right,key)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">if</span> (node.left===null&amp;&amp;node.right===null) &#123;</div><div class="line">node=null</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (node.left===null) &#123;</div><div class="line">node=node.right</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (node.right===null) &#123;</div><div class="line">node=node.left</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.remove=<span class="keyword">function</span>(key)&#123;</div><div class="line">removeNode(root,key)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调接口</div><div class="line">binaryTree.remove(10)    //删除节点10</div></pre></td></tr></table></figure><p>假如删除的节点含有左右子树的话，就要从被删除节点的右子树中找到最小的子节点，然后将要删除的节点的值换成找到的最小的子节点的值，这样二叉树里面就有<br>两个相同的节点，这时候就要把最小子节点去掉，做完这些步骤之后二叉树仍然是保持平衡性质的，这时候接口可以改成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">var findMinNode=<span class="keyword">function</span>(node)&#123;</div><div class="line"><span class="keyword">if</span> (node) &#123;</div><div class="line"><span class="keyword">while</span>(node&amp;&amp;node.left!==null)&#123;</div><div class="line">node=node.left</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line">var removeNode=<span class="keyword">function</span>(node,key)&#123;</div><div class="line"><span class="keyword">if</span> (node===null) &#123;</div><div class="line"><span class="built_in">return</span> null</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (key&lt;node.key) &#123;</div><div class="line">node.left=removeNode(node.left,key)</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key&gt;node.key) &#123;</div><div class="line">node.right=removeNode(node.right,key)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">if</span> (node.left===null&amp;&amp;node.right===null) &#123;</div><div class="line">node=null</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (node.left===null) &#123;</div><div class="line">node=node.right</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (node.right===null) &#123;</div><div class="line">node=node.left</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line">//执行到这里就说明这是有两个子树的节点</div><div class="line">var aux=findMinNode(node.right)  //找到这个节点，在节点右子树中找到最小的子节点</div><div class="line">node.key=aux.key    //找到之后把这个节点的值更新成这个子节点的值</div><div class="line">node.right=removeNode(node.right,aux.key)   //从右子树中把这个最小子节点删除</div><div class="line"><span class="built_in">return</span> node     //删除之后得到平衡的二叉树</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.remove=<span class="keyword">function</span>(key)&#123;</div><div class="line">removeNode(root,key)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>应用场景：前序遍历用于复制二叉树，因为即使你想重新根据节点生成，如果节点多的话，算法的空间复杂度是很大的，前序遍历复制的效率要比重新生成的效率高出10倍左右<br>，中序遍历可用于排序，后序遍历可以用在系统文件检索。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/666.jpg" alt="最后放上我偶像" title="">                </div>                <div class="image-caption">最后放上我偶像</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树原理手记。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=865014922&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="中序遍历" scheme="http://yoursite.com/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="前序遍历" scheme="http://yoursite.com/tags/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="后序遍历" scheme="http://yoursite.com/tags/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="二叉树节点查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%8A%82%E7%82%B9%E6%9F%A5%E6%89%BE/"/>
    
      <category term="二叉树节点删除" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%8A%82%E7%82%B9%E5%88%A0%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>react造了一个PC城市选择的轮子</title>
    <link href="http://yoursite.com/2018/11/16/react%E9%80%A0%E4%BA%86%E4%B8%80%E4%B8%AAPC%E5%9F%8E%E5%B8%82%E9%80%89%E6%8B%A9%E7%9A%84%E8%BD%AE%E5%AD%90/"/>
    <id>http://yoursite.com/2018/11/16/react造了一个PC城市选择的轮子/</id>
    <published>2018-11-16T04:48:42.000Z</published>
    <updated>2018-12-04T18:04:31.917Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一个react项目的时候，突然想做出来留着下次需要就二次开</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=167679&auto=0&height=66"></iframe><br><a id="more"></a></p><p>在做城市选择的时候，找了网上的一些现成资料，但是都是移动端的，PC的太少，antd的我自己觉得不太好用，然后就想着自己写一个备用，下次需要就在它基础上二次开发就可以了<br><a href="https://github.com/HHardyy/react-cityselect" target="_blank" rel="external">它在这里</a><br>，这个不是我项目里面的，毕竟项目里面的代码不能暴露，这是我重新设计的极简版，没有太多余的依赖文件，可以扩展的空间也更多，demo是我用脚手架建的一个简单的使用这个组件的例子，里头我用的是redux和装饰器来做。</p><blockquote><p>用的时候初始化一下ul的默认样式（margin，padding）</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reactCselect/aaa.gif" alt="“跑起来”" title="">                </div>                <div class="image-caption">“跑起来”</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做一个react项目的时候，突然想做出来留着下次需要就二次开&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=167679&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="轮子" scheme="http://yoursite.com/tags/%E8%BD%AE%E5%AD%90/"/>
    
      <category term="城市选择" scheme="http://yoursite.com/tags/%E5%9F%8E%E5%B8%82%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>Ant Design of React(Upload)</title>
    <link href="http://yoursite.com/2018/11/06/Ant-Design-of-React-Upload/"/>
    <id>http://yoursite.com/2018/11/06/Ant-Design-of-React-Upload/</id>
    <published>2018-11-05T16:11:51.000Z</published>
    <updated>2018-11-05T17:49:57.397Z</updated>
    
    <content type="html"><![CDATA[<p>日常记录，Upload大家都懂，写接口接Upload大家也都会，但是别拦我，我说说我遇到的antd Design的Upload</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1320593213&auto=0&height=66"></iframe><br><a id="more"></a></p><p>假如我有个文件要上传到服务器并且返回文件保存的路径，那我可能会像下面这么写</p><blockquote><p>FormData对象用以将数据编译成键值对，以便用XMLHttpRequest来发送数据。其主要用于发送表单数据，但亦可用于发送带键数据(keyed data)<br>而独立于表单使用。如果表单enctype属性设为multipart/form-data ，则会使用表单的submit()方法来发送数据，从而，发送数据具有同样形式。</p></blockquote><p>前端代码,也就是你点击上传或者发送或者什么的之后执行的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">handleUpload = () =&gt; &#123;</div><div class="line">//为文件创建formData，key是files</div><div class="line">    const formData = new FormData();</div><div class="line">    fileList.forEach((file) =&gt; &#123;</div><div class="line">      formData.append(<span class="string">'files'</span>, file);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    this.setState(&#123;</div><div class="line">      uploading: <span class="literal">true</span>,</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    reqwest(&#123;</div><div class="line">      url: <span class="string">'/upload'</span>,</div><div class="line">      method: <span class="string">'post'</span>,</div><div class="line">      processData: <span class="literal">false</span>,</div><div class="line">      data: formData,</div><div class="line">      success: (resp) =&gt; &#123;</div><div class="line">      console.log(resp)</div><div class="line">        this.setState(&#123;</div><div class="line">          fileList: [],</div><div class="line">          uploading: <span class="literal">false</span>,</div><div class="line">        &#125;);</div><div class="line">        message.success(<span class="string">'upload successfully.'</span>);</div><div class="line">      &#125;,</div><div class="line">      error: () =&gt; &#123;</div><div class="line">        this.setState(&#123;</div><div class="line">          uploading: <span class="literal">false</span>,</div><div class="line">        &#125;);</div><div class="line">        message.error(<span class="string">'upload failed.'</span>);</div><div class="line">      &#125;,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>接口,比较简陋，主要是看看直接接收会出来什么东西<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> upload = multer(&#123;dest:<span class="string">'./目录/我的路径'</span>&#125;); //设置文件存储位置</div><div class="line">app.use(express.static(<span class="string">'./目录'</span>));           //设置静态文件目录</div><div class="line">app.post(<span class="string">"/upload"</span>,upload.single(<span class="string">'files'</span>),(req, res) =&gt; &#123;</div><div class="line">    console.log(req.file)</div><div class="line">    const initFileName=req.file.originalname  //原始文件名</div><div class="line">    console.log(initFileName)</div><div class="line">    res.send(<span class="string">'./uploads/'</span> + initFileName)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>然后我选择一个叫测试.doc的文档上传。接着打开浏览器调试看看给我返回了什么<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/1.JPG" alt="response" title="">                </div>                <div class="image-caption">response</div>            </figure><br>返回的文件地址，文件名是一串uuid的编码，开始我以为是组件默认的加密之后，但是服务器打印出来的文件信息显示encoding是“7bit”，所以并不是它默认加密或者什么<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/2.JPG" alt="服务器打印" title="">                </div>                <div class="image-caption">服务器打印</div>            </figure><br>（虽然是uuid编码，但是两个图文件名为啥不一样。。。这个怪我这个爪，是因为服务器的时候我又拖了个文件上传，其实同一个文件的话，它是一样的）<br>当然你想直接console.log(formData)查看数据是不可以的，formData不允许，只允许类似这样的操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> formData = new FormData()</div><div class="line">formData.append(<span class="string">'user'</span>, <span class="string">'hhardyy'</span>)</div><div class="line">获取 formData.get(<span class="string">'user'</span>)  </div><div class="line">删除 formData.delete(<span class="string">'user'</span>)</div><div class="line">打印出来看的话就是 console.log(formData.get(<span class="string">'user'</span>))</div></pre></td></tr></table></figure></p><p>假如怀疑是不是真的上传有文件的话，可以看看我们发的请求<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/3.JPG" alt="服务器打印" title="">                </div>                <div class="image-caption">服务器打印</div>            </figure><br>实际上不仅是路径上的文件名变成了uuid编码，保存的文件名字也是一样<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/4.JPG" alt="formData的信息" title="">                </div>                <div class="image-caption">formData的信息</div>            </figure><br>这时候如果想让保存的文件名字是上传时候的名字或者自定义名字的话可以这么操作，上面那个后台接收其实用的是Express4.x的中间件multer，它有个东西叫diskstorage，可以用来自定义存储位<br>置和自定义文件名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var storage = multer.diskStorage(&#123;</div><div class="line">  destination: <span class="keyword">function</span> (req, file, cb) &#123;</div><div class="line">    cb(null, <span class="string">'文件存储目录'</span>)</div><div class="line">  &#125;,</div><div class="line">  filename: <span class="keyword">function</span> (req, file, cb) &#123;</div><div class="line">    cb(null, <span class="string">'文件名'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"> </div><div class="line">var upload = multer(&#123; storage: storage &#125;)</div></pre></td></tr></table></figure></p><p>安装 multer<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install multer --save</div></pre></td></tr></table></figure></p><p>destination和filename函数的参数req在这里.body都是空对象{}，未装载formdata的文本域数据。file虽然装载了文件对象，但是信息不全。<br>接口可以改成这么写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> storage = multer.diskStorage(&#123;</div><div class="line">    destination: <span class="keyword">function</span> (req, file, cb) &#123;</div><div class="line">        cb(null, <span class="string">'./我的路径'</span>);</div><div class="line">    &#125;,//指定存储路径</div><div class="line">    filename: <span class="keyword">function</span> (req, file, cb) &#123;</div><div class="line">    //originalname=原始文件名，原始文件名是测试.doc，我把它后缀干掉，下面改成文件名+上传时间+文件后缀</div><div class="line">        <span class="built_in">let</span> fileName=file.originalname.substring(0,file.originalname.indexOf(<span class="string">'.'</span>,0))    </div><div class="line">        cb(null, fileName + <span class="string">'-'</span> + Date.now() + <span class="string">'.doc'</span>);//指定文件名和扩展名</div><div class="line">    &#125;</div><div class="line">&#125;);//指定存储方法,upload.single=单个文件，upload.Array=多个文件</div><div class="line">app.use(express.static(<span class="string">'./我的路径'</span>));       //设置静态文件目录</div><div class="line"><span class="built_in">let</span> upload = multer(&#123; storage: storage &#125;);  //存储方法，5是限制大小，files是前端的files，一定要是一样的</div><div class="line">app.use(upload.single(<span class="string">'files'</span>, 5));</div><div class="line">app.post(<span class="string">'/upload'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">    res.send(<span class="string">'./路径'</span> + req.file.filename);  //文件的下载地址</div><div class="line">    console.log(req.file)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>这样就正常了。继续深入了解可以去了解一下multer，这只是个简单的demo<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/5.JPG" alt="保存的文件" title="">                </div>                <div class="image-caption">保存的文件</div>            </figure></p><p>还有一个问题就是返回的文件路径我想让别人点击一下就可以访问，那我这时候会用一个a来包裹，然后返回给前端直接可以点链接访问到文件的连接，但是后台返回的是字符串，你到前端的时候显示也是字符串，就像<br>这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"http://<span class="variable">$&#123;this.state.fileAddress&#125;</span>"</span>&gt;请点击查看我的简历&lt;/a&gt;</div></pre></td></tr></table></figure></p><p>其实在做react项目时，有时候需要将后台传过来的html元素的字符串形式变成真正的dom渲染到页面，如果直接插入的话页面显示的就是这段字符串，它不会自己进行转义，这时候可以在你要渲染的元素那写上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span dangerouslySetInnerHTML=&#123;&#123;__html: xxx&#125;&#125;&gt;&lt;/span&gt;               // xxx是你的那段字符串，只是html元素会被转义成dom</div></pre></td></tr></table></figure></p><p>语法是这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> str=<span class="string">"&lt;a href="</span>https://hhardyy.com/<span class="string">"&gt;hhardyy&lt;/a&gt;"</span></div><div class="line">&lt;span dangerouslySetInnerHTML=&#123;&#123;__html: str&#125;&#125;&gt;&lt;span/&gt;</div></pre></td></tr></table></figure></p><p>今晚正好做了简历点对点发送接收功能，顺便写一写demo。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常记录，Upload大家都懂，写接口接Upload大家也都会，但是别拦我，我说说我遇到的antd Design的Upload&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1320593213&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="字符串html元素渲染" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2html%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93/"/>
    
      <category term="multer" scheme="http://yoursite.com/tags/multer/"/>
    
      <category term="Upload" scheme="http://yoursite.com/tags/Upload/"/>
    
  </entry>
  
  <entry>
    <title>浅谈高阶组件</title>
    <link href="http://yoursite.com/2018/10/05/%E6%B5%85%E8%B0%88%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/10/05/浅谈高阶组件/</id>
    <published>2018-10-04T18:19:24.000Z</published>
    <updated>2018-10-04T18:52:31.886Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道高阶函数，本文讲的高阶组件最大的特点就是代码复用，逻辑抽象…</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=534165062&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>最近学会了吉他，再加上是深夜了，所以就配个吉他版夜的钢琴曲</p></blockquote><p>切入正题，就简单粗暴的举例说明吧</p><p>简单解释高阶组件，首先示例一个函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</div><div class="line">    console.log(<span class="string">"hhardyy i love you"</span>);</div><div class="line">&#125;</div><div class="line">hello()</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/1.JPG" alt="“”" title="">                </div>                <div class="image-caption">“”</div>            </figure>  <p>然后高阶组件这么写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</div><div class="line">    console.log(<span class="string">"hhardyy i love you"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> newHello(fnc)&#123;</div><div class="line">    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(<span class="string">"befor hello"</span>)</div><div class="line">        fnc()</div><div class="line">        console.log(<span class="string">"after hello"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">hello = newHello(hello)</div><div class="line">hello()</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/2.JPG" alt="“”" title="">                </div>                <div class="image-caption">“”</div>            </figure>  <p>这种模式就叫装饰器模式，这两hello()使用的时候虽然是一样的，但是内部已经发生了翻天覆地的变化，这是理解高阶组件的第一步，接下来我写个组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Hello extends Component&#123;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        <span class="built_in">return</span> &lt;h2&gt;hhardyy <span class="built_in">test</span> react &amp; 疯狂<span class="built_in">test</span> react&lt;/h2&gt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后在我的项目中的组件（一个写好的组件就可以）的return中用上，然后打印<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/3.JPG" alt="“”" title="">                </div>                <div class="image-caption">“”</div>            </figure><br>高阶组件其实就是一个组件传入另一个组件，而大家也意识到，组件其实就是个函数，我用<a href="https://babeljs.io/repl" target="_blank" rel="external">babel</a>来解析一下这个组件<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/4.png" alt="“babel解析hello组件”" title="">                </div>                <div class="image-caption">“babel解析hello组件”</div>            </figure><br>从这里可以看出来，所有的组件本质上都是一个函数，再举个栗子，我写个专门装饰上面hello组件的函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> newHello(Component)&#123;</div><div class="line">    class newHel extends Component&#123;</div><div class="line">        <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">            <span class="built_in">return</span> (</div><div class="line">                &lt;div&gt;</div><div class="line">                    &lt;p&gt;高阶组件元素&lt;/p&gt;</div><div class="line">                    &lt;Component &#123;...this.props&#125;&gt;&lt;/Component&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> newHel</div><div class="line">&#125;</div><div class="line">Hello = newHello(Hello)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/5.png" alt="“专门装饰上面hello组件的函数”" title="">                </div>                <div class="image-caption">“专门装饰上面hello组件的函数”</div>            </figure>  <p>我们常用的@connect装饰器其实就是这么个原理，这里我假装newHello是从别的地方引进来的，很远很远的地方（怕太远了你们看不到就往上移了几行，假装很远），然后在hello组件上写上@newHello，也就是这个样子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@newHello</div><div class="line">class Hello extends Component&#123;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        <span class="built_in">return</span> &lt;h2&gt;hhardyy <span class="built_in">test</span> react组件 模拟@ &amp; 疯狂<span class="built_in">test</span> react&lt;/h2&gt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/6.png" alt="“模拟装饰器写法”" title="">                </div>                <div class="image-caption">“模拟装饰器写法”</div>            </figure>  <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/7.png" alt="“效果”" title="">                </div>                <div class="image-caption">“效果”</div>            </figure>  <p>来模拟@connect装饰器，这就是最简单的一个高阶组件，也就是给一个组件，然后返回另外一个组件，另外的组件把原来的组件包裹一层，这样就可以在原来的组件之上添加或者修改一些功能</p><h3 id="高阶组件主要分两种"><a href="#高阶组件主要分两种" class="headerlink" title="高阶组件主要分两种"></a>高阶组件主要分两种</h3><h4 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h4><p>上面这个组件叫属性代理，我们可以在<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Component &#123;...this.props&#125;&gt;&lt;/Component&gt;</div></pre></td></tr></table></figure></p><p>上给name,data等等</p><h4 id="反向继承"><a href="#反向继承" class="headerlink" title="反向继承"></a>反向继承</h4><p>就是不继承React.Component,而是直接继承原来的组件，这样就可以改写原来component的生命周期，比如这样子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> newHello(Component)&#123;</div><div class="line">    class newHel extends Component&#123;  //这里的Component不是继承自React的Component，而是传进来的Component</div><div class="line">        <span class="function"><span class="title">componentDidMount</span></span>() &#123;</div><div class="line">            console.log(<span class="string">"高阶组件新增生命周期完成"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">            <span class="built_in">return</span> &lt;Component&gt;&lt;/Component&gt;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> newHel</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样之后和之前的关系就成了继承的关系，而不是代理的关系，这种方式可以修改它的生命周期，可以修改渲染逻辑以及整个渲染的流程，使用高阶组件的作用主要是代码复用以及逻辑抽象等<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/8.png" alt="“两者简单的代码比较”" title="">                </div>                <div class="image-caption">“两者简单的代码比较”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/9.png" alt="“属性继承和反向代理的区别效果”" title="">                </div>                <div class="image-caption">“属性继承和反向代理的区别效果”</div>            </figure><br>有点困，仗着国庆小长假疯狂试探新知识，平均睡觉时间3点</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道高阶函数，本文讲的高阶组件最大的特点就是代码复用，逻辑抽象…&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=534165062&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="高阶组件" scheme="http://yoursite.com/tags/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
    
      <category term="反向继承" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%90%91%E7%BB%A7%E6%89%BF/"/>
    
      <category term="属性代理" scheme="http://yoursite.com/tags/%E5%B1%9E%E6%80%A7%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>redux、react-router</title>
    <link href="http://yoursite.com/2018/09/21/redux%E3%80%81react-router/"/>
    <id>http://yoursite.com/2018/09/21/redux、react-router/</id>
    <published>2018-09-21T04:29:36.000Z</published>
    <updated>2018-09-23T08:30:43.286Z</updated>
    
    <content type="html"><![CDATA[<p>redux状态管理，不光react可以用，vue，angular都可以用。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=460318201&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>Redux 本身很简单。当使用普通对象来描述应用的 state 时。这个对象就像 “Model”，区别是它并没有 setter（修改器方法）。因此其它的代码不能随意修改它，造成难以复现的 bug。<br>要想更新 state 中的数据，你需要发起一个 action。Action 就是一个普通 JavaScript对象（注意到没，这儿没有任何魔法？）用来描述发生了什么。强制使用action来描述所有变化带来的好处是可以清晰<br>地知道应用中到底发生了什么。如果一些东西改变了，就可以知道为什么变。action就像是描述发生了什么的指示器。最终，为了把action和state串起来，开发一些函数，这就是reducer。再次地，没有任何魔<br>法，reducer 只是一个接收 state 和 action，并返回新的 state 的函数。 对于大的应用来说，不大可能仅仅只写一个这样的函数，所以我们编写很多小函数来分别管理state的一部分,再开发一个reducer<br>调用这两个 reducer，进而来管理整个应用的 state,差不多就是 Redux 思想的全部。</p></blockquote><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><p>一张图了解redux工作<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/111.png" alt="redux" title="">                </div>                <div class="image-caption">redux</div>            </figure><br>例如初始一个状态管理，这是我建好的项目里面的三个js,index.js负责渲染，App.js是个组件，index.redux.js负责状态管理<br>index.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import React from <span class="string">'react'</span></div><div class="line">import ReactDom from <span class="string">'react-dom'</span></div><div class="line">import App from <span class="string">'./App'</span></div><div class="line">import &#123; createStore &#125; from <span class="string">'redux'</span></div><div class="line">import &#123; center &#125; from <span class="string">'./index.redux'</span></div><div class="line">const store=createStore(center)</div><div class="line"></div><div class="line">ReactDom.render(</div><div class="line">    &lt;App store=&#123;store&#125;/&gt;,</div><div class="line">    document.getElementById(<span class="string">'root'</span>)</div><div class="line">)</div></pre></td></tr></table></figure></p><p>App.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import React,&#123;Component&#125; from <span class="string">'react'</span></div><div class="line"></div><div class="line">class App extends Component&#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        const sTore=this.props.store;</div><div class="line">        const data=sTore.getState();</div><div class="line">        <span class="built_in">return</span> &lt;h1&gt;hellow app,现在有菜鸡<span class="variable">$&#123;data&#125;</span>只&lt;/h1&gt;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">export</span> default App</div></pre></td></tr></table></figure></p><p>index.redux.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">const ADD_CAI=<span class="string">'加菜鸡'</span>;</div><div class="line">const REMOVE_CAI=<span class="string">'减菜鸡'</span></div><div class="line"></div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> center(state=0,action)&#123;</div><div class="line">    switch(action.type)&#123;</div><div class="line">        <span class="keyword">case</span> ADD_CAI:</div><div class="line">            <span class="built_in">return</span> state+1;</div><div class="line">        <span class="keyword">case</span> REMOVE_CAI:</div><div class="line">            <span class="built_in">return</span> state-1;</div><div class="line">        default :</div><div class="line">            <span class="built_in">return</span> 10</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//action creator专门创建action</div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> <span class="function"><span class="title">addCai</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> &#123;<span class="built_in">type</span>:ADD_CAI&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> <span class="function"><span class="title">removeCai</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> &#123;<span class="built_in">type</span>:REMOVE_CAI&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/1.JPG" alt="这是初始的一个状态" title="">                </div>                <div class="image-caption">这是初始的一个状态</div>            </figure>  <p>改变状态的话，在App.js里面导入在index.redux.js里头定义的addCai，removeCai方法，然后添加两个按钮用来触发<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;hellow app,现在有菜鸡<span class="variable">$&#123;data&#125;</span>只&lt;/h1&gt;</div><div class="line">&lt;button onClick=&#123;()=&gt;store.dispatch(addCai())&#125;&gt;添加一只菜鸡&lt;/button&gt;</div><div class="line">&lt;button onClick=&#123;()=&gt;store.dispatch(removeCai())&#125;&gt;菜死一只菜鸡&lt;/button&gt;</div></pre></td></tr></table></figure></p><p>这时候执行的话，其实状态已经改变了但是h1里面的数值没有改变，原因是状态虽然改变了，但是没有刷新，所以页面显示还是年轻的模样，只需要在index.js里面执行一下，store.subs<br>cribe(render)，意思就是把render重新执行一下，这时候状态改变就可以了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">    ReactDom.render(</div><div class="line">        &lt;App store=&#123;store&#125;/&gt;,</div><div class="line">        document.getElementById(<span class="string">'root'</span>)</div><div class="line">    )</div><div class="line">&#125;</div><div class="line">render()</div><div class="line">//状态改变之后执行一下render</div><div class="line">store.subscribe(render)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/2.gif" alt="render" title="">                </div>                <div class="image-caption">render</div>            </figure>  <p>当然，也可以把App.js里头import的两个方法转移到index.js，然后通过给子组件传值的方式传给App.js，这样代码看起来可能更和谐。</p><h3 id="redux异步"><a href="#redux异步" class="headerlink" title="redux异步"></a>redux异步</h3><p>redux默认只处理同步，异步需要中间件redux-thunk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install redux-thunk --save</div></pre></td></tr></table></figure></p><p>异步中间件使用，在index.js里头<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore,applyMiddleware &#125; from <span class="string">'redux'</span></div><div class="line">import thunk from <span class="string">'redux-thunk'</span></div><div class="line"></div><div class="line">const store=createStore(</div><div class="line">center,</div><div class="line">applyMiddleware(thunk)</div><div class="line">)</div></pre></td></tr></table></figure></p><p>这时候就可以异步了，比如在index.redux.js里面模拟一个异步操作testAsync，然后在App.js里面添加一个button用来触发testAsync。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button onClick=&#123;()=&gt;store.dispatch(testAsync())&#125;&gt;凌迟处死一只菜鸡&lt;/button&gt;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/3.gif" alt="render" title="">                </div>                <div class="image-caption">render</div>            </figure>  <h3 id="react连接redux状态管理操作"><a href="#react连接redux状态管理操作" class="headerlink" title="react连接redux状态管理操作"></a>react连接redux状态管理操作</h3><p>将render函数改成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; Provider &#125; from <span class="string">'react-redux'</span></div><div class="line">ReactDom.render(</div><div class="line">     (</div><div class="line">        &lt;Provider store=&#123;store&#125; &gt;</div><div class="line">            &lt;App/&gt;</div><div class="line">        &lt;/Provider&gt;</div><div class="line">     ),</div><div class="line">    document.getElementById(<span class="string">'root'</span>),</div><div class="line">)</div></pre></td></tr></table></figure></p><p>App.js里面导入connect以及index.redux里头的方法，这时候button里面的onClick事件处理函数直接可以写成{函数名}的形式，因为它这时候所有的数据都是直接从外部传进来的，所有的数据都是由index.react.js控制<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import &#123; connect &#125; from <span class="string">'react-redux'</span></div><div class="line">import &#123;addCai,removeCai,testAsync&#125; from <span class="string">'./index.redux'</span></div><div class="line">class App extends Component&#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        const data=this.props.num;</div><div class="line">        const addCai=this.props.addCai;</div><div class="line">        const removeCai=this.props.removeCai;</div><div class="line">        const testAsync=this.props.testAsync;</div><div class="line">        <span class="built_in">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;h1&gt;hellow app,现在有菜鸡&#123;data&#125;只&lt;/h1&gt;</div><div class="line">                &lt;button onClick=&#123;addCai&#125;&gt;添加一只菜鸡&lt;/button&gt;</div><div class="line">                &lt;button onClick=&#123;removeCai&#125;&gt;菜死一只菜鸡&lt;/button&gt;</div><div class="line">                &lt;button onClick=&#123;testAsync&#125;&gt;凌迟处死一只菜鸡&lt;/button&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const mapStateToProps=(state)=&gt;&#123;</div><div class="line">    <span class="built_in">return</span> &#123; num: state&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const actionCreators= &#123;addCai,removeCai,testAsync&#125;</div><div class="line">  </div><div class="line">App=connect(mapStateToProps,actionCreators)(App)</div><div class="line"><span class="built_in">export</span> default App</div></pre></td></tr></table></figure></p><p>connect的第一个参数，把state给到props，第二个参数也给到props，也就是属性和方法<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/22.gif" alt="react-redux" title="">                </div>                <div class="image-caption">react-redux</div>            </figure>  </p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>用装饰器之前先装一下这个插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-plugin-transform-decorators-legacy --save</div></pre></td></tr></table></figure></p><p>然后在项目的package.json里面添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"plugins"</span>: [</div><div class="line">    [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;],</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后就可以做出这样的改变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const mapStateToProps=(state)=&gt;&#123;</div><div class="line">    <span class="built_in">return</span> &#123; num: state&#125;</div><div class="line">&#125;</div><div class="line">const actionCreators= &#123;addCai,removeCai,testAsync&#125;</div><div class="line">App=connect(mapStateToProps,actionCreators)(App)</div><div class="line">//==》</div><div class="line">@connect(</div><div class="line">    state=&gt;(&#123;num:state&#125;),//属性</div><div class="line">    &#123;addCai,removeCai,testAsync&#125; //方法</div><div class="line">)</div></pre></td></tr></table></figure></p><h3 id="合并所有reducer"><a href="#合并所有reducer" class="headerlink" title="合并所有reducer"></a>合并所有reducer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import combineReducers from <span class="string">'redux'</span></div><div class="line">import AA from aa.redux.js</div><div class="line">import BB from aa.redux.js</div><div class="line">combineReducers(&#123;AA,BB&#125;)</div></pre></td></tr></table></figure><h3 id="react-router4"><a href="#react-router4" class="headerlink" title="react-router4"></a>react-router4</h3><blockquote><p>react-router4是全新的版本，和之前的版本不兼容，浏览器和react-native均兼容和vue一样，React开发单页应用必备，践行路由即组件的概念比如：动态路由，Route，Link，Switch</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-router-dom --save</div></pre></td></tr></table></figure></blockquote><p>react-router-dom作为浏览器的路由<br>简单的路由例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">import React from <span class="string">'react'</span></div><div class="line">import ReactDom from <span class="string">'react-dom'</span></div><div class="line">import &#123; createStore,applyMiddleware,compose &#125; from <span class="string">'redux'</span></div><div class="line">import thunk from <span class="string">'redux-thunk'</span></div><div class="line">import &#123; Provider &#125; from <span class="string">'react-redux'</span></div><div class="line">import App from <span class="string">'./App'</span></div><div class="line">import &#123; center &#125; from <span class="string">'./index.redux'</span></div><div class="line"></div><div class="line">import &#123; BrowserRouter,Route,Link &#125; from <span class="string">'react-router-dom'</span></div><div class="line"></div><div class="line">const store=createStore(center,compose(</div><div class="line">    applyMiddleware(thunk),</div><div class="line">    window.devToolsExtension? window.devToolsExtension():()=&gt;&#123;&#125;</div><div class="line">))//异步中间件</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Cai2</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> &lt;h1&gt;hwllo this is Cai2&lt;/h1&gt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Cai3</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> &lt;h1&gt;hello this is Cai3&lt;/h1&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> ReactDom.render(</div><div class="line">     (</div><div class="line">        &lt;Provider store=&#123;store&#125; &gt;</div><div class="line">            &lt;BrowserRouter&gt;</div><div class="line">                &lt;div&gt;</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &lt;li&gt;</div><div class="line">                        &lt;Link to=<span class="string">"/"</span>&gt;第一只菜鸡&lt;/Link&gt;</div><div class="line">                    &lt;/li&gt;</div><div class="line">                    &lt;li&gt;</div><div class="line">                        &lt;Link to=<span class="string">"cai2"</span>&gt;第二只菜鸡&lt;/Link&gt;</div><div class="line">                    &lt;/li&gt;</div><div class="line">                    &lt;li&gt;</div><div class="line">                        &lt;Link to=<span class="string">"cai3"</span>&gt;第三只菜鸡&lt;/Link&gt;</div><div class="line">                    &lt;/li&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">                &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;&lt;/Route&gt;</div><div class="line">                &lt;Route path=<span class="string">"/cai2"</span> component=&#123;Cai2&#125;&gt;&lt;/Route&gt;</div><div class="line">                &lt;Route path=<span class="string">"/cai3"</span> component=&#123;Cai3&#125;&gt;&lt;/Route&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/BrowserRouter&gt;</div><div class="line">        &lt;/Provider&gt;</div><div class="line">     ),</div><div class="line">    document.getElementById(<span class="string">'root'</span>),</div><div class="line">)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/lu.gif" alt="run" title="">                </div>                <div class="image-caption">run</div>            </figure>  <p>但是有个问题，就是点Cai2的时候，组件App也渲染出来，是因为它path匹配的时候根目录是/，而/cai2，/cai3也是有/<br>，所以都会显示，它其实是个正则匹配，这时候可以选择加一个exact进行完全匹配，就可以了。</p><p><route path="/" exact="" component="{App}"></route><br>假如要添加一个地址跳转错误的友好404，就像这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"/:localtion"</span> component=&#123;Wrong&#125;&gt;&lt;/Route&gt;</div></pre></td></tr></table></figure></p><p>Redirect：默认页面打开加载某个组件或者强制加载某个组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Redirect to=<span class="string">"/"</span>&gt;&lt;/Redirect&gt;</div></pre></td></tr></table></figure></p><p>Switch：只渲染命中的第一个组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Switch&gt;</div><div class="line">&lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;Route path=<span class="string">"/:localtion"</span> component=&#123;Wrong&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;Route path=<span class="string">"/cai2"</span> component=&#123;Cai2&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;Route path=<span class="string">"/cai3"</span> component=&#123;Cai3&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/Switch&gt;</div></pre></td></tr></table></figure></p><h4 id="React-Router中的HashRouter与BrowserRouter"><a href="#React-Router中的HashRouter与BrowserRouter" class="headerlink" title="React-Router中的HashRouter与BrowserRouter"></a>React-Router中的HashRouter与BrowserRouter</h4><p>以下解释的前提是你要懂hash地址，假如有一个 Link 标签，跳转到 /hhardyy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BrowserRouter： http://localhost:8080/hhardyy</div><div class="line">HashRouter： http://localhost:8080/<span class="comment">#/hhardyy</span></div></pre></td></tr></table></figure></p><p>如果有服务器端的动态支持，建议使用 BrowserRouter，否则建议使用 HashRouter。原因在于，如果是单纯的静态文件，假如路径从 / 切换到 /hhardyy 后，此时刷新页面，页面将无法正常访问。<br>二者的替换方法很简单，在import的时候，将 BrowserRouter 修改为 HashRouter 就可以了，不需要修改其他东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redux状态管理，不光react可以用，vue，angular都可以用。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=460318201&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
      <category term="react-redux" scheme="http://yoursite.com/tags/react-redux/"/>
    
      <category term="装饰器" scheme="http://yoursite.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="中间件" scheme="http://yoursite.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>密码算法实验</title>
    <link href="http://yoursite.com/2018/09/17/%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/09/17/密码算法实验/</id>
    <published>2018-09-17T09:07:33.000Z</published>
    <updated>2018-09-17T10:57:04.897Z</updated>
    
    <content type="html"><![CDATA[<p>很久很久很久，简直久以前的密码算法实验。。。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1300819741&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="服务器启动，开启6666端口"><a href="#服务器启动，开启6666端口" class="headerlink" title="服务器启动，开启6666端口"></a>服务器启动，开启6666端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">ss = new ServerSocket(6666);</div><div class="line">started = <span class="literal">true</span>;</div><div class="line">&#125; catch (BindException e) &#123;</div><div class="line">        System.out.println(<span class="string">"Sorry,Port in use!"</span>);</div><div class="line">        System.out.println(<span class="string">"Please turn off the program to restart the server!"</span>);</div><div class="line">        System.exit(0);</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">try &#123;</div><div class="line"><span class="keyword">while</span> (started) &#123;</div><div class="line">    Socket s = ss.accept();</div><div class="line">    Client c = new Client(s);</div><div class="line">    System.out.println(<span class="string">"a client connected!"</span>);</div><div class="line">    new Thread(c).start();</div><div class="line">    clients.add(c);</div><div class="line">    &#125;</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">try &#123;</div><div class="line">ss.close();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="客户机接入"><a href="#客户机接入" class="headerlink" title="客户机接入"></a>客户机接入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">s = new Socket(<span class="string">"localhost"</span>, 6666);</div><div class="line">dos = new DataOutputStream(s.getOutputStream());</div><div class="line">dis = new DataInputStream(s.getInputStream());</div><div class="line">bConnected = <span class="literal">true</span>;</div><div class="line">&#125; catch (UnknownHostException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="客户机构建窗体"><a href="#客户机构建窗体" class="headerlink" title="客户机构建窗体"></a>客户机构建窗体</h3><p>（比较简陋的项目，只是eclipse里面做个窗体来假装客户机）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">setLocation(600, 300);</div><div class="line">add(tfTxt, BorderLayout.SOUTH);</div><div class="line">add(taContent, BorderLayout.NORTH);</div><div class="line">pack();</div><div class="line">this.addWindowListener(new <span class="function"><span class="title">WindowAdapter</span></span>() &#123;</div><div class="line">public void windowClosing(WindowEvent arg0) &#123;</div><div class="line">disconnect();</div><div class="line">System.exit(0);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">tfTxt.addActionListener(new TFListener());</div><div class="line">setVisible(<span class="literal">true</span>);</div><div class="line">connect();</div><div class="line">tRecv.start();</div></pre></td></tr></table></figure></p><h3 id="服务器监听端口"><a href="#服务器监听端口" class="headerlink" title="服务器监听端口"></a>服务器监听端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line"><span class="keyword">while</span> (started) &#123;</div><div class="line">Socket s = ss.accept();</div><div class="line">Client c = new Client(s);</div><div class="line">System.out.println(<span class="string">"a client connected!"</span>);</div><div class="line">new Thread(c).start();</div><div class="line">clients.add(c);</div><div class="line">&#125;</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">try &#123;</div><div class="line">ss.close();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="加密身份认证"><a href="#加密身份认证" class="headerlink" title="加密身份认证"></a>加密身份认证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">String str1 = null;</div><div class="line">Random random = new Random();</div><div class="line">int r = random.nextInt();</div><div class="line">String u = <span class="string">"hhardyy"</span>;</div><div class="line">String Verification_code = u + r;</div><div class="line">String Decryption_certification = null;</div><div class="line">System.out.println(<span class="string">"发送的认证消息"</span> + u + r);</div><div class="line">// 生成一对公钥</div><div class="line">try &#123;</div><div class="line">Rsa rsa = new Rsa();</div><div class="line">KeyPair rsak = rsa.genKeyPair();</div><div class="line">PrivateKey ks = rsak.getPrivate();// 私钥</div><div class="line">PublicKey kp = rsak.getPublic();// 公钥</div><div class="line"></div><div class="line">// 用公钥把发送的时候生成的随机数进行加密发送</div><div class="line">byte[] byte_Verification_code = Verification_code.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">byte[] er = rsa.encrypt(byte_Verification_code, kp);</div><div class="line">// 保存密钥</div><div class="line">saveKey(ks, <span class="string">"key_Private.key"</span>);</div><div class="line">saveData(er, <span class="string">"key_pubData.data"</span>);</div><div class="line"></div><div class="line">str1 = new String(er);</div><div class="line">System.out.println(<span class="string">"服务器收到的客户机加密用户认证："</span> + str1);</div><div class="line">&#125; catch (Exception e1) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e1.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="解密认证"><a href="#解密认证" class="headerlink" title="解密认证"></a>解密认证</h3><p>注意：这里判断两个值是否相等不能用==或者===，=更不行，因为==或者===对比的是值得路径等等，所以要用str1.equals(str2)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">String DemsgString=null;//定义一个变量存储通信数据</div><div class="line">try &#123;</div><div class="line">// 解密start</div><div class="line">Rsa rsa = new Rsa();</div><div class="line">PrivateKey privatekey = readKey(<span class="string">"key_Private.key"</span>); </div><div class="line">byte[] er = readData(<span class="string">"key_pubData.data"</span>); </div><div class="line">byte[] k = rsa.decrypt(er, privatekey); //k = RSAdec(ek, ks)</div><div class="line">    <span class="keyword">if</span> (Verification_code.equals(Decryption_certification)) &#123;</div><div class="line">        str2 = <span class="string">"认证成功，允许通信"</span>;//测试成功</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">        str2 = <span class="string">"认证失败"</span>; //测试失败</div><div class="line">DemsgString=<span class="string">"身份认证失败"</span>;</div><div class="line">&#125;</div><div class="line">&#125; catch (Exception e2) &#123;</div><div class="line">e2.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="通信数据加密"><a href="#通信数据加密" class="headerlink" title="通信数据加密"></a>通信数据加密</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">Aes aes = new Aes();</div><div class="line">//生成密钥，用口令来生成密钥</div><div class="line">String <span class="built_in">pwd</span> = <span class="string">"xiaofangkuai"</span>;</div><div class="line">byte[] aesKs = aes.genKey(<span class="built_in">pwd</span>);</div><div class="line">System.out.println(<span class="string">"通信内容："</span>+str);</div><div class="line">byte[] msgb=str.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">byte[] em = aes.encrypt(msgb, aesKs);//通信内容加密</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"AES口令生成秘钥Key:"</span>,aesKs);</div><div class="line">System.out.println(<span class="string">""</span>);</div><div class="line">String EemsgString = new String(em, <span class="string">"UTF-8"</span>);</div><div class="line">System.out.println(<span class="string">"加密之后："</span>+EemsgString);</div><div class="line"></div><div class="line">byte[] m = aes.decrypt(em, aesKs);</div><div class="line">DemsgString = new String(m, <span class="string">"UTF-8"</span>);</div><div class="line">System.out.println(<span class="string">"解密之后："</span>+m);</div><div class="line">System.out.println(<span class="string">"转码："</span>+DemsgString);</div><div class="line">&#125; catch (Exception ec) &#123;</div><div class="line">ec.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="客户机关闭连接"><a href="#客户机关闭连接" class="headerlink" title="客户机关闭连接"></a>客户机关闭连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">dos.close();</div><div class="line">dis.close();</div><div class="line">s.close();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">try &#123;</div><div class="line">bConnected = <span class="literal">false</span>;</div><div class="line">tRecv.join();</div><div class="line">&#125; catch (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">try &#123;</div><div class="line">dos.close();</div><div class="line">dis.close();</div><div class="line">s.close();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>例子比较简陋，看懂不懂没关系，主要看配图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/javaSav/run.JPG" alt="。。。" title="">                </div>                <div class="image-caption">。。。</div>            </figure></p><h3 id="剑谱"><a href="#剑谱" class="headerlink" title="剑谱"></a>剑谱</h3><h4 id="保存秘钥的方法"><a href="#保存秘钥的方法" class="headerlink" title="保存秘钥的方法"></a>保存秘钥的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static void saveKey(Key key, String keyName) throws Exception &#123;</div><div class="line">FileOutputStream foskey = new FileOutputStream(keyName);</div><div class="line">ObjectOutputStream oos = new ObjectOutputStream(foskey);</div><div class="line">oos.writeObject(key);</div><div class="line">oos.close();</div><div class="line">foskey.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="保存数据的方法"><a href="#保存数据的方法" class="headerlink" title="保存数据的方法"></a>保存数据的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static void saveData(byte[] results, String dataName) throws Exception &#123;</div><div class="line">FileOutputStream fosData = new FileOutputStream(dataName);</div><div class="line">fosData.write(results);</div><div class="line">fosData.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="读取数据的方法"><a href="#读取数据的方法" class="headerlink" title="读取数据的方法"></a>读取数据的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public static byte[] readData(String dataName) throws Exception &#123;</div><div class="line">FileInputStream fisDat = new FileInputStream(dataName);</div><div class="line"></div><div class="line">// 读二进制数据</div><div class="line">ByteArrayOutputStream arrayOutputStream = new ByteArrayOutputStream();</div><div class="line">int len = 0;</div><div class="line">byte[] data = new byte[1024];</div><div class="line"><span class="keyword">while</span> ((len = fisDat.read(data)) != -1) &#123;</div><div class="line">arrayOutputStream.write(data, 0, len);</div><div class="line">&#125;</div><div class="line">byte[] result = arrayOutputStream.toByteArray();</div><div class="line">arrayOutputStream.close();</div><div class="line"></div><div class="line">fisDat.close();</div><div class="line"><span class="built_in">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="读取秘钥的方法"><a href="#读取秘钥的方法" class="headerlink" title="读取秘钥的方法"></a>读取秘钥的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static PrivateKey readKey(String keyName) throws Exception &#123;</div><div class="line">FileInputStream fiskey = new FileInputStream(keyName);</div><div class="line">ObjectInputStream oiskey = new ObjectInputStream(fiskey);</div><div class="line">PrivateKey key = (PrivateKey) oiskey.readObject();</div><div class="line">oiskey.close();</div><div class="line">fiskey.close();</div><div class="line"><span class="built_in">return</span> key;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Coder-java"><a href="#Coder-java" class="headerlink" title="Coder.java"></a>Coder.java</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import java.util.Base64;</div><div class="line">public class Coder &#123;</div><div class="line">public static String encode(byte[] data) &#123;</div><div class="line">Base64.Encoder ecd = Base64.getEncoder();</div><div class="line"><span class="built_in">return</span> ecd.encodeToString(data);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static byte[] decode(String str) &#123;</div><div class="line">Base64.Decoder dcd = Base64.getDecoder();</div><div class="line"><span class="built_in">return</span> dcd.decode(str);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="AES-java"><a href="#AES-java" class="headerlink" title="AES.java"></a>AES.java</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">import java.security.SecureRandom;</div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.KeyGenerator;</div><div class="line">import javax.crypto.SecretKey;</div><div class="line">import javax.crypto.spec.SecretKeySpec;</div><div class="line"></div><div class="line">public class TestAES &#123;</div><div class="line">private Cipher cipher;</div><div class="line"></div><div class="line">public TestAES() throws Exception &#123;</div><div class="line">cipher=Cipher.getInstance(<span class="string">"AES"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private SecretKey getKey(byte[] key) throws Exception&#123;</div><div class="line"><span class="built_in">return</span> new SecretKeySpec(key, <span class="string">"AES"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public byte[] encrypt(byte[] data, byte[] key) throws Exception&#123;</div><div class="line">cipher.init(Cipher.ENCRYPT_MODE, getKey(key));</div><div class="line">byte [] encData=cipher.doFinal(data);</div><div class="line"><span class="built_in">return</span> encData;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public byte[] decrypt(byte[] encData, byte[] key) throws Exception &#123;</div><div class="line">cipher.init(Cipher.DECRYPT_MODE, getKey(key));</div><div class="line">byte [] data=cipher.doFinal(encData);</div><div class="line"><span class="built_in">return</span> data;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public byte[] genKey(String fact) throws Exception&#123;</div><div class="line">KeyGenerator keygen=KeyGenerator.getInstance(<span class="string">"AES"</span>);</div><div class="line">        keygen.init(128, new SecureRandom(fact.getBytes()));</div><div class="line">        SecretKey original_key=keygen.generateKey();</div><div class="line">        byte [] key=original_key.getEncoded();</div><div class="line">        <span class="built_in">return</span> key;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public String genKeyStr(String fact) throws Exception&#123;</div><div class="line">        byte [] key=genKey(fact);</div><div class="line">        String keyStr = Coder.encode(key);</div><div class="line">        <span class="built_in">return</span> keyStr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public String encrypt(String dataStr, String keyStr) throws Exception&#123;</div><div class="line">byte[] data = dataStr.getBytes();</div><div class="line">byte[] key = Coder.decode(keyStr);</div><div class="line">byte[] edata = encrypt(data,key);</div><div class="line"><span class="built_in">return</span> Coder.encode(edata);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public String decrypt(String encDataStr, String keyStr) throws Exception &#123;</div><div class="line">byte[] edata = Coder.decode(encDataStr);</div><div class="line">byte[] key = Coder.decode(keyStr);</div><div class="line">byte [] data = decrypt(edata,key);</div><div class="line"><span class="built_in">return</span> new String(data);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">try &#123;</div><div class="line">TestAES t = new TestAES();</div><div class="line"></div><div class="line">//生成密钥，用口令来生成密钥</div><div class="line">String <span class="built_in">pwd</span> = <span class="string">"123456"</span>;</div><div class="line">byte[] k = t.genKey(<span class="built_in">pwd</span>);</div><div class="line"></div><div class="line">String msg = <span class="string">"Plain text 1"</span>;</div><div class="line">byte[] msgb=msg.getBytes();</div><div class="line"></div><div class="line">byte[] emsgb = t.encrypt(msgb, k);</div><div class="line">byte[] dmsgb = t.decrypt(emsgb, k);</div><div class="line"></div><div class="line">t.print(<span class="string">"Key"</span>,k);</div><div class="line">t.print(<span class="string">"msgb"</span>, msgb);</div><div class="line">t.print(<span class="string">"emsgb"</span>, emsgb);</div><div class="line">t.print(<span class="string">"dmsgb"</span>, dmsgb);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"End"</span>);</div><div class="line">&#125;</div><div class="line">catch(Exception ec) &#123;</div><div class="line">ec.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">private void <span class="built_in">print</span>(String note, byte[] bs)&#123;</div><div class="line">System.out.println(note+<span class="string">": "</span>+Coder.encode(bs));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Hash-java"><a href="#Hash-java" class="headerlink" title="Hash.java"></a>Hash.java</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">import java.security.MessageDigest;</div><div class="line"></div><div class="line">public class TestHash &#123;</div><div class="line">public byte[] getSha256(byte[] data) throws Exception&#123;</div><div class="line">MessageDigest  md = MessageDigest.getInstance(<span class="string">"SHA-256"</span>);</div><div class="line">    md.update(data);</div><div class="line">    <span class="built_in">return</span> md.digest();</div><div class="line">&#125;</div><div class="line">public byte[] getSha1(byte[] data) throws Exception</div><div class="line">&#123;</div><div class="line">MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);    </div><div class="line">messageDigest.update(data);</div><div class="line"><span class="built_in">return</span> messageDigest.digest();    </div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">try &#123;</div><div class="line">TestHash t = new TestHash();</div><div class="line"></div><div class="line">String msg = <span class="string">"a"</span>;</div><div class="line">byte[] msgb=msg.getBytes();</div><div class="line">byte[] d = t.getSha256(msgb);</div><div class="line"></div><div class="line">t.print(<span class="string">"msgb"</span>, msgb);</div><div class="line">t.print(<span class="string">"Dig"</span>, d);</div><div class="line">&#125;</div><div class="line">catch(Exception ec) &#123;</div><div class="line">ec.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">private void <span class="built_in">print</span>(String note, byte[] bs)&#123;</div><div class="line">System.out.println(note+<span class="string">"["</span>+bs.length+<span class="string">"]: "</span>+Coder.encode(bs));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="RSA-java"><a href="#RSA-java" class="headerlink" title="RSA.java"></a>RSA.java</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">import java.security.KeyPair;</div><div class="line">import java.security.KeyPairGenerator;</div><div class="line">import java.security.PrivateKey;</div><div class="line">import java.security.PublicKey;</div><div class="line">import javax.crypto.Cipher;</div><div class="line"></div><div class="line">public class TestRSA &#123;</div><div class="line">Cipher cipher;</div><div class="line"></div><div class="line">public TestRSA() throws Exception&#123;</div><div class="line">cipher=Cipher.getInstance(<span class="string">"RSA"</span>);//java默认<span class="string">"RSA"</span>=<span class="string">"RSA/ECB/PKCS1Padding"</span>  </div><div class="line">&#125;</div><div class="line"></div><div class="line">//生成密钥对  </div><div class="line">    public  KeyPair genKeyPair() throws Exception&#123;  </div><div class="line">        KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);  </div><div class="line">        keyPairGenerator.initialize(1024);        </div><div class="line">        <span class="built_in">return</span> keyPairGenerator.generateKeyPair();  </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    public String getKeyString() throws Exception &#123;</div><div class="line">    KeyPair k = genKeyPair();</div><div class="line">    </div><div class="line">    String kstr = <span class="string">""</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> kstr;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //公钥加密  </div><div class="line">    public  byte[] encrypt(byte[] content, PublicKey pKey) throws Exception&#123;  </div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, pKey);  </div><div class="line">        <span class="built_in">return</span> cipher.doFinal(content);  </div><div class="line">    &#125;  </div><div class="line">    //私钥解密  </div><div class="line">    public  byte[] decrypt(byte[] content, PrivateKey sKey) throws Exception&#123;  </div><div class="line">        cipher.init(Cipher.DECRYPT_MODE, sKey);  </div><div class="line">        <span class="built_in">return</span> cipher.doFinal(content);  </div><div class="line">    &#125;  </div><div class="line"> </div><div class="line">    //私钥加密  </div><div class="line">    public  byte[] encrypt(byte[] content, PrivateKey sKey) throws Exception&#123;  </div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, sKey);  </div><div class="line">        <span class="built_in">return</span> cipher.doFinal(content);  </div><div class="line">    &#125;  </div><div class="line">    //公钥解密  </div><div class="line">    public  byte[] decrypt(byte[] content, PublicKey pKey) throws Exception&#123;  </div><div class="line">        cipher.init(Cipher.DECRYPT_MODE, pKey);  </div><div class="line">        <span class="built_in">return</span> cipher.doFinal(content);  </div><div class="line">    &#125;  </div><div class="line"> </div><div class="line">    </div><div class="line">public static void main(String[] args) &#123;</div><div class="line">try &#123;</div><div class="line">TestRSA t = new TestRSA();</div><div class="line"></div><div class="line">//密钥对</div><div class="line">KeyPair k = t.genKeyPair();</div><div class="line">PrivateKey ks = k.getPrivate();</div><div class="line">PublicKey kp = k.getPublic();</div><div class="line"></div><div class="line">t.print(<span class="string">"Private Key"</span>,ks.getEncoded());</div><div class="line">t.print(<span class="string">"Public Key"</span>,kp.getEncoded());</div><div class="line"></div><div class="line">String msg=<span class="string">"abcd"</span>;</div><div class="line">byte[] msgb = msg.getBytes();</div><div class="line"></div><div class="line">byte[] emsgb = t.encrypt(msgb,ks);</div><div class="line">byte[] dmsgb = t.decrypt(emsgb, kp);</div><div class="line"></div><div class="line">t.print(<span class="string">"msgb"</span>, msgb);</div><div class="line">t.print(<span class="string">"emsgb"</span>, emsgb);</div><div class="line">t.print(<span class="string">"dmsgb"</span>, dmsgb);</div><div class="line"></div><div class="line">emsgb = t.encrypt(msgb,kp);</div><div class="line">dmsgb = t.decrypt(emsgb, ks);</div><div class="line"></div><div class="line">t.print(<span class="string">"msgb"</span>, msgb);</div><div class="line">t.print(<span class="string">"emsgb"</span>, emsgb);</div><div class="line">t.print(<span class="string">"dmsgb"</span>, dmsgb);</div><div class="line">&#125;</div><div class="line">catch(Exception ec) &#123;</div><div class="line">ec.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">private void <span class="built_in">print</span>(String note, byte[] bs)&#123;</div><div class="line">System.out.println(note+<span class="string">"["</span>+bs.length+<span class="string">"]: "</span>+Coder.encode(bs));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久很久很久，简直久以前的密码算法实验。。。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1300819741&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="RSA" scheme="http://yoursite.com/tags/RSA/"/>
    
      <category term="AES" scheme="http://yoursite.com/tags/AES/"/>
    
      <category term="HASH" scheme="http://yoursite.com/tags/HASH/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器</title>
    <link href="http://yoursite.com/2018/09/17/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>http://yoursite.com/2018/09/17/Vue音乐播放器/</id>
    <published>2018-09-17T04:27:06.000Z</published>
    <updated>2018-09-17T11:09:07.935Z</updated>
    
    <content type="html"><![CDATA[<p>vue全家桶做的音乐播放器</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=480579211&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h3><p>“babel-runtime”: “^6.26.0”,对ES语法进行转义<br>“fastclick”: “^1.0.6”,解决移动端300毫秒延迟<br>“babel-polyfill”: “^6.26.0”,(polyfill补丁的意思)，就是对一些ES6 的api比如promise这种做一个转义<br>jsonp解决跨域问题（<a href="https://github.com/webmodules/jsonp）" target="_blank" rel="external">https://github.com/webmodules/jsonp）</a></p><h3 id="组件轮播"><a href="#组件轮播" class="headerlink" title="组件轮播"></a>组件轮播</h3><p>better-scroll<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install better-scroll --save</div></pre></td></tr></table></figure></p><h3 id="代码转化babel-loader"><a href="#代码转化babel-loader" class="headerlink" title="代码转化babel-loader"></a>代码转化babel-loader</h3><p><a href="https://www.npmjs.com/package/babel-loader" target="_blank" rel="external">文档地址</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-loader babel-core babel-preset-env webpack</div></pre></td></tr></table></figure></p><h3 id="vue-lazyload插件-用于图片懒加载"><a href="#vue-lazyload插件-用于图片懒加载" class="headerlink" title="vue-lazyload插件:用于图片懒加载"></a>vue-lazyload插件:用于图片懒加载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-lazyload --save</div></pre></td></tr></table></figure><h3 id="v-for爆红，"><a href="#v-for爆红，" class="headerlink" title="v-for爆红，"></a>v-for爆红，</h3><p>Vue 2.2 之后，要求 component 进行列表渲染时，必须指定 key，因此这里可能是 vscode 的一个误报（tr 不是 component），如果不想看到这样的提示，你可以绑定一个 key，或者先检查一下自己有没有做过升级，然后再去看看相关内容升级之后有些什么变化。也可以设置里面添加：”vetur.validation.template”: false<br>也可以： <li class="item" v-for="(item,index) in discList" :key="index"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">|0(或0)：表示向下取整相当于math.floor</div></pre></td></tr></table></figure></li></p><h3 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$refs</span>.filter.style[<span class="string">'backgdrop-filter'</span>]=`blur(<span class="variable">$&#123;blur&#125;</span>px)`</div></pre></td></tr></table></figure><p>普通安卓手机无法体验的高斯模糊</p><h3 id="vue动画钩子，css3的animation动画"><a href="#vue动画钩子，css3的animation动画" class="headerlink" title="vue动画钩子，css3的animation动画"></a>vue动画钩子，css3的animation动画</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;transition </div><div class="line">    name=<span class="string">"normal"</span></div><div class="line">    @enter=<span class="string">"enter"</span></div><div class="line">    @after-enter=<span class="string">"afterenter"</span></div><div class="line">    @leave=<span class="string">"leave"</span></div><div class="line">    @after-leave=<span class="string">"leaveEnter"</span></div><div class="line">    &gt;</div></pre></td></tr></table></figure><p>这里用第三方开源的动画库</p><h3 id="create-keyframe-animation"><a href="#create-keyframe-animation" class="headerlink" title="create-keyframe-animation"></a>create-keyframe-animation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install create-keyframe-animation --save</div></pre></td></tr></table></figure><p>用法移步api反正就是import之后一顿嗨</p><h3 id="svg用于底部迷你播放器歌曲播放进度的圆环"><a href="#svg用于底部迷你播放器歌曲播放进度的圆环" class="headerlink" title="svg用于底部迷你播放器歌曲播放进度的圆环"></a>svg用于底部迷你播放器歌曲播放进度的圆环</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"progress-circle"</span>&gt;</div><div class="line">        &lt;svg :width=<span class="string">"32"</span> :height=<span class="string">"32"</span> viewBox=<span class="string">"0 0 100 100"</span> version=<span class="string">"1.1"</span> xmlns=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</div><div class="line">            &lt;circle class=<span class="string">"progress-background"</span> r=<span class="string">"50"</span> cx=<span class="string">"50"</span> cy=<span class="string">"50"</span> fill=<span class="string">"transparent"</span>/&gt;</div><div class="line">            &lt;circle class=<span class="string">"progress-bar"</span> r=<span class="string">"50"</span> cx=<span class="string">"50"</span> cy=<span class="string">"50"</span> fill=<span class="string">"transparent"</span> stroke-dasharray=<span class="string">"314"</span> stroke-dashoffset=<span class="string">"157"</span>/&gt;</div><div class="line">        &lt;/svg&gt;</div><div class="line">        &lt;slot&gt;&lt;/slot&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>用数据配合stroke-dasharray=”314” stroke-dashoffset=”157”实现圆圈歌曲进度</p><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><p>接收一个函数，函数可以拿到每个元素<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">findIndex(()=&gt;&#123;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">let</span> index=list.findIndex((item)=&gt;&#123;</div><div class="line">    <span class="built_in">return</span> item.id===this.currentSong.id</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="歌单页面数据"><a href="#歌单页面数据" class="headerlink" title="歌单页面数据"></a>歌单页面数据</h3><p>qq音乐的接口referer:<a href="https://y.qq.com，不能通过jsonp的方式了，这里用node做转发，在请求接口的地方用axios请求，然后直接请求本地地址" target="_blank" rel="external">https://y.qq.com，不能通过jsonp的方式了，这里用node做转发，在请求接口的地方用axios请求，然后直接请求本地地址</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">//api/recommend.js</div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> getSongList (disstid) &#123;</div><div class="line">    const url = <span class="string">'/getSongList'</span></div><div class="line">    const data = Object.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">        format: <span class="string">'json'</span>,</div><div class="line">        needNewCode: 1,</div><div class="line">        disstid: disstid,</div><div class="line">        <span class="built_in">type</span>: 1,</div><div class="line">        json: 1,</div><div class="line">        utf8: 1,</div><div class="line">        onlysong: 0,</div><div class="line">        g_tk: 1800233000,</div><div class="line">        platform: <span class="string">'yqq'</span>,</div><div class="line">        needNewCode: 0,</div><div class="line">        onlysong: 0,</div><div class="line">        notice: 0</div><div class="line">    &#125;)</div><div class="line">    <span class="built_in">return</span> axios.get(url, &#123;</div><div class="line">        params: data</div><div class="line">    &#125;).<span class="keyword">then</span>((res) =&gt; &#123;</div><div class="line">        <span class="built_in">return</span> Promise.resolve(res.data)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//devserver里头写这样的转发</div><div class="line">    app.get(<span class="string">'/getSongList'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">      var url = <span class="string">'https://c.y.qq.com/qzone/fcg-bin/fcg_ucc_getcdinfo_byids_cp.fcg'</span></div><div class="line">      axios.get(url, &#123;</div><div class="line">        headers: &#123;</div><div class="line">          referer: <span class="string">'https://y.qq.com/'</span>,</div><div class="line">          host: <span class="string">'c.y.qq.com'</span></div><div class="line">        &#125;,</div><div class="line">        params: req.query</div><div class="line">      &#125;).<span class="keyword">then</span>((response) =&gt; &#123;</div><div class="line">        res.json(response.data)</div><div class="line">      &#125;).catch((e) =&gt; &#123;</div><div class="line">        console.log(e)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vueMusic/getdata.JPG" alt="succ" title="">                </div>                <div class="image-caption">succ</div>            </figure><h3 id="后端接口代理"><a href="#后端接口代理" class="headerlink" title="后端接口代理"></a>后端接口代理</h3><p>在build下面的webpack.dev.conf.js里面配置后端代理，写成自定义接口，然后前端请求自定义的接口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">const axios = require(<span class="string">'axios'</span>) </div><div class="line">devServer 里添加</div><div class="line">  before(app) &#123;</div><div class="line">      app.get(<span class="string">'/getDiscList'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">        var url = <span class="string">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span></div><div class="line">        axios.get(url, &#123;</div><div class="line">          headers: &#123;</div><div class="line">            referer: <span class="string">'https://y.qq.com/'</span></div><div class="line">          &#125;,</div><div class="line">          params: req.query</div><div class="line">        &#125;).<span class="keyword">then</span>((response) =&gt; &#123;</div><div class="line">          res.json(response.data)</div><div class="line">        &#125;).catch((e) =&gt; &#123;</div><div class="line">          console.log(e)</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//api/recommend(推荐歌单的api)</div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> <span class="function"><span class="title">getDiscList</span></span>() &#123;</div><div class="line">  const url = <span class="string">'/getDiscList'</span></div><div class="line">  const data = Object.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    platform: <span class="string">'yqq'</span>,</div><div class="line">    picmid: 1,</div><div class="line">    hostUin: 0,</div><div class="line">    sin: 0,</div><div class="line">    ein: 29,</div><div class="line">    sortId: 5,</div><div class="line">    needNewCode: 0,</div><div class="line">    categoryId: 10000000,</div><div class="line">    rnd: Math.random(),</div><div class="line">    format: <span class="string">'json'</span></div><div class="line">  &#125;)</div><div class="line">  <span class="built_in">return</span> axios.get(url, &#123;</div><div class="line">    params: data</div><div class="line">  &#125;).<span class="keyword">then</span>((res) =&gt; &#123;</div><div class="line">    <span class="built_in">return</span> Promise.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//组件中</div><div class="line">import &#123;getDiscList&#125; from <span class="string">'api/recommend'</span></div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">    <span class="function"><span class="title">_getDiscList</span></span>() &#123;</div><div class="line">        getDiscList().<span class="keyword">then</span>((res) =&gt; &#123;</div><div class="line">          <span class="keyword">if</span> (res.code === ERR_OK) &#123;</div><div class="line">            this.discList = res.data.list</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;      </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><a href="https://github.com/HHardyy/vue-music" target="_blank" rel="external">项目地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue全家桶做的音乐播放器&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=480579211&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue2.x" scheme="http://yoursite.com/tags/Vue2-x/"/>
    
      <category term="Vuex" scheme="http://yoursite.com/tags/Vuex/"/>
    
      <category term="Vue Router" scheme="http://yoursite.com/tags/Vue-Router/"/>
    
      <category term="axios jsonp" scheme="http://yoursite.com/tags/axios-jsonp/"/>
    
      <category term="better-scroll" scheme="http://yoursite.com/tags/better-scroll/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>React探路合集</title>
    <link href="http://yoursite.com/2018/07/27/React%E6%8E%A2%E8%B7%AF%E5%90%88%E9%9B%86/"/>
    <id>http://yoursite.com/2018/07/27/React探路合集/</id>
    <published>2018-07-27T00:52:54.000Z</published>
    <updated>2018-12-24T10:49:12.948Z</updated>
    
    <content type="html"><![CDATA[<p>react脚手架建项目的时候突然太卡，改一下npm的registry或许有帮助。。。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26209792&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="React巨卡"><a href="#React巨卡" class="headerlink" title="React巨卡"></a>React巨卡</h3><p>建react项目的时候，突然的巨卡，create-react-app之后吃个苹果回来还在卡着不动，就像这样。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/11.gif" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure><br>换源：create-react-app指令默认npm，永久设置registry就ok了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/22.JPG" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure><br>图中的命令从上往下依次是清理npm缓存，设置registry成<a href="https://registry.npm.taobao.org，" target="_blank" rel="external">https://registry.npm.taobao.org，</a><br>查看registry设置是否成功（也可以npm info express）</p><h3 id="npm源切换淘宝镜像和原来的方法："><a href="#npm源切换淘宝镜像和原来的方法：" class="headerlink" title="npm源切换淘宝镜像和原来的方法："></a>npm源切换淘宝镜像和原来的方法：</h3><p>查看现在的镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm get registry</div></pre></td></tr></table></figure></p><p>1、设置淘宝镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config set registry http://registry.npm.taobao.org/</div></pre></td></tr></table></figure></p><p>2、切换回原镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config set registry https://registry.npmjs.org/</div></pre></td></tr></table></figure></p><h3 id="npm-run-eject"><a href="#npm-run-eject" class="headerlink" title="npm run eject"></a>npm run eject</h3><p>npm run eject不弹出个性化配置，并提示This git repository has untracked files or uncommitted changes:<br>意思是这个git仓库有未跟踪的文件或未提交的更改：</p><p>很简单，这时候git status查看一下状态，看看有没有未提交的修改，修改一下再提交仓库。<br>这时候npm run eject出现下面这些东西的时候就是成功了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/33.JPG" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure></p><h3 id="connect装饰器爆红"><a href="#connect装饰器爆红" class="headerlink" title="@connect装饰器爆红"></a>@connect装饰器爆红</h3><p>写react联合redux的时候可能会用到装饰器babel-plugin-transform-decorators-legacy，顺带提一下用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-plugin-transform-decorators-legacy</div></pre></td></tr></table></figure></p><p>package.json的babel里头添加这个<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"plugins"</span>: [</div><div class="line">      <span class="string">"transform-decorators-legacy"</span></div><div class="line">]</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/111.JPG" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure><p>注意：插件顺序很重要，如果要手动包括您的插件和使用transform-class-properties，确保transform-decorators-legacy来之前 transform-class-properties。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"plugins"</span>: [</div><div class="line">      <span class="string">"transform-decorators-legacy"</span>,</div><div class="line">      <span class="string">"transform-class-properties"</span></div><div class="line">]</div></pre></td></tr></table></figure></p><p>写完重新start就生效了，这里说的是在组件中@connect之后，下面有红线，一个原因是你没在package.json里面用上免得插件,也有可能是已经添加了上面那个插件，但是没用，这时候可以选择修改一下setting.json，添加下面这个代码，覆盖掉原本它默认的false<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"javascript.implicitProjectConfig.experimentalDecorators"</span>: <span class="literal">true</span></div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/222.JPG" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure><h3 id="onClick失效"><a href="#onClick失效" class="headerlink" title="onClick失效"></a>onClick失效</h3><p>刚在写退出登录功能的时候，方法不执行，即使bind了this，代码也完全没问题，排除了默认以及冒泡等，可能是被遮住了，点不到那个元素，这时候设置一下z-index就可以了，不行就设置z-index: xxx !important; 提升它的优先级，然后就可以了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react脚手架建项目的时候突然太卡，改一下npm的registry或许有帮助。。。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=26209792&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="npm run eject" scheme="http://yoursite.com/tags/npm-run-eject/"/>
    
      <category term="connect装饰器" scheme="http://yoursite.com/tags/connect%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="onClick" scheme="http://yoursite.com/tags/onClick/"/>
    
      <category term="镜像" scheme="http://yoursite.com/tags/%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>&#39;BMap&#39; is not defined？BMap初始化爆红</title>
    <link href="http://yoursite.com/2018/07/22/BMap-is-not-defined%EF%BC%9FBMap%E5%88%9D%E5%A7%8B%E5%8C%96%E6%8A%A5%E9%94%99%E7%88%86%E7%BA%A2/"/>
    <id>http://yoursite.com/2018/07/22/BMap-is-not-defined？BMap初始化报错爆红/</id>
    <published>2018-07-22T08:00:12.000Z</published>
    <updated>2018-07-22T08:23:48.117Z</updated>
    
    <content type="html"><![CDATA[<p>用vue全家桶撸一个项目的时候，eslint给我找了一个麻烦。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=498549913&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>BMap是什么东西：省略的字=它的解释.length</p><h3 id="说说爆红"><a href="#说说爆红" class="headerlink" title="说说爆红"></a>说说爆红</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vueMap/juli.png" alt="undefind" title="">                </div>                <div class="image-caption">undefind</div>            </figure><p>根据api，在vue页面中初始化百度地图，假如在初始化项目的时候不安装eslint规则的话，它是不会有事的，但是安装了之后，就给爆红线了，说BMap undefind,但是是可以正常跑的，如果代码中存在较多BMap，满频幕红线，我不信你不会闹心，简单来两个<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vueMap/1.JPG" alt="红线" title="">                </div>                <div class="image-caption">红线</div>            </figure></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在BMap.Map前面加window，就是new window.BMap.Map。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vueMap/2.JPG" alt="eg" title="">                </div>                <div class="image-caption">eg</div>            </figure><br>粗略的搞个demo，methods里头定义一个这样的方法,mounted里头：this.creatMap();<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">creatMap</span></span> () &#123;</div><div class="line">    navigator.geolocation.getCurrentPosition(</div><div class="line">        <span class="keyword">function</span> (position) &#123;</div><div class="line">          var x = position.coords.longitude</div><div class="line">          var y = position.coords.latitude</div><div class="line">          var map = new window.BMap.Map(<span class="string">'myMap'</span>)</div><div class="line">          var point = new window.BMap.Point(y, x)</div><div class="line">          map.centerAndZoom(point, 14)</div><div class="line">          map.enableScrollWheelZoom()</div><div class="line">          var myIcon = new window.BMap.Icon(<span class="string">'HHardyy.png'</span>, new BMap.Size(30, 30))</div><div class="line">          var marker2 = new window.BMap.Marker(point, &#123; icon: myIcon &#125;)    // 创建标注</div><div class="line">          map.addOverlay(marker2)</div><div class="line">          var opts = &#123;</div><div class="line">            width: 200, // 信息窗口宽度</div><div class="line">            height: 60, // 信息窗口高度</div><div class="line">            title: <span class="string">'HHardyy'</span> // 信息窗口标题</div><div class="line">          &#125;</div><div class="line">        var infoWindow = new window.BMap.InfoWindow(<span class="string">'show time'</span>, opts) // 创建信息窗口对象</div><div class="line">        map.openInfoWindow(infoWindow, point) // 开启信息窗口</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p></blockquote><h3 id="那么问题来了，如果加window不顶用咋办，Cannot-read-property-‘Map’-of-undefined？"><a href="#那么问题来了，如果加window不顶用咋办，Cannot-read-property-‘Map’-of-undefined？" class="headerlink" title="那么问题来了，如果加window不顶用咋办，Cannot read property ‘Map’ of undefined？"></a>那么问题来了，如果加window不顶用咋办，Cannot read property ‘Map’ of undefined？</h3><p>参考：<a href="https://blog.csdn.net/leeleejoker/article/details/80598528" target="_blank" rel="external">这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用vue全家桶撸一个项目的时候，eslint给我找了一个麻烦。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=498549913&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="百度地图" scheme="http://yoursite.com/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="BMap" scheme="http://yoursite.com/tags/BMap/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>对象深拷贝与浅拷贝</title>
    <link href="http://yoursite.com/2018/07/10/%E5%AF%B9%E8%B1%A1%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/07/10/对象深拷贝与浅拷贝/</id>
    <published>2018-07-09T22:58:07.000Z</published>
    <updated>2018-08-30T05:37:44.652Z</updated>
    
    <content type="html"><![CDATA[<p>偶然与道友产生了深浅拷贝的异议，所以赶紧补一补习，需要的你也可以看看</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=552716148&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原<br>对象。<br>举个栗子：假如有两个对象a和b，我想让b对象拥有a对象的属性和方法，然后b对象某些同属性的keyvalue和a不一样，可能会这么写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">name: <span class="string">"hhardyy"</span></div><div class="line">&#125;</div><div class="line">var b = a;</div><div class="line">b.name = <span class="string">"xiaofangkuai"</span>;</div><div class="line">console.log(a.name) //xiaofangkuai</div></pre></td></tr></table></figure></p><p>但是这样之后a对象的name也被改变了，举例浅拷贝一个initObj对象，里面有各种属性和方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var initObj = &#123;</div><div class="line">    a: <span class="string">"hhardyy"</span>,</div><div class="line">    b: &#123;</div><div class="line">        a: <span class="string">"xiaofangkuai"</span></div><div class="line">    &#125;,</div><div class="line">    c: [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>],</div><div class="line">    d: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        alert(<span class="string">"hhardyy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="built_in">clone</span>(obj)&#123;</div><div class="line">    var newObj=&#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</div><div class="line">        newObj[key]=obj[key]</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> newObj;</div><div class="line">&#125;</div><div class="line">var newObj = <span class="built_in">clone</span>(initObj);</div><div class="line">console.log(<span class="string">'拷贝的对象属性方法'</span>)</div><div class="line">console.log(newObj.b);</div><div class="line">console.log(newObj.c);</div><div class="line">console.log(newObj.d);</div><div class="line">newObj.a=<span class="string">"xiaofangkuai"</span>;</div><div class="line">newObj.b.a = <span class="string">"hhardyy"</span>;</div><div class="line">newObj.c = [1, 2, 3];</div><div class="line">newObj.d = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    alert(<span class="string">"hhardyy1"</span>);</div><div class="line">&#125;;</div><div class="line">console.log(<span class="string">'初始的对象属性方法'</span>)</div><div class="line">console.log(initObj.b);</div><div class="line">console.log(initObj.c);</div><div class="line">console.log(initObj.d);</div><div class="line">console.log(<span class="string">'区别是initObj下面的b对象下面a没有被拷贝，也就是说只拷贝了一层'</span>)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/1.JPG" alt="console" title="">                </div>                <div class="image-caption">console</div>            </figure><p>ES6提供了一个新函数用于浅拷贝Object.assign()，可以处理一层的深度拷贝，可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。拷贝的是对象的属性的引用，而不是对象本身。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">文档地址</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.assign(target, ...sources)  //target=目标对象，sources=源对象，返回值等于目标对象</div></pre></td></tr></table></figure></p><p>继续上面的例子，这是一层的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">name: <span class="string">"hhardyy"</span></div><div class="line">&#125;</div><div class="line">var b = Object.assign(&#123;&#125;, a);</div><div class="line">b.name=<span class="string">"xiaofangkuai"</span></div><div class="line">console.log(a.name)//hhardyy,证明a.name没有被改动</div></pre></td></tr></table></figure></p><p>继续上面的例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">name: &#123;</div><div class="line">    <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">     <span class="string">'lastname'</span>:&#123;</div><div class="line">        age:20</div><div class="line">     &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b = Object.assign(&#123;&#125;, a);</div><div class="line">b.name.firstname=<span class="string">"hhardyy"</span></div><div class="line">b.name.lastname.age=19</div><div class="line">console.log(b.name)</div><div class="line">console.log(a.name)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/2.JPG" alt="age出毛病了" title="">                </div>                <div class="image-caption">age出毛病了</div>            </figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>obj1要完全复制obj2的属性方法，同时obj1要是改变不会影响obj2的属性方法，同时满足多层拷贝</p><h4 id="对象只有一层的话，可以用ES6的Object-assign-，例子还是上面那个"><a href="#对象只有一层的话，可以用ES6的Object-assign-，例子还是上面那个" class="headerlink" title="对象只有一层的话，可以用ES6的Object.assign()，例子还是上面那个"></a>对象只有一层的话，可以用ES6的Object.assign()，例子还是上面那个</h4><h4 id="stringify"><a href="#stringify" class="headerlink" title="stringify"></a>stringify</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line">var strA=JSON.stringify(a);</div><div class="line">console.log(<span class="string">'字符串的a对象:'</span>+strA)</div><div class="line">var b =JSON.parse(strA)</div><div class="line">b.name.firstname=<span class="string">"hhardyy"</span></div><div class="line">b.name.lastname.age=19</div><div class="line">console.log(b)</div><div class="line">console.log(a)</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/3.JPG" alt="a对象没有被改到" title="">                </div>                <div class="image-caption">a对象没有被改到</div>            </figure><p>这种深拷贝不用每层递归，也比较简单，但是这种方法也有不少坏处，IE6、7不兼容，兼容的方法也简单，勉强用evel或者去<a href="http://www.json.org/" target="_blank" rel="external">json的官网</a>下载json类下面<br>的json2.js，然后引入,就可以兼容了。同时这种方法会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object。也就是说<br>它会干掉原来对象里头的构造函数，所以有undefined和function会被除掉，只有可以转成JSON格式的对象才可以这样用，像function没办法转成JSON。还是那个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">          console.log(<span class="string">'hhardyy'</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line">var strA=JSON.stringify(a);</div><div class="line">var b =JSON.parse(strA)</div><div class="line">console.log(<span class="string">"console.log(typeof a.func):"</span>+typeof a.func)</div><div class="line">console.log(<span class="string">"console.log(typeof b.func):"</span>+typeof b.func)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/4.JPG" alt="b.func被干掉了" title="">                </div>                <div class="image-caption">b.func被干掉了</div>            </figure><h4 id="递归拷贝"><a href="#递归拷贝" class="headerlink" title="递归拷贝"></a>递归拷贝</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">          console.log(<span class="string">'hhardyy'</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var b=&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">function</span> deepClone(objA, objB) &#123;    </div><div class="line">  var obj = objB || &#123;&#125;;    </div><div class="line">  <span class="keyword">for</span> (var i <span class="keyword">in</span> objA) &#123;        </div><div class="line">    var prop = objA[i];        // 避免相互引用对象导致死循环</div><div class="line">    <span class="keyword">if</span>(prop === obj) &#123;            </div><div class="line">      <span class="built_in">continue</span>;</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (typeof prop === <span class="string">'object'</span>) &#123;</div><div class="line">      obj[i] = (prop.constructor === Array) ? [] : &#123;&#125;;            </div><div class="line">      arguments.callee(prop, obj[i]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      obj[i] = prop;</div><div class="line">    &#125;</div><div class="line">  &#125;    </div><div class="line">  <span class="built_in">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">deepClone(a, b);</div><div class="line">console.log(a);</div><div class="line">console.log(b);</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/5.JPG" alt="b.func被干掉了" title="">                </div>                <div class="image-caption">b.func被干掉了</div>            </figure><h4 id="JQ的-extend"><a href="#JQ的-extend" class="headerlink" title="JQ的$.extend"></a>JQ的$.extend</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var $ = require(<span class="string">'jquery'</span>);</div><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">          console.log(<span class="string">'hhardyy'</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line">var b = $.extend(<span class="literal">true</span>, &#123;&#125;, a);</div></pre></td></tr></table></figure><h4 id="函数库lodash的-cloneDeep"><a href="#函数库lodash的-cloneDeep" class="headerlink" title="函数库lodash的_.cloneDeep"></a>函数库lodash的_.cloneDeep</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var _ = require(<span class="string">'lodash'</span>);</div><div class="line">var $ = require(<span class="string">'jquery'</span>);</div><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">          console.log(<span class="string">'hhardyy'</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line">var b = _.cloneDeep(a);</div></pre></td></tr></table></figure><p>这个用起来简单，而且性能也不错</p><h3 id="封装一个对象拷贝的方法"><a href="#封装一个对象拷贝的方法" class="headerlink" title="封装一个对象拷贝的方法"></a>封装一个对象拷贝的方法</h3><p>假如obj2要拷贝obj1里面的属性和方法可以用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> HexTend(obj1,obj2)&#123;</div><div class="line">    <span class="keyword">for</span>(var attr <span class="keyword">in</span> obj1)&#123;</div><div class="line">        obj2[attr]=obj1[attr];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> obj2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然与道友产生了深浅拷贝的异议，所以赶紧补一补习，需要的你也可以看看&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=552716148&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="深拷贝与浅拷贝" scheme="http://yoursite.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="stringify" scheme="http://yoursite.com/tags/stringify/"/>
    
      <category term="ES6-Object.assign()" scheme="http://yoursite.com/tags/ES6-Object-assign/"/>
    
      <category term="递归拷贝" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="JQ的$.extend" scheme="http://yoursite.com/tags/JQ%E7%9A%84-extend/"/>
    
      <category term="函数库lodash的_.cloneDeep" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BA%93lodash%E7%9A%84-cloneDeep/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的艺术</title>
    <link href="http://yoursite.com/2018/07/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/07/08/面向对象的艺术/</id>
    <published>2018-07-08T04:58:07.000Z</published>
    <updated>2018-08-30T05:25:58.175Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象的艺术，都是艺术，全是艺术，全是爆炸~</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=415792563&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>面向对象是一种思想，是基于面向过程而言的，就是说面向对象是将功能等通过对象来实现，把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是以功能划分问题,<br>把属性和方法写在一起，作为一个相互依存的整体——对象，面向对象有三大特征：封装性、继承性、多态性。就像去一家咖啡店，你只需要和服务员说你要什么样的咖啡，然后只需要等服务员<br>把咖啡拿上来喝掉就可以了，不需要去关注咖啡怎么做，这里服务员就是对象（不是那种对象，是另一种对象），你面向她，拿到你喜欢的咖啡，她也不需要知道你是怎么把咖啡喝完的。顺带<br>提一下面向过程，面向过程就是根据需要分析出解决问题所需要的步骤，顺序执行，其程序结构是按功能划分为若干个基本模块，这些模块形成一个树状结构。各模块之间的关系尽可能简单,<br>在功能上相对独立,每一模块内部均是由顺序、选择和循环三种基本结构组成,其模块化实现的具体方法是使用子程序。程序流程在写程序时就已决定,同样还是刚才的服务员，面向过程就<br>是你和她说要喝什么咖啡，然后浪漫的一起从调料，磨咖啡豆，煮咖啡等等等，然后你张嘴，喝一口，闭嘴，咽下去。。。</p></blockquote><h3 id="面向对象的神器"><a href="#面向对象的神器" class="headerlink" title="面向对象的神器"></a>面向对象的神器</h3><p>之前和一些道友谈论面向对象的过程中得到了一张很厉害的图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/faceobject/1.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>系统对象，诸如Array()，Date()这类系统自带的对象<br>一般程序员在讨论说没有对象的时候，总有人说new一个就有了，这里我new一个系统自带的数组对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var arr = new Array();</div></pre></td></tr></table></figure></p><p>对象new出来之后就可以使用它里头的函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr.push();  </div><div class="line">arr.sort();</div></pre></td></tr></table></figure></p><p>对象的组成是由肤白+貌美+大长腿。。。错了错了。是由属性和方法构成的</p><h3 id="对象的构成"><a href="#对象的构成" class="headerlink" title="对象的构成"></a>对象的构成</h3><p>诶。。。由于对象是undefined，所以我构造一个对象出来，并且调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var girlFriend=new Girlfriend();    //构造对象</div><div class="line">console.log(<span class="string">"年龄"</span>+girlFriend.age);    //打印对象的年龄</div><div class="line">console.log(<span class="string">"性别"</span>+girlFriend.gender);    //打印对象的性别</div><div class="line">girlFriend.can();     //调用对象的can方法</div><div class="line">girlFriend.canNot();     //调用对象的canNot方法</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/faceobject/2.png" alt="console" title="">                </div>                <div class="image-caption">console</div>            </figure><p>构造的方法很简单，对象的方法我用vue的写法，把Girlfriend.prototype当成vue的methods，因为我觉得相对于它通常的写法略酷一些。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Girlfriend</span></span>()&#123;      //对象的构造函数</div><div class="line">this.age=18;           //对象的属性</div><div class="line">this.gender=<span class="string">"female"</span>;       </div><div class="line">&#125;</div><div class="line">Girlfriend.prototype=&#123;      //对象的方法</div><div class="line"><span class="function"><span class="title">can</span></span>()&#123;</div><div class="line">    console.log(<span class="string">"可以拿来面向"</span>)</div><div class="line">&#125;,</div><div class="line"><span class="function"><span class="title">canNot</span></span>()&#123;</div><div class="line">console.log(<span class="string">"不可以打"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="工厂方式"><a href="#工厂方式" class="headerlink" title="工厂方式"></a>工厂方式</h3><p>知道什么是当当当当吗。。。。。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> createPerson(name)&#123;</div><div class="line">//1.原料</div><div class="line">var obj = new Object();</div><div class="line">//2.加工</div><div class="line">obj.name = name;</div><div class="line">obj.showName = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">console.log( this.name );</div><div class="line">&#125;;</div><div class="line">//3.出场</div><div class="line"><span class="built_in">return</span> obj;</div><div class="line">&#125;</div><div class="line">var p1 = createPerson(<span class="string">'HHardyy'</span>);</div><div class="line">p1.showName();</div><div class="line">var p2 = createPerson(<span class="string">'Hardy'</span>);</div><div class="line">p2.showName();</div></pre></td></tr></table></figure></p><p>但是请记住这里的p1.showName()不等于p2.showName()，即使是传入同一个参数，因为p1.showName()==p2.showName()，它是拿双方的地址来对比的，就像java中一样，但是java中可以用xxx1.equals(xxx2)来对比它们的内容是否相等。</p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>去改写对象下面公用的方法或者属性,让公用的方法或者属性在内存中存在一份 ( 可以提高性能 )，原型 就相当于写html页面时，CSS中的class，普通方法相当于CSS中的style，例如我在系统的数组对象添加一个求和方法count<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var arr1 = [1,2,3,4];</div><div class="line">var arr2 = [2,2,2,2];</div><div class="line">Array.prototype.count = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">var result = 0;</div><div class="line"><span class="keyword">for</span>(var i=0;i&lt;this.length;i++)&#123;</div><div class="line">result += this[i];</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> result;</div><div class="line">&#125;;</div><div class="line">console.log( arr1.count() );  //10</div><div class="line">console.log( arr2.count() );  //8</div></pre></td></tr></table></figure></p><p>原形下面不止可以是方法，也可以添加属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array.prototype.number=5201314</div></pre></td></tr></table></figure></p><h3 id="工厂方式之原型"><a href="#工厂方式之原型" class="headerlink" title="工厂方式之原型"></a>工厂方式之原型</h3><p>当new去调用一个函数 : 这个时候函数中的this指向创建出来的对象,而且函数的的返回值直接就是this(隐式返回)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Object(name)&#123;</div><div class="line">this.name = name;</div><div class="line">&#125;</div><div class="line">Object.prototype.showName = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">console.log( this.name );</div><div class="line">&#125;;</div><div class="line">var p1 = new Object(<span class="string">'HHardyy'</span>);</div><div class="line">var p2 = new Object(<span class="string">'小方块'</span>);</div><div class="line">alert( p1.showName == p2.showName );  //<span class="literal">true</span></div></pre></td></tr></table></figure></p><p>在JS源码中，系统对象也是基于原型的程序，所以尽量不要去修改或者添加系统对象下面的方法和属性，不然可能导致部分原本js的部分功能改变</p><h3 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h3><p>基本数据类型都有自己对应的包装对象，如String，Number，Boolean ，基本类型会找到对应的包装对象类型，然后包装对象把所有的属性和方法给了基本类型，然后包装对象消失<br>如果在String下面添加number类型的数据，会输出undefined<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var str = <span class="string">'HHardyy'</span>;</div><div class="line">String.prototype.lastValue = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="built_in">return</span> this.charAt(this.length-1);</div><div class="line">&#125;;</div><div class="line">alert( str.lastValue() );  //y</div></pre></td></tr></table></figure></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>提到面向对象就肯定会有原型链<em>proto</em>，原型链是实例对象与原型之间的连接，它的最外层是Object.prototype，比如我在最外层添加一个love属性，那么这个属性可以在任何构造出来<br>的对象中调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">HHardyy</span></span>()&#123;</div><div class="line">    this.say=<span class="string">"666"</span>;</div><div class="line">&#125;</div><div class="line">Object.prototype.love = <span class="string">"鸡翅"</span>;</div><div class="line">var h = new HHardyy();</div><div class="line">alert(h.love);   //鸡翅</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/faceobject/3.png" alt="原型链手残图" title="">                </div>                <div class="image-caption">原型链手残图</div>            </figure><p>诶，。。。应该能看懂</p><h3 id="hasOwnProperty-constructor-instanceof-toString"><a href="#hasOwnProperty-constructor-instanceof-toString" class="headerlink" title="hasOwnProperty,constructor,instanceof,toString"></a>hasOwnProperty,constructor,instanceof,toString</h3><p>1、hasOwnProperty:看是不是对象自身下面的属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log( h.hasOwnProperty(<span class="string">"say"</span>))</div></pre></td></tr></table></figure></p><p>2、in：in运算符和hasOwnProperty不同，只要存在在原型上或者对象上就返回true<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'HHardyy'</span> <span class="keyword">in</span> Object;</div></pre></td></tr></table></figure></p><p>3、constructor:查看对象的构造函数<br>4、instanceof:对象与构造函数在原型链上是否有关系<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(h instanceof Array)</div></pre></td></tr></table></figure></p><p>5、toString():系统对象下面自带的 , 自己写的对象都是通过原型链找object下面的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log( Object.prototype.toString.call(h) == <span class="string">'[object Array]'</span> )</div></pre></td></tr></table></figure></p><p>6、Object.keys:ES5的Object.keys方法可以返回对象上的所有可枚举属性(只有对象上的，从原型上继承的没有)</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的概念：子类不影响父类，子类可以继承父类的一些功能 ( 代码复用 )，继承分成属性继承和方法继承。继承的类型分成拷贝继承，原型继承和类式继承<br>拷贝继承:  通用型的，有new或无new的时候都可以<br>类式继承:  new构造函数<br>原型继承:  无new的对象</p><p>属性的继承 : 调用父类的构造函数 call<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj1 = new Object1(<span class="string">'HHardyy'</span>);</div><div class="line"><span class="keyword">function</span> Object1(name)&#123;   //父类</div><div class="line">this.name = name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Object2(name,sex)&#123;  //子类</div><div class="line">Object1.call(this,name);</div><div class="line">this.sex = sex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>方法的继承：for in也就是拷贝继承 (jquery也是采用拷贝继承extend),原理就是遍历Object1之后赋给Object2,也可以封装成一个extend方法，在需要用的时候只需要传入2个对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> extend(obj1,obj2)&#123;</div><div class="line"><span class="keyword">for</span>(var attr <span class="keyword">in</span> obj2)&#123;</div><div class="line">obj1[attr] = obj2[attr];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>写好了这个extend方法，可以用来写自定义事件，比如各种弹框、拖拽什么的，先给对象设置默认参数，然后再做个参数传递，然后如果有用户输入参数，则该参数覆盖本身设置的默认参数，达到自定义效果。<br><a href="https://codepen.io/HHardyy/pen/eKqKqV" target="_blank" rel="external">codepen上做的一个小demo</a></p><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><p>原型继承的几种方式<br>一、原型链继承<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Object1</span></span>()&#123; this.name=<span class="string">"Object1"</span>; &#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Object2</span></span>()&#123;</div><div class="line">    this.age=<span class="string">"2"</span>; //Object2继承了Object1,通过原型，形成_proto_</div><div class="line">&#125;</div><div class="line">    Object2.prototype=new Object1();</div></pre></td></tr></table></figure></p><p>二、构造函数继承（对象冒充继承<br>为了解决引用共享和超类型无法传参的问题，我们采用一种叫借用构造函数的技术，或者成为对象冒充(伪造对象、经典继承)的技术来解决这两种问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Object1(age)&#123;</div><div class="line">    this.name=[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>]</div><div class="line">    this.age=age;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Object2(age)&#123;</div><div class="line">    Object1.call(this,age); //对象冒充，给超类型传参</div><div class="line">&#125;</div><div class="line">    var o2 = new Object2(20);</div><div class="line">    console.log(o2.age);//20</div><div class="line">    console.log(o2.name);//[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>]</div><div class="line">    o2.name.push(<span class="string">'HHardyy'</span>); //添加的新数据，只给 o2</div><div class="line">    console.log(o2.name)//[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'HHardyy'</span>]</div></pre></td></tr></table></figure></p><p>三、组合继承（原型链继承+构造函数继承）<br>原型链+借用构造函数=组合继承。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Object1(age) &#123;</div><div class="line">    this.name = [<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>]</div><div class="line">    this.age = age;</div><div class="line">&#125;</div><div class="line">Object1.prototype.run = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> this.name + this.age;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">function</span> Object2(age) &#123;</div><div class="line">    Object1.call(this, age); //对象冒充</div><div class="line">&#125;</div><div class="line">Object2.prototype = new Object1(); //原型链继承</div><div class="line">    var o2 = new Object2(100);</div><div class="line">    console.log(o2.run());</div></pre></td></tr></table></figure></p><p>四、原型式继承<br>借助原型并基于已有的对象创建新对象，同时还不必因此创建自定义类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Object1(o) &#123; //传递一个字面量函数</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">F</span></span>() &#123;&#125; //创建一个构造函数</div><div class="line">    F.prototype = o; //把字面量函数赋值给构造函数的原型</div><div class="line">    <span class="built_in">return</span> new F(); //最终返回出实例化的构造函数</div><div class="line">&#125;</div><div class="line">var box = &#123; //字面量对象</div><div class="line">    name : <span class="string">'zhangsan'</span>,</div><div class="line">    arr : [<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>]</div><div class="line">&#125;;</div><div class="line">    var box1 = Object1(box); //传递</div><div class="line">    console.log(box1.name);</div><div class="line">    box1.name = <span class="string">'Jack'</span>;</div><div class="line">    console.log(box1.name);</div><div class="line">    console.log(box1.arr);</div><div class="line">    box1.arr.push(<span class="string">'parent'</span>);</div><div class="line">    console.log(box1.arr);</div><div class="line">    var box2 = Object1(box); //传递</div><div class="line">    console.log(box2.name);</div><div class="line">    console.log(box2.arr); //引用类型共享了</div></pre></td></tr></table></figure></p><p>五、寄生组合式继承<br>寄生组合式继承解决了两次调用的问题，组合式继承就会有两次调用的情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> object(o) &#123;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>() &#123;&#125;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="built_in">return</span> new F();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> inheritPrototype(subType, superType) &#123;</div><div class="line">    var prototype = object(superType.prototype);  //创建对象</div><div class="line">    prototype.constructor = subType;              //增强对象</div><div class="line">    subType.prototype = prototype;                //指定对象</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>原型式继承其实就是说构造函数和子构造函数，或者说类和子类之间(js中不存在类),唯一的继承传递方式是通过原型，而不是像其他语言直接通过extends(ES6的语法糖出现了extends)<br>，所以需要手写prototype。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var Object1 = &#123; name : <span class="string">'HHardyy'</span> &#125;;</div><div class="line">var Object2 = cloneObj(Object1);</div><div class="line">console.log(Object2.name);</div><div class="line"></div><div class="line"><span class="keyword">function</span> cloneObj(obj)&#123;</div><div class="line">var F = <span class="function"><span class="title">function</span></span>()&#123;&#125;;</div><div class="line">F.prototype = obj;</div><div class="line"><span class="built_in">return</span> new F(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h4><p>在js中没有类的概念，所以将js中的构造函数当成类，要做属性和方法继承的时候，要分开继承<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 父类 </div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Object1</span></span>() &#123;  this.name = <span class="string">'HHardyy'</span>; &#125;</div><div class="line">Object1.prototype.showName = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">     alert( this.name ); </div><div class="line">&#125;;</div><div class="line">// 子类</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Object2</span></span>() &#123;&#125;;</div><div class="line">// 将父类创建出来的对象赋值给子类的原型,就是类式继承</div><div class="line">    Object2.prototype = new Object1(); </div><div class="line">    var o2 = new Object2();</div><div class="line">    o2.showName()//HHardyy</div></pre></td></tr></table></figure></p><p>上面这就是一句话继承，这时候把o2.constructor打印出来，发现其实是有问题的，它把Object1给打印了出来<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/faceobject/4.png" alt="Object1" title="">                </div>                <div class="image-caption">Object1</div>            </figure><br>原因是直接把newObject1()赋值给Object2.prototype，它就会把他原先自动生产的还有我们自己添加的原型下面的属性都覆盖掉了，所以把construtor指向给修改了，因此还需要修正con<br>structor指向Object2.prototype.constructor=Object2，其实这么改了以后虽然表面正常了，但还是有问题的，假如Object1的name是个数组[1,2]的话，声明出来的对象.name也不是<br>同一个对象，这时候可以构建一个空对象H()继承Object1的prototype,然后Object2再继承H()的prototype，就可以解决问题了。</p><h3 id="点表示法与中括号表示法"><a href="#点表示法与中括号表示法" class="headerlink" title="点表示法与中括号表示法"></a>点表示法与中括号表示法</h3><p>一般来说，访问对象属性时使用的都是点表示法，这也是很多面向对象语言中通用的语法，不过，在javascript也可以使用方括号表示法来访问对象的属性， 在使用方括号语法时，应该将要访问的属性以字符串的形式放在括号中，就像这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(person[<span class="string">"name"</span>]); //hhardyy</div><div class="line">alert(person.name); //hhardyy</div></pre></td></tr></table></figure></p><p>从功能上看，这两种访问对象属性的方法没有任何区别。但是方括号语法的主要优点是可以通过变量来访问属性，就像这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var prototypeName=<span class="string">"name"</span>;</div><div class="line">alert(person[prototypeName]);//hhardyy</div></pre></td></tr></table></figure></p><p>如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或者保留字，也可以使用方括号表示法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person[<span class="string">"first name"</span>]=<span class="string">"hhardyy"</span></div></pre></td></tr></table></figure></p><p>由于first name中包含一个空格，所以不能使用点表示法来访问它。然而属性名中是可以包含非字母非数字的，这时候就可以使用方括号表示法来访问它们。通常，除非必须使用变量来访问属性，否则建议使用点表示法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象的艺术，都是艺术，全是艺术，全是爆炸~&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=415792563&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="stringify" scheme="http://yoursite.com/tags/stringify/"/>
    
      <category term="原型" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="hasOwnProperty" scheme="http://yoursite.com/tags/hasOwnProperty/"/>
    
      <category term="constructor" scheme="http://yoursite.com/tags/constructor/"/>
    
      <category term="instanceof" scheme="http://yoursite.com/tags/instanceof/"/>
    
      <category term="toString" scheme="http://yoursite.com/tags/toString/"/>
    
      <category term="原型继承" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/"/>
    
      <category term="类式继承" scheme="http://yoursite.com/tags/%E7%B1%BB%E5%BC%8F%E7%BB%A7%E6%89%BF/"/>
    
      <category term="浅拷贝与深拷贝" scheme="http://yoursite.com/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>npm install出现的小问题</title>
    <link href="http://yoursite.com/2018/07/05/npm-install%E5%87%BA%E7%8E%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/07/05/npm-install出现的小问题/</id>
    <published>2018-07-05T15:00:58.000Z</published>
    <updated>2018-07-05T15:30:18.777Z</updated>
    
    <content type="html"><![CDATA[<p>有个妹子遇到了个小问题，就是项目跑不起来,装不上依赖。so</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=571463950&auto=0&height=66"></iframe><br><a id="more"></a></p><p>咱直接说解决方式，先来看看问题。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/npmInstall/bug.png" alt="npm安装任何依赖包之后这样子" title="">                </div>                <div class="image-caption">npm安装任何依赖包之后这样子</div>            </figure><br>其实这就是说明依赖包需要更新了，这个问题的出现可能是因为你的node和npm的版本撑不起项目的奔跑，<br>这时候只需要升级一下node的版本，window用户建议别升级了直接去官网下载好一点，原因就是我之前踩坑生成的一篇文章<br><a href="https://hhardyy.com/2017/12/20/node-pash%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/" target="_blank" rel="external">文章在这里</a><br>要是懒得看就直接上node官网下载安装吧。<br>安装完node之后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure></p><p>如果出现node的版本号，说明node成功，接下来可以更新一下npm了，npm更新比较帅气，但是由于npm自身的更新频率比node高很多，所以可以选择下面的命令更新到最新版。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install npm@latest -g</div></pre></td></tr></table></figure></p><p>也可以选择下面这个命令安装特定安装包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install &lt;package_name&gt;</div></pre></td></tr></table></figure></p><p>node和npm都更新完之后应该没问题了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有个妹子遇到了个小问题，就是项目跑不起来,装不上依赖。so&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=571463950&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>js的时间与时间戳</title>
    <link href="http://yoursite.com/2018/07/04/js%E7%9A%84%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <id>http://yoursite.com/2018/07/04/js的时间与时间戳/</id>
    <published>2018-07-04T07:38:46.000Z</published>
    <updated>2018-07-17T15:35:28.124Z</updated>
    
    <content type="html"><![CDATA[<p>玩到一个转换时间戳的问题，突然想知道它能怎么变。。。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=451126390&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>时间戳能表示一份数据在某个特定时间之前已经存在的、完整的、可验证的数据，通常是一个字符序列就像1530693131572，唯一地标识某一刻的时间。使用数字签名技术产生的数据签名的对象包括原始文件信息、签名参数、签名时间&gt;等信息。时间戳广泛运用在知识产权保护、合同签字、金融账务、电子报价投标、股票交易等方面。</p></blockquote><h3 id="时间转时间戳"><a href="#时间转时间戳" class="headerlink" title="时间转时间戳"></a>时间转时间戳</h3><p>方法有五种，都是通过实例化时间对象Date()来获取当前的时间戳，为了防止测试结果不一致，这里实例化一个时间对象data来进行五种方法测试；<br>第一种：通过原型方法直接获得当前时间的毫秒值，比较准确<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var t1=data.getTime();</div><div class="line">console.log(<span class="string">"第一种方法时间戳"</span>+t1)</div></pre></td></tr></table></figure></p><p>第二种：通过valueOf()函数返回指定对象的原始值获得准确的时间戳值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var t2=data.valueOf();</div><div class="line">console.log(<span class="string">"第二种方法时间戳"</span>+t2)</div></pre></td></tr></table></figure></p><p>第三种：将时间转化为一个number类型的时间戳值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var t3=Number(data);</div><div class="line">console.log(<span class="string">"第三种方法时间戳"</span>+t3)</div></pre></td></tr></table></figure></p><p>第四种:貌似多年前学ASP.NET的时候用到过类似的，不过那个是DataTime.Now;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var t4=Date.now();</div><div class="line">console.log(<span class="string">"第四种方法时间戳"</span>+t4)</div></pre></td></tr></table></figure></p><p>第五种：不太厉害，毫秒级别的数值被转化成000<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var t5=Date.parse(data);</div><div class="line">console.log(<span class="string">"第五种方法时间戳"</span>+t5)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Data/1.png" alt="时间艺术" title="">                </div>                <div class="image-caption">时间艺术</div>            </figure><h3 id="时间戳转时间"><a href="#时间戳转时间" class="headerlink" title="时间戳转时间"></a>时间戳转时间</h3><p>直接用时间对象Date来对上面得到的时间戳1530693131572进行转化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var T=new Date(1530693131572)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Data/2.png" alt="转化的艺术" title="">                </div>                <div class="image-caption">转化的艺术</div>            </figure><p>对这个格式不太满意的话，可以再利用toLocaleDateString()方法返回该日期对象，再正则匹配将/替换成-，再将对象的时间部分转换为字符串，到这一步之后还剩yyyy-MM-dd hh:mm:ss GMT+0800(中国标准时间)，这时候再用substr方法取从0到8的字符打印出来就是yyyy-MM-dd hh:mm:ss的时间格式了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">T.toLocaleDateString().replace(/\//g, <span class="string">"-"</span>) + <span class="string">" "</span> + T.toTimeString().substr(0, 8);</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Data/3.png" alt="正则的艺术" title="">                </div>                <div class="image-caption">正则的艺术</div>            </figure><p>toLocaleDateString在不同的浏览器显示方法是不一样的，需要注意一下，火狐下面显示的日期格式是yyyy-MM-dd，IE11是yyyy-MM-dd，谷歌版本低于58的时候yyyy/MM/dd，版本大于等于58的时候是yyyy-MM-dd，所以如果上面出现的效果不对或者报错，是因为toLocaleDateString()因浏览器而异。</p><p>解决方法：<br>分别获取时间的年月日然后拼接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">getDate</span></span>()&#123;</div><div class="line">var data=new Date();</div><div class="line"><span class="built_in">let</span> year=data.getFullYear();</div><div class="line"><span class="built_in">let</span> month=(<span class="string">"0"</span>+(data.getMonth()+1)).slice(-2);</div><div class="line"><span class="built_in">let</span> day=(<span class="string">"0"</span>+data.getDate()).slice(-2);</div><div class="line"><span class="built_in">return</span> year + <span class="string">"-"</span> + month + <span class="string">"-"</span> + day + <span class="string">" "</span> + data.toTimeString().substr(0, 8);   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>正好今天百度2018AI开发者大会，share一下我早上截屏到的几张美照<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Data/du2.png" alt="新时器--这是表白的时候定的玫瑰花快递刚好送到" title="">                </div>                <div class="image-caption">新时器--这是表白的时候定的玫瑰花快递刚好送到</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Data/du1.png" alt="见证历史的时刻--Apollo3.0面向量产，更加开放" title="">                </div>                <div class="image-caption">见证历史的时刻--Apollo3.0面向量产，更加开放</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Data/kunlun.png" alt="昆仑--百度自研的中国第一款云端全功能AI芯片" title="">                </div>                <div class="image-caption">昆仑--百度自研的中国第一款云端全功能AI芯片</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩到一个转换时间戳的问题，突然想知道它能怎么变。。。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=451126390&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="时间" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4/"/>
    
      <category term="时间戳" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    
      <category term="toLocaleDateString" scheme="http://yoursite.com/tags/toLocaleDateString/"/>
    
  </entry>
  
  <entry>
    <title>Linux艺术</title>
    <link href="http://yoursite.com/2018/07/03/Linux%E8%89%BA%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/07/03/Linux艺术/</id>
    <published>2018-07-03T05:39:54.000Z</published>
    <updated>2018-07-03T14:59:56.314Z</updated>
    
    <content type="html"><![CDATA[<p>Linux是一套基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU,可以免费使用和自由传播的类Unix操作系统。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29539085&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>linux能运行主要的UNIX工具软件、应用程序和网络协议，支持32位和64位硬件。继承了Unix以网络为核心的设计思想。Linux存在着许多不同的Linux版本，但都使用Linux内核。可安装在各种计算机硬件&gt;设备中，严格来讲，Linux这个词本身只表示Linux内核，只是大家习惯了用Linux来形容整个基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。</p></blockquote><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>Linux的文件系统目录结构采用分层结构<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/linux/1.png" alt="文件系统的分层结构" title="">                </div>                <div class="image-caption">文件系统的分层结构</div>            </figure><br>在linux中，可执行的二进制文件可以不要扩展名</p><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>用户分成3类<br>用户（user），组（group），其他用户（other）,所有用户(all)=u,g,o,a<br>权限也分成3类<br>读（read）,写（write）,执行权限（excute）=r，w，x,三种权限既可以单独使用也可以组合使用<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/linux/2.png" alt="文件系统的分层结构" title="">                </div>                <div class="image-caption">文件系统的分层结构</div>            </figure><br>比如我给文件hhardyy.txt的属主增加执行权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod  u+x  hhardyy.txt</div></pre></td></tr></table></figure></p><p>将文件hhardyy.txt的属组去掉写权限，同时将其他用户设置为只有执行权限，而文件属主的权限不变。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod  g-w,o=x  hhardyy.txt</div></pre></td></tr></table></figure></p><p>chmod的数字使用方式也是很方便的，关键是数制转换的问题。这种方式是先将每个权限位化成二进制数，其中如果某权限位是“-”则用0来表示，否则用1来表示；接着，将这9列权限分为三组（每三位一组），再将每组化成一个八进制数。例如，某文件有如下权限rwxrw-r–，则转换为二进制数为111110100，再化为八进制数则为764；反之，当看到八进制数764时也应该很快转化为相应权限。<br>例如，将文件hhardyy.txt的权限设置为：属主拥有全部权限,属组拥有读写权限,其他用户拥有执行权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod  764  hhardyy.txt</div></pre></td></tr></table></figure></p><h3 id="shell的爆炸艺术"><a href="#shell的爆炸艺术" class="headerlink" title="shell的爆炸艺术"></a>shell的爆炸艺术</h3><p>Shell是指“提供使用者使用界面”的软件（命令解析器），它类似于DOS下的command.com和后来的cmd.exe，以及node的bash。<br>用linux带的编辑编一个shell脚本输出IT界最强的大佬Hello,world:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">命令</div><div class="line">vi hello.sh</div><div class="line"></div><div class="line">内容</div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> “Hello,world!”</div></pre></td></tr></table></figure></p><p>shell脚本是按行解释的，每个脚本的第一行总是以#!/bin/sh开头 。<br>执行shell脚本的几种方式有：<br>1.sh hhardyy.sh<br>2../hhardyy.sh<br>3.source hhardyy.sh    or     .  hhardyy.sh<br>4.直接执行，就是给脚本hhardyy.sh增加执行权chmod  a+x  hhardyy.sh<br>也可以把命令写到shell脚本执行<br>比如我要挂载光驱<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">命令</div><div class="line">vi mount.sh</div><div class="line"></div><div class="line">内容</div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">mkdir -p mnt/cdrom</div><div class="line">mount /dev/cdrom ~/mnt/cdrom</div></pre></td></tr></table></figure></p><h3 id="iptables防火墙"><a href="#iptables防火墙" class="headerlink" title="iptables防火墙"></a>iptables防火墙</h3><p>iptables是Linux上常用的防火墙软件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install iptables    //安装</div></pre></td></tr></table></figure></p><h4 id="清除已有iptables规则"><a href="#清除已有iptables规则" class="headerlink" title="清除已有iptables规则"></a>清除已有iptables规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -F</div><div class="line">iptables -X</div><div class="line">iptables -Z</div></pre></td></tr></table></figure><h4 id="开放指定的端口"><a href="#开放指定的端口" class="headerlink" title="开放指定的端口"></a>开放指定的端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#允许本地回环接口(即运行本机访问本机)</span></div><div class="line">iptables -A INPUT -i lo -j ACCEPT</div><div class="line"><span class="comment"># 允许已建立的或相关连的通行</span></div><div class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class="line"><span class="comment">#允许所有本机向外的访问</span></div><div class="line">iptables -A OUTPUT -j ACCEPT</div><div class="line"><span class="comment"># 允许访问22端口</span></div><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line"><span class="comment">#允许访问80端口</span></div><div class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</div><div class="line"><span class="comment">#允许访问443端口</span></div><div class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</div><div class="line"><span class="comment">#允许FTP服务的21和20端口</span></div><div class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 20 -j ACCEPT</div><div class="line"><span class="comment">#如果有其他端口的话，规则也类似，稍微修改上述语句就行</span></div><div class="line"><span class="comment">#允许ping</span></div><div class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</div><div class="line"><span class="comment">#禁止其他未允许的规则访问</span></div><div class="line">iptables -A INPUT -j REJECT  <span class="comment">#（注意：如果22端口未加入允许规则，SSH链接会直接断开。）</span></div><div class="line">iptables -A FORWARD -j REJECT</div></pre></td></tr></table></figure><h4 id="屏蔽IP"><a href="#屏蔽IP" class="headerlink" title="屏蔽IP"></a>屏蔽IP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果只是想屏蔽IP的话“3、开放指定的端口”可以直接跳过。</span></div><div class="line"><span class="comment">#屏蔽单个IP的命令是</span></div><div class="line">iptables -I INPUT -s 123.45.6.7 -j DROP</div><div class="line"><span class="comment">#封整个段即从123.0.0.1到123.255.255.254的命令</span></div><div class="line">iptables -I INPUT -s 123.0.0.0/8 -j DROP</div><div class="line"><span class="comment">#封IP段即从123.45.0.1到123.45.255.254的命令</span></div><div class="line">iptables -I INPUT -s 124.45.0.0/16 -j DROP</div><div class="line"><span class="comment">#封IP段即从123.45.6.1到123.45.6.254的命令是</span></div><div class="line">iptables -I INPUT -s 123.45.6.0/24 -j DROP</div></pre></td></tr></table></figure><h4 id="查看已添加的iptables规则"><a href="#查看已添加的iptables规则" class="headerlink" title="查看已添加的iptables规则"></a>查看已添加的iptables规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">iptables -L -n</div><div class="line">v：显示详细信息，包括每条规则的匹配包数量和匹配字节数</div><div class="line">x：在 v 的基础上，禁止自动单位换算（K、M） vps侦探</div><div class="line">n：只显示IP地址和端口号，不将ip解析为域名</div><div class="line">iptables -I INPUT -s 123.45.6.0/24 -j DROP</div></pre></td></tr></table></figure><h4 id="删除已添加的iptables规则"><a href="#删除已添加的iptables规则" class="headerlink" title="删除已添加的iptables规则"></a>删除已添加的iptables规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">将所有iptables以序号标记显示，执行：</div><div class="line">iptables -L -n --line-numbers</div><div class="line">比如要删除INPUT里序号为8的规则，执行：</div><div class="line">iptables -D INPUT 8</div></pre></td></tr></table></figure><p>iptables的开机启动及规则保存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">CentOS上可能会存在安装好iptables后，iptables并不开机自启动，可以执行一下：</div><div class="line">chkconfig --level 345 iptables on</div><div class="line">将其加入开机启动。</div><div class="line">CentOS上可以执行：service iptables save保存规则。</div><div class="line">另外更需要注意的是Debian/Ubuntu上iptables是不会保存规则的。</div><div class="line">需要按如下步骤进行，让网卡关闭是保存iptables规则，启动时加载iptables规则：</div><div class="line">创建/etc/network/<span class="keyword">if</span>-post-down.d/iptables 文件，添加如下内容：</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">iptables-save &gt; /etc/iptables.rules</div><div class="line">执行：chmod +x /etc/network/<span class="keyword">if</span>-post-down.d/iptables 添加执行权限。</div><div class="line">创建/etc/network/<span class="keyword">if</span>-pre-up.d/iptables 文件，添加如下内容：</div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">iptables-restore &lt; /etc/iptables.rules</div><div class="line">执行：chmod +x /etc/network/<span class="keyword">if</span>-pre-up.d/iptables 添加执行权限。</div></pre></td></tr></table></figure></p><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>yum命令是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。<br>yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。<br>配置本地yum源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1、挂载DVD光盘</div><div class="line">mount /dev/cdrom /mnt/cdrom   //mnt/cdrom是我自定义的目录，挂载光驱成功之后，成功会在cdrom下面出现一个Packages文件包</div><div class="line">2、在目录/etc/yum.repos.d/创建文件文件名(任意名).repo </div><div class="line">3、配置本地yum源</div><div class="line"><span class="built_in">cd</span> /etc/yum.repos.d/   <span class="comment">#进入yum配置目录 </span></div><div class="line">touch  centos.repo   <span class="comment">#建立yum配置文件 </span></div><div class="line">vim  centos.repo   <span class="comment">#编辑配置文件，添加以下内容 </span></div><div class="line">[centos-yum]</div><div class="line">name=centos   <span class="comment">#自定义名称 </span></div><div class="line">baseurl=file:///mnt<span class="comment">#本地光盘挂载路径 </span></div><div class="line">enabled=1   <span class="comment">#启用yum源，0为不启用，1为启用 </span></div><div class="line">gpgcheck=0  <span class="comment">#检查GPG-KEY，0为不检查，1为检查 </span></div><div class="line">:wq! <span class="comment">#保存退出 </span></div><div class="line"></div><div class="line">4、测试使用yum命令自动安装软件</div><div class="line">yum clean all   <span class="comment">#清除yum缓存 </span></div><div class="line">yum makecache  <span class="comment">#缓存本地yum源中的软件包信息</span></div></pre></td></tr></table></figure></p><p>这里提示一下，假如要用yum安装dhcp的时候提示失败，很可能是因为安装源是网络源，而不是挂载的本地源，这时候要把默认的网络源禁掉就可以了，所谓禁掉就是把网络源的配置文件改个名字，它找不到了本地源就生效了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/linux/3.png" alt="把网络源文件CentOS-Base.repo改名成CentOS-Base.repo.bak" title="">                </div>                <div class="image-caption">把网络源文件CentOS-Base.repo改名成CentOS-Base.repo.bak</div>            </figure></p><h4 id="yum-选项-参数"><a href="#yum-选项-参数" class="headerlink" title="yum(选项)(参数)"></a>yum(选项)(参数)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-h：显示帮助信息； </div><div class="line">-y：对所有的提问都回答“yes”； </div><div class="line">-c：指定配置文件；</div><div class="line">-q：安静模式；</div><div class="line">-v：详细模式；</div><div class="line">-d：设置调试等级（0-10）； </div><div class="line">-e：设置错误等级（0-10）；</div><div class="line">-R：设置yum处理一个命令的最大等待时间；</div><div class="line">-C：完全从缓存中运行，而不去下载或者更新任何头文件。</div></pre></td></tr></table></figure><h4 id="yum参数"><a href="#yum参数" class="headerlink" title="yum参数"></a>yum参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">install：安装rpm软件包； </div><div class="line">update：更新rpm软件包；</div><div class="line">check-update：检查是否有可用的更新rpm软件包；</div><div class="line">remove：删除指定的rpm软件包；</div><div class="line">list：显示软件包的信息；</div><div class="line">search：检查软件包的信息；</div><div class="line">info：显示指定的rpm软件包的描述信息和概要信息；</div><div class="line">clean：清理yum过期的缓存；</div><div class="line">shell：进入yum的shell提示符； </div><div class="line">resolvedep：显示rpm软件包的依赖关系； </div><div class="line">localinstall：安装本地的rpm软件包； </div><div class="line">localupdate：显示本地rpm软件包进行更新； </div><div class="line">deplist：显示rpm软件包的所有依赖关系。</div></pre></td></tr></table></figure><h4 id="部分常用的yum命令"><a href="#部分常用的yum命令" class="headerlink" title="部分常用的yum命令"></a>部分常用的yum命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">自动搜索最快镜像插件：yum install yum-fastestmirror </div><div class="line">安装yum图形窗口插件：yum install yumex </div><div class="line">查看可能批量安装的列表：yum grouplist </div><div class="line">安装 yum install </div><div class="line">全部安装 yum install package1 </div><div class="line">安装指定的安装包package1 yum groupinsall group1</div><div class="line">安装程序组group1 更新和升级 yum update </div><div class="line">全部更新 yum update package1 </div><div class="line">更新指定程序包package1 yum check-update </div><div class="line">检查可更新的程序 yum upgrade package1 </div><div class="line">升级指定程序包package1 yum groupupdate group1 </div><div class="line">升级程序组group1 查找和显示 yum info package1 </div><div class="line">显示安装包信息package1 yum list </div><div class="line">显示所有已经安装和可以安装的程序包 yum list package1 </div><div class="line">显示指定程序包安装情况package1 yum groupinfo group1</div><div class="line">显示程序组group1信息yum search string 根据关键字string查找安装包 删除程序 yum remove | erase package1 </div><div class="line">删除程序包package1 yum groupremove group1</div><div class="line">删除程序组group1 yum deplist package1 </div><div class="line">查看程序package1依赖情况 清除缓存 yum clean packages</div><div class="line">清除缓存目录下的软件包 yum clean headers </div><div class="line">清除缓存目录下的 headers yum clean oldheaders </div><div class="line">清除缓存目录下旧的 headers</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux是一套基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU,可以免费使用和自由传播的类Unix操作系统。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=29539085&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="文件系统" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="一丢丢shell" scheme="http://yoursite.com/tags/%E4%B8%80%E4%B8%A2%E4%B8%A2shell/"/>
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
      <category term="yum" scheme="http://yoursite.com/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>Web安全之XSS、SQL注入</title>
    <link href="http://yoursite.com/2018/07/01/Web%E5%AE%89%E5%85%A8%E4%B9%8BXSS%E3%80%81SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2018/07/01/Web安全之XSS、SQL注入/</id>
    <published>2018-07-01T08:16:36.000Z</published>
    <updated>2018-07-01T17:24:03.360Z</updated>
    
    <content type="html"><![CDATA[<p>XSS跨站脚本攻击，是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=559926957&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="XSS的攻击方法"><a href="#XSS的攻击方法" class="headerlink" title="XSS的攻击方法"></a>XSS的攻击方法</h3><p>XSS主要分为反射型和存储型两种，它与SQL注入攻击类似，SQL注入攻击中以SQL语句作为用户输入，从而达到的目的，而在xss攻击中，通过插入恶意脚本，实现对用户游览器的控制，获取用户的一些信息。</p><h3 id="1、反射型"><a href="#1、反射型" class="headerlink" title="1、反射型"></a>1、反射型</h3><p> 发出请求时，xss代码出现在url中，作为输入提交到服务器端，服务器端解析后响应，xss代码随响应内容一起传回给浏览器，最后浏览器解析执行xss代码。这个过程像一次反射。<br>（1）xss代码出现在url中，反射型代码特征=明文<br>（2）服务器端解析后响应，例如在serch中，参数serch传入，同value部分被一起传回。</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>用express做了一个轻量级服务架构实例模拟xss的反射型攻击，装上依赖之后就可以跑起来。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/websave/express2.JPG" alt="express艺术" title="">                </div>                <div class="image-caption">express艺术</div>            </figure><br>路由下的接口通过query获取用户在浏览器中输入的serch的内容</p><h4 id="路由router-index-js"><a href="#路由router-index-js" class="headerlink" title="路由router/index.js"></a>路由router/index.js</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var router = express.Router();</div><div class="line">/* GET home page. */</div><div class="line">router.get(<span class="string">'/'</span>, <span class="keyword">function</span>(req, res, next) &#123;</div><div class="line">  res.render(<span class="string">'index'</span>, &#123; title: <span class="string">'Express'</span>,xss:req.query.xss&#125;);</div><div class="line">&#125;);</div><div class="line">module.exports = router;</div></pre></td></tr></table></figure><h4 id="视图views-index-js"><a href="#视图views-index-js" class="headerlink" title="视图views/index.js"></a>视图views/index.js</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">""</span>&gt;</div><div class="line">    &lt;%- xss %&gt;   //将那个接口获取的字段解析显示</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/websave/express3.JPG" alt="用xss拼接上12之后" title="">                </div>                <div class="image-caption">用xss拼接上12之后</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/websave/express4.JPG" alt="xss" title="">                </div>                <div class="image-caption">xss</div>            </figure><p>拼接上了恶意代码，被浏览器拦截，这里关掉浏览器的拦截，再重启服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/'</span>, <span class="keyword">function</span>(req, res, next) &#123;</div><div class="line">  res.set(<span class="string">'X-XSS-Protection'</span>,0);</div><div class="line">  res.render(<span class="string">'index'</span>, &#123; title: <span class="string">'Express'</span>,xss:req.query.xss&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>拼接上的html和js成功被执行<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/websave/express5.JPG" alt="xss" title="">                </div>                <div class="image-caption">xss</div>            </figure><br>假如拼接上Iframe，植入广告，这里举例植入百度（我的百度皮肤是自己设置过的，所以可能不一样）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/websave/express6.JPG" alt="百度成功被嵌入到了页面上" title="">                </div>                <div class="image-caption">百度成功被嵌入到了页面上</div>            </figure></p><h3 id="2、存储型"><a href="#2、存储型" class="headerlink" title="2、存储型"></a>2、存储型</h3><p> 存储型xss和反射型xss的差别仅在于，提交的代码会存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交xss代码，和反射型的差别仅在于提交的代码的存储位置。<br> 存储型的代码不是query数据了，而是sql语句,两者的视图渲染流程一样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/'</span>, <span class="keyword">function</span>(req, res, next) &#123;</div><div class="line">  res.set(<span class="string">'X-XSS-Protection'</span>,0);</div><div class="line">  res.render(<span class="string">'index'</span>, &#123; title: <span class="string">'Express'</span>,xss:sql()&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="反射型与存储型的区别"><a href="#反射型与存储型的区别" class="headerlink" title="反射型与存储型的区别"></a>反射型与存储型的区别</h3><p>代码不同：<br>1、反射型，通过req.query.xss获取用户输入进行的脚本攻击<br>2、存储型，xss：sql()，通过读缓存或者数据库进行的</p><h3 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h3><h4 id="1、编码"><a href="#1、编码" class="headerlink" title="1、编码"></a>1、编码</h4><p>   对用户输入的数据进行Html Entity编码<br>   <img src="/images/websave/HTML_UTITY.jpg" alt="Html Entity"></p><h4 id="2、过滤"><a href="#2、过滤" class="headerlink" title="2、过滤"></a>2、过滤</h4><p>  （1）移除用户上传的dom属性，如onerror等<br>  （2）移除用户上传的Style节点、Script节点、Iframe节点等<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">假如style&#123;body:display:none !important&#125;</div><div class="line">假如Script引入一个破坏的js，js对页面有100%操作权限，非同意的</div><div class="line">假如iframe植入广告，假如植入之后诱导用户鼠标滑过某个地方就会触发某些事件处理函数</div></pre></td></tr></table></figure></p><h4 id="3、校正"><a href="#3、校正" class="headerlink" title="3、校正"></a>3、校正</h4><p>  (1)避免直接对HTML Entity解码（如果直接进行解码，过滤就没意义了）<br> （2）使用DOM Parse转换，转正不配对的DOM标签<br>  DOM Parse=把整个字符串或者文本转成dom结构，执行过滤，然后匹配不合适标签</p><p>页面中反转译输入内容，前端过滤不安全的标签以及不安全的属性，<br>不安全的标签有：script，style，link，iframe，frame，img等，只要是自动加载的，改变页面样式，能够执行js的标签<br>不安全的属性：onerror，onclick等，只要是能够执行js的属性</p><p><a href="https://github.com/HHardyy/XSS_demo" target="_blank" rel="external">express框架实现的demo地址</a></p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>攻击者通过在应用程序中预先定义好的查询语句中加上额外的SQL语句元素，欺骗数据库服务器执行非授权的任意查询。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>通过畸形输入巧妙构造符合攻击要求的特殊SQL语句让数据库执行。<br>比如 你的检测语句是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select  * from  user <span class="built_in">where</span> name=<span class="string">'变量1'</span> and password=<span class="string">'变量2'</span></div></pre></td></tr></table></figure></p><p>如果能找到记录则判定登陆成功。<br>那么对方如果在填写用户名和密码的时候写密码’1’ or ‘1’=’1’,把这个替换到最后形成的sql语句就变成了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select  * from  user <span class="built_in">where</span> name=<span class="string">'1'</span> or <span class="string">'1'</span>=<span class="string">'1'</span> and password=<span class="string">'1'</span> or <span class="string">'1'</span>=<span class="string">'1'</span></div></pre></td></tr></table></figure></p><p>由于1=1是恒等的。也就会把所有记录给查出来。这样就可以达到不知道密码或者是用户名的情况下完成登陆。</p><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><p>对输入缺乏检查过滤。</p><h4 id="危害性"><a href="#危害性" class="headerlink" title="危害性"></a>危害性</h4><p>通过合法途径执行非法语句，使安全措施失效，隐蔽性强。</p><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><p>做好应用系统输入的检查、尽量不要用系统管理员用户连接数据库、尽量不要使用扩展存储过程</p><h4 id="So"><a href="#So" class="headerlink" title="So?"></a>So?</h4><p>1、SQL注入将恶意代码放置在SQL中执行<br>2、跨站脚本将恶意代码嵌入到html中执行<br>3、Cookie注入将将恶意代码放置到Cookie中欺骗服务器，或实现SQL和跨站脚本注入。</p><p><span style="color: red">对输入内容进行检查是防御注入攻击的有效方法,以尽可能低的权限运行服务可有效降低服务出现安全问题可能带来的风害。</span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSS跨站脚本攻击，是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=559926957&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="XSS" scheme="http://yoursite.com/tags/XSS/"/>
    
      <category term="Sql注入" scheme="http://yoursite.com/tags/Sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Vue全家桶</title>
    <link href="http://yoursite.com/2018/06/10/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    <id>http://yoursite.com/2018/06/10/Vue全家桶/</id>
    <published>2018-06-10T08:02:10.000Z</published>
    <updated>2018-06-10T11:22:55.527Z</updated>
    
    <content type="html"><![CDATA[<p>vue全家桶也就是1.脚手架、2.路由、3.状态管理、4.请求工具~。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=559931973&auto=0&height=66"></iframe><br><a id="more"></a><br>Vue是一套用于构建用户界面的MVVM渐进式框架。与其它大型框架不同的是，Vue的核心库只关注视图层，数据驱动，目标是通过尽可能简单的API实现响应的数据绑定和组合的视图组件，不再是传统的操作dom进行界面控制，当然也不是说完全不操作dom，必要的时候还是可以操作的，同时组件化的方式让项目维护起来特别的爽，Vue便于与第三方库或既有项目整合，当与单文件组件和Vue生态系统支持的库结合使用时，Vue也完全能够为复杂的单页应用程序提供驱动。</p><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>也叫vue脚手架工具，脚手架是为了保证各施工过程顺利进行而搭设的工作平台，顾名思义在vue中是用于快速构建vue项目的工具，构建的大致步骤如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装vue脚手架</span></div><div class="line">npm install -g vue-cli</div><div class="line"></div><div class="line"><span class="comment"># 安装webpack模板，testproject=项目名</span></div><div class="line">vue init webpack testproject</div><div class="line"></div><div class="line"><span class="comment"># 安装项目需要的依赖包 </span></div><div class="line">npm install</div><div class="line"></div><div class="line"><span class="comment"># 运行项目</span></div><div class="line">npm run dev</div></pre></td></tr></table></figure></p><p>这样就可以跑出一个初始化的vue项目，拖到sublime就可以看到各目录文件<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue-family/vue-cli.png" alt="“构建的项目目录”" title="">                </div>                <div class="image-caption">“构建的项目目录”</div>            </figure><br>这个目录的意思就是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">1、build //项目构建(webpack)相关代码</div><div class="line"><span class="comment"># build.js=生产环境构建代码</span></div><div class="line"><span class="comment"># check-versions.js=检查node&amp;npm等版本</span></div><div class="line"><span class="comment"># utils.js=构建配置公用工具</span></div><div class="line"><span class="comment"># vue-loader.conf.js=vue加载器</span></div><div class="line"><span class="comment"># webpack.base.conf.js=webpack基础环境配置</span></div><div class="line"><span class="comment"># webpack.dev.conf.js=webpack开发环境配置包括构建本地服务器</span></div><div class="line"><span class="comment"># webpack.prod.conf.js=webpack生产环境配置</span></div><div class="line">2、config //项目开发环境配置相关代码</div><div class="line"><span class="comment"># dev.env.js=开发环境变量</span></div><div class="line"><span class="comment"># index.js=项目一些配置变量，上线时候的接口可以在这里配置</span></div><div class="line"><span class="comment"># prod.env.js=生产环境变量</span></div><div class="line">3、node_modules //项目所有依赖包的安装文件夹</div><div class="line">4、src //源码目录，也就是你写的代码在这里            5</div><div class="line"><span class="comment"># assets=资源目录（style、iconfonts、公用的varrybel.styl等）</span></div><div class="line"><span class="comment"># common=我自己建的用于存放公用组件的地方</span></div><div class="line"><span class="comment"># router=路由</span></div><div class="line"><span class="comment"># App.vue=项目入口文件</span></div><div class="line"><span class="comment"># main.js=程序入口文件</span></div><div class="line">5、static //静态文件，放一些图片，json数据等</div><div class="line">6、.babelrc //ES6语法编译配置</div><div class="line">7、.editorconfig //定义代码格式</div><div class="line">8、.gitignore //git上传的时候不希望上传的文件格式</div><div class="line">9、 index.html //入口页</div><div class="line">10、package.json //项目基本信息and这个项目所需要的依赖包，npm install的时候会根据这个去安装</div><div class="line">11、README.md //项目的一些说明</div></pre></td></tr></table></figure></p><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>前端路由，就是指向的意思，类似a标签，当我点击某个地方或者链接时显示相应的内容，即Home =&gt; home 内容， detail =&gt; detail。</p><p>路由中有三个基本的概念 route, routes, router<br>1、route，一条路由，home =&gt; home是一条路由，detail =&gt; detail是另一条路由。<br>2、routes 一组路由，就是一条一条路由形成一个数组。[{home =&gt;home}， { detail =&gt; detail}]<br>3、router 一个机制，用来管理路由。routes只是定义了一组静止的路由，当发生请求的时候，也就是当用户触发home的时候，router会到routes中去查找相对应的相对应的内容进行展示<br>构造一组路由：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const routes = [</div><div class="line">  &#123; path: <span class="string">'/home'</span>, component: Home &#125;,</div><div class="line">  &#123; path: <span class="string">'/detail'</span>, component: Detail&#125;</div><div class="line">]</div></pre></td></tr></table></figure></p><p>用构造函数new vueRouter()构建一个router，然后传入routes进行管理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">      routes //key值和value值相等的时候可以只写key值</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>注入根实例之后就可以使用了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const app = new Vue(&#123;</div><div class="line">  router</div><div class="line">&#125;).<span class="variable">$mount</span>(<span class="string">'#app'</span>)</div></pre></td></tr></table></figure></p><p>举例动态路由<br>安装方法移步<a href="https://router.vuejs.org/installation.html#direct-download-cdn" target="_blank" rel="external">vue官网</a>，这是我用的例子，大概结构就是有一个详情页的列表显示不同地方的旅游景点，我需要查看某个列表项的详情，这时候就用到了路由帮我带参数跳转过去，然后看到相应列表项的详情。<br>列表项组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"hot-title"</span>&gt;推荐信息&lt;/div&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">&lt;router-link</div><div class="line">tag=<span class="string">"li"</span></div><div class="line">class=<span class="string">"item border-bottom"</span> </div><div class="line">v-for=<span class="string">"item of recommend"</span> </div><div class="line">:key=<span class="string">"item.id"</span></div><div class="line">:to=<span class="string">"'/detail/'+item.id"</span></div><div class="line">&gt;</div><div class="line">&lt;img class=<span class="string">"item-img"</span> :src=<span class="string">"item.imgUrl"</span> alt=<span class="string">""</span>&gt;</div><div class="line">&lt;div class=<span class="string">"item-info"</span>&gt;</div><div class="line">&lt;p class=<span class="string">"item-title"</span>&gt;&#123;&#123;item.title&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;p class=<span class="string">"item-desc"</span>&gt;&#123;&#123;item.desc&#125;&#125;&lt;/p&gt;</div><div class="line">&lt;button class=<span class="string">"item-button"</span>&gt;查看详情&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/router-link&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p><p>router目录下，index.js文件里头的写法，这是定义路径到组件的映射<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import Vue from <span class="string">'vue'</span></div><div class="line">import Router from <span class="string">'vue-router'</span></div><div class="line">import Home from <span class="string">'@/pages/home/home'</span></div><div class="line">import City from <span class="string">'@/pages/city/city'</span></div><div class="line">import Detail from <span class="string">'@/pages/detail/detail'</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="built_in">export</span> default new Router(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,   </div><div class="line">      name: <span class="string">'Home'</span>,</div><div class="line">      component: Home</div><div class="line">    &#125;，</div><div class="line">    &#123;</div><div class="line">      path:<span class="string">'/detail/:id'</span>,</div><div class="line">      name:<span class="string">"Detail"</span>,</div><div class="line">      component:Detail</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  scrollBehavior (to, from, savedPosition) &#123;</div><div class="line">      <span class="built_in">return</span> &#123; x: 0, y: 0 &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>可以参照<a href="https://github.com/HHardyy/Vue2.0-Travel-App" target="_blank" rel="external">我这个项目</a>的玩法</p><h3 id="router-view以及router-link"><a href="#router-view以及router-link" class="headerlink" title="router-view以及router-link"></a>router-view以及router-link</h3><h3 id="router-view："><a href="#router-view：" class="headerlink" title="router-view："></a>router-view：</h3><p>也就是项目入口文件里的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"app"</span>&gt;</div><div class="line">  &lt;keep-alive exclude=<span class="string">"detail"</span>&gt;</div><div class="line">      &lt;router-view/&gt;</div><div class="line">&lt;/keep-alive&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></p><p>是个很关键的组件，它就是用来渲染匹配到的路由的。 我这里搭配使用了keep-alive，keep-alive可以缓存数据，这样不至于重新渲染路由组件的时候，组件状态不被保存，也就是说从这个组件跳到其他组件再跳回来的的时候这个组件还是之前的状态</p><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><p>router-link是一个组件，它默认会被渲染成一个带有链接的a标签，通过to属性指定链接地址，被选中的router-link将自动添加一个class属性值.router-link-active。<br>router-link的一些配置项，用法可以看上面简单的例子</p><h4 id="to-””"><a href="#to-””" class="headerlink" title=":to=””"></a>:to=””</h4><p>使用路由必须设置的属性，否则路由无法生效，可以是一个字符串也可以是一个描述目标位置的对象。</p><h4 id="tag-”li”"><a href="#tag-”li”" class="headerlink" title="tag=”li”"></a>tag=”li”</h4><p>一般router-link默认被渲染成a标签，tag属性可以用来设置router-link会被渲染成什么标签</p><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>是个Boolean值，默认是false。当replace设置为true，那么导航不会留下history记录，点击浏览器回退按钮不会再回到这个路由。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link to=<span class="string">"xxx"</span> replace&gt;&lt;/router-link&gt;</div></pre></td></tr></table></figure></p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>Vuex是Vue.js应用程序的状态管理模式+库。作为应用程序中所有组件的集中存储区，并且规则确保只能以可预测的方式对状态进行变更。也就是可以全局数据管理，其实就是一个单向数据的改变流程。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue-family/vuex.JPG" alt="“根据官网提供的vuex生命周期视图”" title="">                </div>                <div class="image-caption">“根据官网提供的vuex生命周期视图”</div>            </figure><br>1、state：类似vue对象的data, 用来存放数据以及状态。存放的数据为响应式，如果数据改变，那么依赖数据的组件也会发生相应的改变。<br>获取state的两种方式例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.store.getters[<span class="string">'xxx'</span>]</div><div class="line">2. ...mapGetters(&#123;</div><div class="line">        UserInfo: <span class="string">'xxx'</span>, // 用户信息</div><div class="line">        menuList: <span class="string">'xxx'</span>, // approve 运价审批</div><div class="line">        RateUserInfo: <span class="string">'xxxx'</span> // Rate用户信息</div><div class="line">   &#125;)</div><div class="line">可以通过mapState把全局的state和getters映射到当前组件的computed计算属性中。</div></pre></td></tr></table></figure></p><p>2、actions<br>通过store.dispatch方法触发,action支持异步调用（可以调用api），mutation只支持操作同步，并且action提交的是mutation，而不是直接变更状态。Action函数接受一个与store 实例具有相同方法和属性的context对象，因此可以调用context.commit提交一个mutation，或者通过context.state和context.getters来获取state和getters。<br>3、mutation<br>每个mutation都有一个字符串的事件类型(type)和一个回调函数(handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受state作为第一个参数。<br>4、Vuex允许在store中定义“getter”（可以认为是store的计算属性）。就像计算属性一样，getter的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><p>举例：为了方便在src目录下新建一个store目录，里头新建一个index.js,然后使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import Vue from <span class="string">'vue'</span></div><div class="line">import Vuex from <span class="string">'vuex'</span>//引入Vuex</div><div class="line"></div><div class="line">Vue.use(Vuex)//让vue使用vuex</div><div class="line"></div><div class="line"><span class="built_in">export</span> default new Vuex.Store(&#123;</div><div class="line">state:&#123;    //全局数据</div><div class="line">key:<span class="string">'value'</span></div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>写完这些之后在main.js里头写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import store from <span class="string">'./store'</span></div><div class="line"></div><div class="line">创建根vue实例的时候和使用vuetouter一样，当key=value的时候只需要写一个就好了</div><div class="line">new Vue(&#123;</div><div class="line">  store</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>这样子它就会将数据 自动派发到每个子组件，比如子组件需要使用key的值，可以直接，就ko了。</p><p>假如要改变多个页面的额数据，在上面的基础之上根据官网提供的vuex生命周期触发点击事件的组件里面写这样的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">methods:&#123;</div><div class="line">handelCheckHotcity(city)&#123;</div><div class="line">this.<span class="variable">$store</span>.dispatch(<span class="string">'changeCity'</span>,city)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>store文件下的index.js的公共数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import Vue from <span class="string">'vue'</span></div><div class="line">import Vuex from <span class="string">'vuex'</span></div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line"><span class="built_in">export</span> default new Vuex.Store(&#123;</div><div class="line">state:&#123;</div><div class="line">city:<span class="string">'香港'</span></div><div class="line">&#125;,</div><div class="line">actions:&#123;</div><div class="line">changeCity(ctx,city)&#123;       //ctx是上下文，city是传入的参数</div><div class="line">ctx.commit(<span class="string">'changeCity'</span>,city)</div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">mutations:&#123;</div><div class="line">changeCity(state,city)&#123;</div><div class="line">state.city=city</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>组件也可以不用先dispatch触发changeCity方法，可以直接commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$store</span>.commit(<span class="string">'changeCity'</span>,city)</div></pre></td></tr></table></figure></p><p>store文件下的index.js公共数据actions，直接写mutations对象，然后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">changeCity(state,city)&#123;</div><div class="line"> state.city=city</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>vuex还有个好处就是可以在不同组件@click这个方法来对写了vuex逻辑的index.js文件里的数据进行修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">handelCheckHotcity(city)&#123;</div><div class="line">this.<span class="variable">$store</span>.dispatch(<span class="string">'changeCity'</span>,city)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>axios是一个基于Promise用于浏览器和nodejs的HTTP客户端，可以实现跨平台数据请求，node平台上可以发送http请求，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install axios --save</div></pre></td></tr></table></figure></p><p>了解过ajax的道友应该都懂了，这里我在mounted里面触发了一个methods里面的getDetailData方法，向接口请求数据来实现交互效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">getDetailData</span></span>()&#123;</div><div class="line">axios.get(<span class="string">'接口地址'</span>,&#123;</div><div class="line">params:&#123;</div><div class="line">id:this.<span class="variable">$route</span>.params.id</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">.<span class="keyword">then</span>((res)=&gt;&#123;</div><div class="line">console.log(res)</div><div class="line">&#125;)</div><div class="line">.catch((err)=&gt;&#123;</div><div class="line">console.log(err)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">axios.post(<span class="string">'/user'</span>, &#123;</div><div class="line">    name: <span class="string">'hhardyy'</span>,</div><div class="line">    sex: <span class="string">'male'</span></div><div class="line">  &#125;)</div><div class="line">  .<span class="keyword">then</span>((res)=&gt;&#123;</div><div class="line">    console.log(res)</div><div class="line">&#125;)</div><div class="line">.catch((err)=&gt;&#123;</div><div class="line">console.log(err)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="请求多个并发"><a href="#请求多个并发" class="headerlink" title="请求多个并发"></a>请求多个并发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">getUserAccount</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> axios.get(<span class="string">'/user/12345'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">getUserPermissions</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">axios.all([getUserAccount(), getUserPermissions()])</div><div class="line">  .<span class="keyword">then</span>(axios.spread(<span class="keyword">function</span> (acct, perms) &#123;</div><div class="line">    // 两个请求现在都执行完成</div><div class="line">  &#125;));</div></pre></td></tr></table></figure><p>最近一直在熬夜，准确的说今年一直在熬夜ლ(′◉❥◉｀ლ)，渐渐觉得深夜才能创造灵感，不过白天眼睛痛~感觉都要开启永恒万花筒写轮眼了~<br><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="external">更多用法可以参照这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue全家桶也就是1.脚手架、2.路由、3.状态管理、4.请求工具~。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=559931973&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="vue-cli" scheme="http://yoursite.com/tags/vue-cli/"/>
    
      <category term="vue-router" scheme="http://yoursite.com/tags/vue-router/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Vue全家桶开发旅游app</title>
    <link href="http://yoursite.com/2018/06/10/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%BC%80%E5%8F%91%E6%97%85%E6%B8%B8app/"/>
    <id>http://yoursite.com/2018/06/10/Vue全家桶开发旅游app/</id>
    <published>2018-06-09T18:26:24.000Z</published>
    <updated>2018-06-10T10:30:56.901Z</updated>
    
    <content type="html"><![CDATA[<p>vue全家桶做的一个web版旅游app</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=558261233&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="css辅助工具依赖包stylus"><a href="#css辅助工具依赖包stylus" class="headerlink" title="css辅助工具依赖包stylus"></a>css辅助工具依赖包stylus</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install stylus --save</div><div class="line">npm install stylus-loader --save</div></pre></td></tr></table></figure><h3 id="首页轮播-第三方插件vue-awesome-swiper-2-6-7稳定版"><a href="#首页轮播-第三方插件vue-awesome-swiper-2-6-7稳定版" class="headerlink" title="首页轮播=第三方插件vue-awesome-swiper,2.6.7稳定版"></a>首页轮播=第三方插件vue-awesome-swiper,2.6.7稳定版</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-awesome-swiper@2.6.7 --save</div></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install axios --save</div></pre></td></tr></table></figure><h3 id="Better-scroll滚屏"><a href="#Better-scroll滚屏" class="headerlink" title="Better-scroll滚屏"></a>Better-scroll滚屏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install better-scroll --save</div><div class="line"></div><div class="line"><span class="keyword">if</span>(this.latter)&#123;</div><div class="line">    this.scroll.scrollToElement()</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="手指滑动事件"><a href="#手指滑动事件" class="headerlink" title="手指滑动事件"></a>手指滑动事件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">touchstart</div><div class="line">touchmove</div><div class="line">touchend</div><div class="line"></div><div class="line">函数节流，限制执行效率touchmove执行效率过高了</div><div class="line">ref=<span class="string">"xxx"</span></div><div class="line">import bscroll from <span class="string">'better-scroll'</span></div><div class="line"><span class="function"><span class="title">mounted</span></span>()&#123;</div><div class="line">this.bscroll=new bscroll(this.<span class="variable">$refs</span>.xxx)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="解决的一些问题"><a href="#解决的一些问题" class="headerlink" title="解决的一些问题:"></a>解决的一些问题:</h2><h3 id="pagination分页"><a href="#pagination分页" class="headerlink" title="pagination分页"></a>pagination分页</h3><p>移步swiper中文网<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">解决swiper加载之前，gallary组件先渲染导致banner的时候出现bug的问题</div><div class="line">搜observeParents以及observer意思是当父组件dom刷新的时候，swiper重新刷新一次</div><div class="line">observeParents:<span class="literal">true</span></div><div class="line">observer：<span class="literal">true</span></div></pre></td></tr></table></figure></p><h3 id="对全局事件的解绑"><a href="#对全局事件的解绑" class="headerlink" title="对全局事件的解绑"></a>对全局事件的解绑</h3><p>由于使用了keep-alive产生的生命周期钩子activated，绑定的事件处理函数是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.addEventListener(<span class="string">'scroll'</span>, this.handelScroll)</div></pre></td></tr></table></figure></p><p>因为绑定的是window对象，这样不光本页滚动会触发该事件处理函数，回到主页也会触发该事件处理函数，所以是默默的写了一个影响引擎的错误。<br>全局解绑就是deactivated，在上面那个方法后面加上这个方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.removeEventListener(<span class="string">'scroll'</span>, this.handelScroll)</div></pre></td></tr></table></figure></p><p>它会在页面重新加载的时候重新加载事件处理函数</p><h3 id="APP-vue对路由下的组件避免缓存"><a href="#APP-vue对路由下的组件避免缓存" class="headerlink" title="APP.vue对路由下的组件避免缓存"></a>APP.vue对路由下的组件避免缓存</h3><p>可以加上exclude，对其中的某个组件进行避免缓存，这样其mounted方法就不会一直缓存在同一个状态，导致路由跳转的状态不变从而axios获取数据的时候key值不被改变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=<span class="string">"app"</span>&gt;</div><div class="line">  &lt;keep-alive exclude=<span class="string">"detail"</span>&gt;</div><div class="line">      &lt;router-view/&gt;</div><div class="line">&lt;/keep-alive&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></p><h3 id="移动端使用click会延迟300毫秒之后才执行"><a href="#移动端使用click会延迟300毫秒之后才执行" class="headerlink" title="移动端使用click会延迟300毫秒之后才执行"></a>移动端使用click会延迟300毫秒之后才执行</h3><p>解决：引入faserclick<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install fastclick --save</div></pre></td></tr></table></figure></p><p>把这个包安装到项目依赖，因为线上线下都要用就–save保存到package.json<br>项目入口文件里<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import FastClick from <span class="string">'fastclick'</span></div><div class="line">FastClick.attach(document.body)</div></pre></td></tr></table></figure></p><h3 id="git-push之后的这个问题"><a href="#git-push之后的这个问题" class="headerlink" title="git push之后的这个问题"></a>git push之后的这个问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">....... ....  hhardyy/Travel (master|MERGING)</div></pre></td></tr></table></figure><p>原因是可能同时上传了更新的文件导致冲突，这时候可以查看一下工作目录里面“README.md”文件的内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  </div><div class="line">这是第二个人提交的......................  </div><div class="line">=======  </div><div class="line">这是第一个人提交的  </div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/master</div></pre></td></tr></table></figure></p><p>这时候git status查看哪个文件有报错，去到那个文件里面把多余的类似于&gt;&gt;&gt; head的代码干掉，重新add .然后提交就ok了</p><h3 id="阻止页面默认行为"><a href="#阻止页面默认行为" class="headerlink" title="阻止页面默认行为"></a>阻止页面默认行为</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">修复bug：在城市选择选择页从字母上滚动的时候屏幕默认会跟着上下移动，需要的效果是手指从字母上移动的时候根据移动到的字母左边显示出相应字母开头拼音的城市</div><div class="line">@touchstart.prevent=<span class="string">"handelTouchStart"</span></div><div class="line">.prevent=事件修饰符，可以阻止页面默认行为</div></pre></td></tr></table></figure><h3 id="真机测试的时候有些浏览器默认不支持promise"><a href="#真机测试的时候有些浏览器默认不支持promise" class="headerlink" title="真机测试的时候有些浏览器默认不支持promise"></a>真机测试的时候有些浏览器默认不支持promise</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">安装这个依赖</div><div class="line">npm install babel-polyfill --save</div></pre></td></tr></table></figure><p>它会判断浏览器如果没有promise，会自动增加这个es6的新特性<br>进入入口文件main.js里头import ‘babel-polyfill’在所有浏览器上就都支持promise了，以及解决部分白屏问题。<br><a href="https://github.com/HHardyy/Vue2.0-Travel-App" target="_blank" rel="external">项目地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue全家桶做的一个web版旅游app&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=558261233&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="app" scheme="http://yoursite.com/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>vue组件通信</title>
    <link href="http://yoursite.com/2018/05/19/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2018/05/19/vue组件通信/</id>
    <published>2018-05-18T16:56:35.000Z</published>
    <updated>2018-09-21T05:01:00.305Z</updated>
    
    <content type="html"><![CDATA[<p>这里我没用脚手架，可以用html和js的思维了解，最重要的是这次的音乐是我最喜欢的Flower Dance</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=420401412&auto=0&height=66"></iframe><br><a id="more"></a><br>据说父子组件通信很难理解，瑟瑟发抖的写一下<br>先说它们的通信方式不是移动联通电信~</p><h3 id="父组件把数据传给子组件用props"><a href="#父组件把数据传给子组件用props" class="headerlink" title="父组件把数据传给子组件用props"></a>父组件把数据传给子组件用props</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/props_img/props.JPG" alt="“props的一些属性”" title="">                </div>                <div class="image-caption">“props的一些属性”</div>            </figure> <p>用法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//subassembly是一个注册了的子组件</div><div class="line"> &lt;subassembly v-for=<span class="string">"(item,index) in list"</span> :content=<span class="string">"item"</span>&gt;&lt;/subassembly&gt;</div><div class="line"> Vue.component(<span class="string">'subassembly'</span>, &#123;</div><div class="line">        props: [<span class="string">'content'</span>],</div><div class="line">        template: <span class="string">'&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;'</span></div><div class="line">&#125;);</div><div class="line">item是父组件v-for循环出来的东西</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/props_img/1.png" alt="“拿到父组件循环的item数据显示”" title="">                </div>                <div class="image-caption">“拿到父组件循环的item数据显示”</div>            </figure>  <p>这个会做成单独的组件是为了应付数据多的时候单独做成一个组件比较好</p><h3 id="子组件可以使用-emit-触发父组件的自定义事件-也可以用on事件监听"><a href="#子组件可以使用-emit-触发父组件的自定义事件-也可以用on事件监听" class="headerlink" title="子组件可以使用 $emit 触发父组件的自定义事件,也可以用on事件监听"></a>子组件可以使用 $emit 触发父组件的自定义事件,也可以用on事件监听</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vm.<span class="variable">$emit</span>( event, arg ) //触发当前实例上的事件处理函数</div><div class="line">vm.<span class="variable">$on</span>( event, func ) //监听event事件后执行事件处理函数</div></pre></td></tr></table></figure><p>这里用$emit举例假如要删掉生成的数据，这时候需要在子组件写这样的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'subassembly'</span>, &#123;</div><div class="line">        props: [<span class="string">'content'</span>, <span class="string">'index'</span>],</div><div class="line">        template: <span class="string">'&lt;li @click="handleFunction"&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;'</span>,</div><div class="line">        methods: &#123;</div><div class="line">            handleFunction: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                this.<span class="variable">$emit</span>(<span class="string">'delete'</span>, this.index)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>这样子组件被点击的时候就会触发delete,此时父组件v-on了一个delete触发父组件的delfunction方法，并且传过去一个index<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;subassembly</div><div class="line">        v-for=<span class="string">"(item,index) in list"</span> :key=<span class="string">"index"</span> :content=<span class="string">"item"</span></div><div class="line">        :index=<span class="string">"index"</span></div><div class="line">        @delete=<span class="string">"delfunction"</span>&gt;</div><div class="line">&lt;/subassembly&gt;</div><div class="line"></div><div class="line">Vue.component(<span class="string">'subassembly'</span>, &#123;</div><div class="line">        props: [<span class="string">'content'</span>, <span class="string">'index'</span>],</div><div class="line">        template: <span class="string">'&lt;li @click="handleFunction"&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;'</span>,</div><div class="line">        methods: &#123;</div><div class="line">            handleFunction: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                this.<span class="variable">$emit</span>(<span class="string">'delete'</span>, this.index)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p><p>delfunction：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">delfunction: <span class="keyword">function</span> (index) &#123;</div><div class="line">        alert(<span class="string">"删掉了"</span>);</div><div class="line">        this.list.splice(index, 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>父组件接收到子组件传过来的index之后就删掉相应数据，vue是数据驱动的，这么干就实现了删除功能<br>有点绕。</p><h3 id="非父子组件通信"><a href="#非父子组件通信" class="headerlink" title="非父子组件通信"></a>非父子组件通信</h3><p>非父子组件通信可以用vuex和下面举例的这个方法，当然一般用vuex比较好。<br>官网的api指出可以使用空vue实例作为事件中央线！也就是说非父子组件之间的通信，必须要有公共的实例（可以是空的），才能使用 $emit 获取 $on 的数据参数，实现组件通信。<br>比如现在创建了cail组件，希望让他们的值可以互传<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;cail content=<span class="string">"brother1"</span>&gt;&lt;/cail&gt;</div><div class="line">&lt;cail content=<span class="string">"brother2"</span>&gt;&lt;/cail&gt;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/props_img/2.JPG" alt="“效果图”" title="">                </div>                <div class="image-caption">“效果图”</div>            </figure>  <p>先定义一个公共的中央线<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.prototype.bus = new Vue();</div></pre></td></tr></table></figure></p><p>给组件绑定上一个sonclick事件，然后通过$emit传参<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sonhandl: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    this.bus.<span class="variable">$emit</span>(<span class="string">'sonclick'</span>, this.soncontent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>因为vue是单向数据流关系，不允许子修改父组件的数据，虽然不会报错，但是会报警告，所以在声明子组件的时候只能定义一个soncontent来装父级传过来的content。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> &#123;</div><div class="line">        soncontent: this.content</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>接着用钩子函数通过$on监听sonclick事件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mounted: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    var this_ = this;</div><div class="line">    this.bus.<span class="variable">$on</span>(<span class="string">'sonclick'</span>, <span class="keyword">function</span> (msg) &#123;</div><div class="line">        this_.soncontent = msg;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>这样就实现了点击brother1的时候，组件值也传到brother2<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/props_img/3.JPG" alt="“效果”" title="">                </div>                <div class="image-caption">“效果”</div>            </figure>  </p><p>理解简单点就是兄组件绑定一个handelFunction<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div @click=<span class="string">"handelFunction"</span>&gt;&lt;/div&gt;</div><div class="line">methods: &#123;</div><div class="line">    <span class="function"><span class="title">handelFunction</span></span>() &#123;</div><div class="line">        vm.<span class="variable">$emit</span>(<span class="string">'hanFunction'</span>,<span class="string">'HHardyy'</span>); //触发事件</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>弟组件on监听hanFunction<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">created</span></span>() &#123;</div><div class="line">  vm.<span class="variable">$on</span>(<span class="string">'hanFunction'</span>, (re) =&gt; &#123; </div><div class="line">        this.test= re; // 接收HHardyy</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以理解成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var bus = new Vue()//这个可以新建一个event.js,里头<span class="built_in">let</span> bus=new Vue(); 然后把把bus向外<span class="built_in">export</span></div><div class="line"></div><div class="line">// 触发组件 A 中的事件</div><div class="line">bus.<span class="variable">$emit</span>(<span class="string">'id-selected'</span>, 1)</div><div class="line">// 在组件 B 创建的钩子中监听事件</div><div class="line">bus.<span class="variable">$on</span>(<span class="string">'id-selected'</span>, <span class="keyword">function</span> (id) &#123;</div><div class="line">  // ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里我没用脚手架，可以用html和js的思维了解，最重要的是这次的音乐是我最喜欢的Flower Dance&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=420401412&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="props" scheme="http://yoursite.com/tags/props/"/>
    
      <category term="$emit" scheme="http://yoursite.com/tags/emit/"/>
    
      <category term="$on" scheme="http://yoursite.com/tags/on/"/>
    
      <category term="父子组件通信" scheme="http://yoursite.com/tags/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
      <category term="非父子组件通信" scheme="http://yoursite.com/tags/%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>ES6的基本玩法</title>
    <link href="http://yoursite.com/2018/05/13/ES6%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%8E%A9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/13/ES6的基本玩法/</id>
    <published>2018-05-13T15:03:26.000Z</published>
    <updated>2018-11-22T11:11:04.569Z</updated>
    
    <content type="html"><![CDATA[<p>ES6是下一代JavaScript语言标准的统称，每年6月发布一次修订版，迄今为止已经发布了3个版本，分别是ES2015、ES2016、ES2017。<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=526068535&auto=0&height=66"></iframe><a id="more"></a><br>最近一边玩linux一边玩网络安全，今天突然闲下来更新一下blog，写一下ES6。ES6（ECMAScript6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。Mozilla公司将在这个标准的基础上，推出JavaScript 2.0。</p><h3 id="ECMAScript和JavaScript到底是什么关系？"><a href="#ECMAScript和JavaScript到底是什么关系？" class="headerlink" title="ECMAScript和JavaScript到底是什么关系？"></a>ECMAScript和JavaScript到底是什么关系？</h3><p>简单来说，ECMAScript是JavaScript语言的国际标准，JavaScript是ECMAScript的实现。</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与var关键字不同的是,它声明的变量只能是全局或者整个函数块的。<br>let与var的区别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">var a = 100;</div><div class="line"><span class="built_in">let</span> b = 200;</div><div class="line">&#125;</div><div class="line">console.log(a);//100</div><div class="line">console.log(b);//b </div><div class="line">is not defined -- Error</div></pre></td></tr></table></figure></p><p>let不存在变量提升<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//ES5****************************</div><div class="line">var a = [];</div><div class="line"><span class="keyword">for</span> (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">var c = i;</div><div class="line">a[i] = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">console.log(c);</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">a[5]();//9</div><div class="line">//ES6**************************</div><div class="line">var b = [];</div><div class="line"><span class="keyword">for</span> (var j = 0; j &lt; 10; j++) &#123;</div><div class="line"><span class="built_in">let</span> d = j;</div><div class="line">b[j] = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">console.log(d);</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">b[5]();//5</div></pre></td></tr></table></figure></p><p>let不受外界影响<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 100;</div><div class="line">&#123;</div><div class="line">console.log(a);//undefined</div><div class="line"><span class="built_in">let</span> a = 100;</div><div class="line">console.log(a);//100</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>let不允许重复声明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">var a = 100;</div><div class="line">var a = 200;</div><div class="line">console.log(a);</div><div class="line">&#125;// 报错</div><div class="line">模块内也不允许重复声明</div></pre></td></tr></table></figure></p><p>块级作用域<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">console.log(<span class="string">"ES5:"</span>);</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line">var num = 100;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">var num = 200;</div><div class="line">&#125;;</div><div class="line">console.log(num);</div><div class="line">&#125;;</div><div class="line">fun();//200</div><div class="line">**********************************************</div><div class="line">console.log(<span class="string">"ES6:"</span>);</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line"><span class="built_in">let</span> num = 100;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line"><span class="built_in">let</span> num = 200;</div><div class="line">&#125;;</div><div class="line">console.log(num);</div><div class="line">&#125;;</div><div class="line">fun();//100</div></pre></td></tr></table></figure></p><p>立即执行函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">console.log(<span class="string">"ES5:"</span>);</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line">console.log(<span class="string">"I am outside!"</span>);</div><div class="line">&#125;;</div><div class="line">(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line">console.log(<span class="string">"I am inside!"</span>);</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">fun();</div><div class="line">&#125;());</div><div class="line">******************************************</div><div class="line">console.log(<span class="string">"ES6:"</span>);</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line">console.log(<span class="string">"I am outside!"</span>);</div><div class="line">&#125;;</div><div class="line">(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line">console.log(<span class="string">"I am inside!"</span>);</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">fun();</div><div class="line">&#125;());</div></pre></td></tr></table></figure></p><p>立即执行函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">console.log(<span class="string">"ES5:"</span>);</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line">console.log(<span class="string">"I am outside!"</span>);</div><div class="line">&#125;;</div><div class="line">(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line">console.log(<span class="string">"I am inside!"</span>);</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">fun();</div><div class="line">&#125;());</div><div class="line">******************************************</div><div class="line">console.log(<span class="string">"ES6:"</span>);</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line">console.log(<span class="string">"I am outside!"</span>);</div><div class="line">&#125;;</div><div class="line">(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>() &#123;</div><div class="line">console.log(<span class="string">"I am inside!"</span>);</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">fun();</div><div class="line">&#125;());</div></pre></td></tr></table></figure></p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const Pi = 3.1415926535;<br>声明创建一个常量，其作用域可以是全局或本地声明的块。 与var变量不同，全局常量不会变为窗口对象的属性。需要一个常数的初始化器；也就是说，必须在声明的同一语句中指定它的值。<br>const声明创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。另外常量不能和它所在作用域内的其他变量或函数拥有相同的名称。</p><p>const块级作用域<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">const Pi = 3.14159265;</div><div class="line">&#125;;</div><div class="line">console.log(Pi);//Pi is not defined</div></pre></td></tr></table></figure></p><p>const暂时性死区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">console.log(Pi);//undefined</div><div class="line">const Pi = 3.14159265;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>const不可重复声明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">var a   = 100;</div><div class="line">const a = 200;</div><div class="line">console.log(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>const对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const person = &#123;&#125;;</div><div class="line">person.name  = <span class="string">"hhardyy"</span>;</div><div class="line">person.age   = 22;</div><div class="line">console.log(person.name);//hhardyy</div><div class="line">console.log(person.age);//22</div><div class="line">console.log(person);//Object &#123;name: <span class="string">"hhardyy"</span>, age: 22&#125;</div></pre></td></tr></table></figure></p><p>const对象错误方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const person = &#123;&#125;;</div><div class="line">person.name  = <span class="string">"hhardyy"</span>;</div><div class="line">person.age   = 22;</div><div class="line">console.log(person.name);</div><div class="line">console.log(person.age);</div><div class="line">console.log(person);</div><div class="line">person = &#123;&#125;;//person is <span class="built_in">read</span>-only</div></pre></td></tr></table></figure></p><p>const数组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const arr = [];</div><div class="line">console.log(arr);</div><div class="line">console.log(arr.length);</div><div class="line">**********************************</div><div class="line">arr.push(<span class="string">"Hello world!"</span>);</div><div class="line">console.log(arr);</div><div class="line">console.log(arr.length);</div><div class="line">**********************************</div><div class="line">arr.length = 0;</div><div class="line">console.log(arr);</div><div class="line">console.log(arr.length);// 错误用法</div><div class="line">arr = [<span class="string">"Hello Everyone!"</span>];</div></pre></td></tr></table></figure></p><p>const对象冻结<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const person = Object.freeze(&#123;&#125;);</div><div class="line">person.name  = <span class="string">"hhardyy"</span>;</div><div class="line">person.age   = 22;</div><div class="line">console.log(person.name);//undefined</div><div class="line">console.log(person.age);//undefined</div><div class="line">console.log(person);//Object</div></pre></td></tr></table></figure></p><p>使用const对象冻结<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const person = Object.freeze(&#123;</div><div class="line">name: <span class="string">"hhardyy"</span>,</div><div class="line">age : 22</div><div class="line">&#125;);</div><div class="line">console.log(person.name);//hhardyy</div><div class="line">console.log(person.age);//22</div><div class="line">console.log(person);//Object</div></pre></td></tr></table></figure></p><h3 id="跨模块常量"><a href="#跨模块常量" class="headerlink" title="跨模块常量"></a>跨模块常量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   //module.js</div><div class="line"><span class="built_in">export</span> const intVariantName = 100;</div><div class="line"><span class="built_in">export</span> const FloatVariantName = 3.14159165;</div><div class="line"><span class="built_in">export</span> const charVariantName = <span class="string">"variantValue"</span>;</div><div class="line">//use.js</div><div class="line">import * as variant from <span class="string">'./module'</span>;</div><div class="line">console.log(variant.intVariantName);//100</div><div class="line">console.log(variant.FloatVariantName);//3.14159165</div><div class="line">console.log(variant.charVariantName);//variantValue</div><div class="line">//otherUse.js</div><div class="line">import &#123; FloatVariantName, charVariantName &#125; as variant from <span class="string">'./module'</span>;</div><div class="line">console.log(variant.FloatVariantName);//3.14159165</div><div class="line">console.log(variant.charVariantName);//variantValue</div><div class="line">//OnlyInt.js</div><div class="line">import intVariantName as variant from <span class="string">'./module'</span>;</div><div class="line">console.log(variant.intVariantName);//100</div></pre></td></tr></table></figure><h3 id="全局变量属性"><a href="#全局变量属性" class="headerlink" title="全局变量属性"></a>全局变量属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var varName = <span class="string">"varValue"</span>;</div><div class="line">//浏览器环境下</div><div class="line">console.log(window.varName);//varValue</div><div class="line">//Node.js环境下</div><div class="line">//console.log(global.varName);//varValue</div><div class="line">//通用环境</div><div class="line">console.log(this.varName);//varValue</div><div class="line"><span class="built_in">let</span> letName = <span class="string">"letValue"</span>;</div><div class="line">console.log(window.letName);//undefined -- use strict</div><div class="line">console.log(this.letName);//undefined -- use strict</div></pre></td></tr></table></figure><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><p>数组解构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var [a, b, c] = [1, 2, 3];</div><div class="line">console.log(a);//1</div><div class="line">console.log(b);//2</div><div class="line">console.log(c);//3</div></pre></td></tr></table></figure></p><p>对应位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> [foo, [[bar], base]] = [1, [[2], 3]];</div><div class="line">console.log(foo);//1</div><div class="line">console.log(bar);//2</div><div class="line">console.log(base);//3</div><div class="line"><span class="built_in">let</span> [, , third] = [<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>];</div><div class="line">console.log(third);//third</div><div class="line"><span class="built_in">let</span> [one, , three] = [<span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>];</div><div class="line">console.log(one);//One</div><div class="line">console.log(three);//Three</div><div class="line"><span class="built_in">let</span> [head, ...tail] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</div><div class="line">console.log(head);//0</div><div class="line">console.log(tail);//[1, 2, 3, 4, 5, 6, 7, 8, 9]</div></pre></td></tr></table></figure></p><p>数组解构不成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   var [temp] = [];</div><div class="line">console.log(temp);//undefined</div><div class="line">var [first, second] = [100];</div><div class="line">console.log(first);//100</div><div class="line">console.log(second);//undefined</div></pre></td></tr></table></figure></p><p>不完全解构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> [x, y] = [1, 2, 3];</div><div class="line">console.log(x);//1</div><div class="line">console.log(y);//2</div><div class="line"><span class="built_in">let</span> [a, [b], c] = [1, [2, 3], 4];</div><div class="line">console.log(a);//1</div><div class="line">console.log(b);//2</div><div class="line">console.log(c);//4</div></pre></td></tr></table></figure></p><p>制定默认值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var [temp = <span class="string">"string"</span>] = [];</div><div class="line">console.log(temp);//string</div><div class="line">var [temp = <span class="string">"string"</span>] = [<span class="string">"tempString"</span>];</div><div class="line">console.log(temp);//tempString</div><div class="line">var [x = <span class="string">"aaa"</span>, y] = [<span class="string">"bbb"</span>];</div><div class="line">console.log(x);//bbb</div><div class="line">console.log(y);//undefined</div><div class="line">var [m, n = <span class="string">"aaa"</span>] = [<span class="string">"bbb"</span>];</div><div class="line">console.log(m);//bbb</div><div class="line">console.log(n);//aaa</div><div class="line">var [p, q = <span class="string">"aaa"</span>] = [<span class="string">"bbb"</span>, undefined];</div><div class="line">console.log(p);//bbb</div><div class="line">console.log(q);//aaa</div></pre></td></tr></table></figure></p><p>非遍历结构–报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var [temp] = 1;//1[Symbol.iterator] is not a <span class="keyword">function</span> at <span class="built_in">eval</span></div><div class="line">var [temp] = <span class="literal">false</span>;//<span class="literal">false</span>[Symbol.iterator] is not a <span class="keyword">function</span> at <span class="built_in">eval</span></div><div class="line">var [temp] = NaN;//NaN[Symbol.iterator] is not a <span class="keyword">function</span> at <span class="built_in">eval</span></div><div class="line">var [temp] = undefined; //Cannot <span class="built_in">read</span> property <span class="string">'Symbol(Symbol.iterator)'</span> of undefined at <span class="built_in">eval</span></div><div class="line">var [temp] = null;//Cannot <span class="built_in">read</span> property <span class="string">'Symbol(Symbol.iterator)'</span> of null at <span class="built_in">eval</span></div></pre></td></tr></table></figure></p><p>Iterator接口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> [a, b, c] = new Set([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]);</div><div class="line">console.log(a);//a</div><div class="line">console.log(b);//b</div><div class="line">console.log(c);//c</div><div class="line"><span class="keyword">function</span>* <span class="function"><span class="title">fibs</span></span>() &#123;</div><div class="line"><span class="built_in">let</span> a = 0;</div><div class="line"><span class="built_in">let</span> b = 1;</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">yield a;</div><div class="line">[a, b] = [b, a + b];</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">var [first, second, third, fourth, fifth, sixth] = fibs();</div><div class="line">console.log(sixth);//5</div></pre></td></tr></table></figure></p><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>对象的解构赋值不需要按照顺序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var &#123; name, age &#125; = &#123; name: <span class="string">"Conan"</span>, age: 28 &#125;;</div><div class="line">console.log(name);//Conan</div><div class="line">console.log(age);//28</div></pre></td></tr></table></figure></p><p>变量名与属性名不一致<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// var &#123; person_name, person_age, person_id &#125; = &#123; id: <span class="string">"007"</span>, name: <span class="string">"Conan"</span>, age: 28 &#125;;</div><div class="line">// console.log(person_name);//undefined</div><div class="line">// console.log(person_age);//undefined</div><div class="line">// console.log(person_id);//undefined</div><div class="line">var &#123; name: person_name, age: person_age, id: person_id &#125; = &#123; id: <span class="string">"007"</span>, name: <span class="string">"Conan"</span>, age: 28 &#125;;</div><div class="line">console.log(person_name);//Conan</div><div class="line">console.log(person_age);//28</div><div class="line">console.log(person_id);//007</div><div class="line"><span class="built_in">let</span> object = &#123; first: <span class="string">"Hello"</span>, last: <span class="string">"World"</span> &#125;;</div><div class="line"><span class="built_in">let</span> &#123; first: firstName, last: lastName&#125; = object;</div><div class="line">console.log(firstName);//Hello</div><div class="line">console.log(lastName);//World</div></pre></td></tr></table></figure></p><p>对象解构默认值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var &#123; x = 3 &#125; = &#123;&#125;;</div><div class="line">console.log(x);//3</div><div class="line">var &#123; x, y = 5 &#125; = &#123; x: 1 &#125;;</div><div class="line">console.log(x);//1</div><div class="line">console.log(y);//5</div><div class="line">var &#123; message: msg = <span class="string">"You Are A Person!"</span> &#125; = &#123;&#125;;</div><div class="line">console.log(msg);//You Are A Person!</div></pre></td></tr></table></figure></p><p>对象解构默认值条件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var &#123; x = 3 &#125; = &#123; x: undefined &#125;;</div><div class="line">console.log(x);//3</div><div class="line">var &#123; y = 3 &#125; = &#123; y: null &#125;;</div><div class="line">console.log(y);//null</div></pre></td></tr></table></figure></p><p>已声明变量的解构赋值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var x;</div><div class="line">(&#123;x&#125; = &#123; x: 1 &#125;);</div><div class="line">console.log(x);//1</div></pre></td></tr></table></figure></p><p>现有对象的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(Math.sin(Math.PI/6));//0.49999999999999994</div><div class="line"><span class="built_in">let</span> &#123; sin, cos, tan, <span class="built_in">log</span> &#125; = Math;</div><div class="line">console.log(sin(Math.PI/6));//0.49999999999999994</div></pre></td></tr></table></figure></p><h3 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const [ a, b, c, d, e ] = <span class="string">"Hello"</span>;</div><div class="line">console.log(a);//H</div><div class="line">console.log(b);//e</div><div class="line">console.log(c);//l</div><div class="line">console.log(d);//l</div><div class="line">console.log(e);//o</div></pre></td></tr></table></figure><p>字符串的属性解构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const &#123; length: len &#125; = <span class="string">"Hello"</span>;</div><div class="line">console.log(len);//5</div><div class="line">const &#123; length &#125; = <span class="string">"Hello World!"</span>;</div><div class="line">console.log(length);//12</div></pre></td></tr></table></figure></p><h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> sum([x, y]) &#123;</div><div class="line"><span class="built_in">return</span> x + y;</div><div class="line">&#125;;</div><div class="line">console.log(sum([1, 2]));//3</div></pre></td></tr></table></figure><p>函数参数解构赋值的默认值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> fun (&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123;</div><div class="line"><span class="built_in">return</span> [x, y];</div><div class="line">&#125;;</div><div class="line">console.log(fun(&#123;x: 100, y: 200&#125;));//[100, 200]</div><div class="line">console.log(fun(&#123;x: 100&#125;));//[100, 0]</div><div class="line">console.log(fun(&#123;&#125;));//[0, 0]</div><div class="line">console.log(fun());//[0, 0]</div></pre></td></tr></table></figure></p><p>函数参数解构赋值的默认值undefined<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> fun (&#123;x, y&#125; = &#123; x: 0, y: 0 &#125;) &#123;</div><div class="line"><span class="built_in">return</span> [x, y];</div><div class="line">&#125;;</div><div class="line">console.log(fun(&#123;x: 100, y: 200&#125;));//[100, 200]</div><div class="line">console.log(fun(&#123;x: 100&#125;));//[100, undefined]</div><div class="line">console.log(fun(&#123;&#125;));//[undefined, undefined]</div><div class="line">console.log(fun());//[0, 0]</div></pre></td></tr></table></figure></p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>Arrow Function（箭头函数）。<br>为什么叫Arrow Function？因为它的定义用的就是一个箭头：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x =&gt; x * x</div></pre></td></tr></table></figure></p><p>相当于ES5的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> (x) &#123;</div><div class="line">    <span class="built_in">return</span> x * x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="有些浏览器不支持箭头函数，测试方法"><a href="#有些浏览器不支持箭头函数，测试方法" class="headerlink" title="有些浏览器不支持箭头函数，测试方法"></a>有些浏览器不支持箭头函数，测试方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'use strict'</span>;//使用严格模式</div><div class="line">var fn = x =&gt; x * x;</div><div class="line">console.log(<span class="string">'浏览器不支持'</span>);</div></pre></td></tr></table></figure><p>普通函数中的this:<br>1.this总是代表它的直接调用者(js的this是执行上下文), 例如 obj.function ,那么function中的this就指向obj<br>2.在默认情况(非严格模式下,未使用 ‘use strict’),没找到直接调用者,则this指的是 window<br>3.在严格模式下,没有直接调用者的函数中的this是undefined<br>4.使用call,apply,bind(ES5新增)绑定的,this指的是绑定的对象</p><p>箭头函数中的this<br>没有自己的this, 它的this是继承而来; 默认指向在定义它时所处的对象(宿主对象),而不是执行时的对象, 定义它的时候,可能环境是window; </p><h3 id="ES6加入了新的数据类型Symbol与新的数据结构set、map。"><a href="#ES6加入了新的数据类型Symbol与新的数据结构set、map。" class="headerlink" title="ES6加入了新的数据类型Symbol与新的数据结构set、map。"></a>ES6加入了新的数据类型Symbol与新的数据结构set、map。</h3><p>symbol最大的特点是唯一性，symbol不能隐式的转换类型，所以和其他数类型数据做运算时会报错。但是，symbol可以显式地转为字符串和布尔类型。对象object，在添加symbol类型属性时，必须用[]外扩symbol，不能用点式法对其进行操作。如同其他类型数据一般，symbol也有一些内置方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> a=Symbol();</div><div class="line">console.log(typeof a);//symbol,js语言的数据类型再添一员</div></pre></td></tr></table></figure></p><p>Symbol不是一个构造函数，如果new Symbol会报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var sym1 = Symbol();</div><div class="line">var sym2 = Symbol(<span class="string">"foo"</span>);</div><div class="line">var sym3 = Symbol(<span class="string">"foo"</span>);</div><div class="line">console.log(sym1, sym2, sym3) //输出Symbol() Symbol(foo) Symbol(foo)</div><div class="line">用同样的参数创建两次， 也是不相等的：</div><div class="line">Symbol(<span class="string">"foo"</span>) === Symbol(<span class="string">"foo"</span>); //输出：<span class="literal">false</span></div><div class="line"></div><div class="line"><span class="built_in">let</span> a=Symbol();</div><div class="line"><span class="built_in">let</span> b=Symbol();</div><div class="line">console.log(a);//Symbol()</div><div class="line">console.log(b);//Symbol(),a与b虽然不相等，但是打印出的数据却是一样的，为了区分他们，可以传参：</div><div class="line"><span class="built_in">let</span> c=Symbol(<span class="string">'ccc'</span>);//Symbol(ccc),传入的参数仅做标记，没有任何实际意义</div></pre></td></tr></table></figure></p><p>symbol类型的数据不能与其他类型的数据进行运算，它可以转为string与boolean类型，但是不能转换为number类型，</p><h3 id="数据结构Set。"><a href="#数据结构Set。" class="headerlink" title="数据结构Set。"></a>数据结构Set。</h3><p>类似于数组，只不过其成员值都是唯一的，没有重复的值，向Set加入值的时候，不会发生类型转换。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Set本身是一个构造函数，用来生成Set数据结构。</div><div class="line">var s = new Set();</div><div class="line">// 通过add方法向Set结构中加入成员</div><div class="line">[2, 3, 5, 4, 5, 2, 2].map(x =&gt; s.add(x))</div><div class="line"><span class="keyword">for</span> (i of s) &#123; console.log(i) &#125;</div><div class="line">// 2 3 4 5 （表明<span class="built_in">set</span>结构不会添加重复的值）</div><div class="line"></div><div class="line">Set结构接收一个数组作为参数，用来初始化。</div><div class="line">var items = new Set([1, 2, 3, 4, 5, 5, 5]);</div><div class="line">items.size </div><div class="line">// 5</div></pre></td></tr></table></figure></p><h3 id="set的四个方法："><a href="#set的四个方法：" class="headerlink" title="set的四个方法："></a>set的四个方法：</h3><p>add(value) : 添加value。<br>delete(value) : 删除value。<br>has(value) : 返回一个布尔值，表示该值是否为Set的成员。<br>clear() : 清除所有成员。</p><h3 id="数据结构Map"><a href="#数据结构Map" class="headerlink" title="数据结构Map"></a>数据结构Map</h3><p>Js对象本质上是键值对的集合。但是只能使用字符串充当键。ES6为了解决这个问题提供了Map结构。它类似对象，也是键值对集合，但是”键”的范围不限于字符串，对象也可以当作键。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var data = &#123;&#125;;</div><div class="line">var el = document.getElementById(<span class="string">"Div"</span>);</div><div class="line">// 将DOM节点el当做对象data的键，但是对象只接受字符串作为键名，所以el被自动转换为字符串<span class="string">"[Object HTMLDivElement]"</span></div><div class="line">data[el] = metadata;</div><div class="line"></div><div class="line">//map下</div><div class="line">var m = new Map();</div><div class="line">o = &#123;p: <span class="string">"hello world"</span>&#125;;</div><div class="line">m.set(o, <span class="string">"content"</span>);//o作为m的一个键</div><div class="line">console.log( m.get(o) );  // content</div></pre></td></tr></table></figure></p><p>Map函数可接收一个数组进行初始化。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var map = new Map([[<span class="string">"name"</span>, <span class="string">"hhardyy"</span>], [<span class="string">"title"</span>, <span class="string">"hhardyytitle"</span>]]);</div></pre></td></tr></table></figure></p><p>Map的6种方法：<br>size : 返回成员总数。<br>set(key, value) : 设置一个键值对。<br>get(key) : 读取一个键。<br>has(key) : 返回一个布尔值，表示某个键是否在Map结构中。<br>delete(key) : 删除某个键。<br>clear() : 清除所有成员。<br>Map原生提供三个遍历器。<br>key() : 返回键名的遍历器。<br>values() : 返回键值的遍历器。<br>entries() : 返回所有成员的遍历器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ( <span class="built_in">let</span> key of map.key() ) &#123;</div><div class="line">    console.log(<span class="string">"key: %s"</span>, key);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> ( <span class="built_in">let</span> value of map.value() ) &#123;</div><div class="line">    console.log(<span class="string">"value: %s"</span>, value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> ( <span class="built_in">let</span> item of map.entries() ) &#123;</div><div class="line">    console.log(<span class="string">"Key: %s, Value: %s"</span>, item[0], item[1]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> item of map) &#123;</div><div class="line">    console.log(<span class="string">"Key: %s, Value: %s"</span>, item[0], item[1]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Map还有一个forEach方法，与数组中的forEach方法类似，也可以实现遍历。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map.forEach(<span class="keyword">function</span>(value, key, map) &#123;</div><div class="line">    console.log(<span class="string">"Key: %s, Value: %s"</span>, key, value);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>forEach方法还可接受第二个参数，用来绑定this。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var reporter = &#123;</div><div class="line">    report: <span class="keyword">function</span>(key, value) &#123;</div><div class="line">        console.log(<span class="string">"key: %s, Value: %s"</span>, key, value);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">map.forEach(<span class="keyword">function</span>(value, key, map) &#123;</div><div class="line">    this.report(key, value)</div><div class="line">&#125;, reporter);</div><div class="line">forEach()方法的回调函数中的this, 就指向reporter</div></pre></td></tr></table></figure></p><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>用同步的方式，书写异步代码，用它原生的写法有点繁琐，因为要new多个Promise对象，然后每个发送ajax，然后再每个then(resolve,reject）,这里就直接写个处理过的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Promise.all([ajax1,ajax2,ajax3,ajaxn]).<span class="keyword">then</span>(res=&gt;&#123;成功&#125;,err=&gt;&#123;失败&#125;)</div></pre></td></tr></table></figure></p><p>还有个叫 promise.race<br>promise.all是与的关系，promise.race中的race=竞速的意思，也就是哪个先到先请求哪个<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">promise.race([</div><div class="line">    $.ajax(&#123;url:<span class="string">'hhardyy.com/data/1'</span>&#125;)</div><div class="line">    $.ajax(&#123;url:<span class="string">'hhardyy.com/data/2'</span>&#125;)</div><div class="line">    $.ajax(&#123;url:<span class="string">'hhardyy.com/data/3'</span>&#125;)</div><div class="line">    $.ajax(&#123;url:<span class="string">'hhardyy.com/data/4'</span>&#125;)比如这个先到了就用这个</div><div class="line">    $.ajax(&#123;url:<span class="string">'hhardyy.com/data/5'</span>&#125;)</div><div class="line">])</div></pre></td></tr></table></figure></p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>以前的面向对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 对象</div><div class="line"><span class="keyword">function</span> User(name,pass)&#123;</div><div class="line">    this.name=name;</div><div class="line">    this.pass=pass;</div><div class="line">&#125;</div><div class="line">User.prototype.showName=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(this.name);</div><div class="line">&#125;</div><div class="line">User.prototype.showPass=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(this.pass)</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> user=new User(<span class="string">'hhardyy'</span>,<span class="string">'123456'</span>)</div><div class="line">user.showName();</div><div class="line">user.showPass();</div><div class="line">// 继承</div><div class="line"><span class="keyword">function</span> VipUser(name,pass,level)&#123;</div><div class="line">User.call(this,name,pass);</div><div class="line">    this.level=level;</div><div class="line">&#125;</div><div class="line">VipUser.prototype=new User();</div><div class="line">VipUser.prototype.constructor=VipUser;</div><div class="line">VipUser.prototype.showLevel=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(this.level)</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> vipuser=new VipUser(<span class="string">'huangbingzhen'</span>,<span class="string">'123456'</span>,3)</div><div class="line">console.log(<span class="string">"继承"</span>)</div><div class="line">vipuser.showName();</div><div class="line">vipuser.showPass();</div><div class="line">vipuser.showLevel();</div></pre></td></tr></table></figure></p><p>ES6的面向对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//对象</div><div class="line">class User&#123;</div><div class="line">    constructor(name,pass)&#123;</div><div class="line">    this.name=name;</div><div class="line">    this.pass=pass;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">showName</span></span>()&#123;</div><div class="line">        console.log(this.name)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">showPass</span></span>()&#123;</div><div class="line">    console.log(this.pass)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> user=new User(<span class="string">'huangbingzhen'</span>,<span class="string">'123456'</span>)</div><div class="line">user.showName();</div><div class="line">user.showPass();</div><div class="line">// 继承</div><div class="line">class vipUser extends User&#123;</div><div class="line">    constructor(name,pass,level)&#123;</div><div class="line">    super(name,pass)     //超类</div><div class="line">    this.level=level</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">showLevel</span></span>()&#123;</div><div class="line">    console.log(this.level)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> vipuser=new vipUser(<span class="string">'huangbingzhen'</span>,<span class="string">'123456'</span>,3)</div><div class="line">vipuser.showName();</div><div class="line">vipuser.showPass();</div><div class="line">vipuser.showLevel();</div></pre></td></tr></table></figure></p><h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><p>generator: 生成器<br>普通函数=一路到底，generator函数=中间能停<br>比方：普通函数=飞机高铁，行驶途中不允许下车一下；generator函数=出租车（：老哥我下车一下马上回来，：去吧）<br>generator函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span>* show |  <span class="keyword">function</span> * show() | <span class="keyword">function</span> *show()</div></pre></td></tr></table></figure></p><p>yield：作用和java里头的一样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> *<span class="function"><span class="title">show</span></span>()&#123;</div><div class="line">    console.log(<span class="string">'a'</span>);</div><div class="line">    yield;       //截断</div><div class="line">    console.log(<span class="string">'b'</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> genObj=show();</div><div class="line">console.log(genObj)</div><div class="line">genObj.next() //只出a</div><div class="line">genObj.next() //出完a,b</div></pre></td></tr></table></figure></p><p>它相当于把一个大函数分成了几个小函数show_1()、show_2()，应用场景=比如请求数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">ajaxFunc</span></span>()&#123;</div><div class="line">    代码...</div><div class="line">    $.ajax（xxx.<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    然后为了写的好，下面的代码就要写到这里，回调代码...，然后就形成回调地狱~~~</div><div class="line">    &#125;）</div><div class="line">    代码...</div><div class="line">&#125;</div><div class="line">//generator函数</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">ajaxFunc</span></span>()&#123;</div><div class="line">    ...代码</div><div class="line">    yield $.ajax(xxx,<span class="function"><span class="title">function</span></span>()&#123;&#125;)    //到这里就可以暂停一下读数据</div><div class="line">    ...代码</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>yield可以传参<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> *show(num)&#123;</div><div class="line">    console.log(num)</div><div class="line">    console.log(<span class="string">'a'</span>);</div><div class="line">    <span class="built_in">let</span> item=yield;</div><div class="line">    console.log(<span class="string">'b'</span>)</div><div class="line">    console.log(item)</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> genObject=show(100)</div><div class="line">genObject.next(12)</div></pre></td></tr></table></figure></p><p>第一个过程传参=原来函数的传参方法，第一个过程是没办法给yield传参的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> *show(num)&#123;</div><div class="line">    console.log(num);</div><div class="line">    yield</div><div class="line">    console.log(<span class="string">'b'</span>)</div><div class="line">&#125;</div><div class="line">第二个过程之后就可以</div><div class="line">genObject.next(5)</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> *<span class="function"><span class="title">show</span></span>()&#123;</div><div class="line">    console.log(<span class="string">'a'</span>);</div><div class="line">    yield 12;</div><div class="line">    console.log(<span class="string">'b'</span>);</div><div class="line">    <span class="built_in">return</span> 55</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> genObj=show()</div><div class="line"><span class="built_in">let</span> res1=genObj.next()</div><div class="line"><span class="built_in">let</span> res2=genObj.next() </div><div class="line">console.log(res1)     //&#123;value: 12, <span class="keyword">done</span>: <span class="literal">false</span>&#125;  </div><div class="line">console.log(res2)     //最后一道工序，yield已经没有了，变成了undefined，所以输出的是&#123;value: undefined, <span class="keyword">done</span>: <span class="literal">true</span>&#125;，这个地方想拿到返回值需要在函数里面写<span class="built_in">return</span>，</div><div class="line">比如return55就可以输出来&#123;value: 55, <span class="keyword">done</span>: <span class="literal">true</span>&#125;</div></pre></td></tr></table></figure><h3 id="ES7-amp-amp-ES8"><a href="#ES7-amp-amp-ES8" class="headerlink" title="ES7&amp;&amp;ES8"></a>ES7&amp;&amp;ES8</h3><h4 id="includes-检查数组是否包含某个东西"><a href="#includes-检查数组是否包含某个东西" class="headerlink" title="includes:检查数组是否包含某个东西"></a>includes:检查数组是否包含某个东西</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> arr=[1,2,3,4,5]</div><div class="line">console.log(arr.includes(1))  //<span class="literal">true</span></div><div class="line">console.log(arr.includes(6))  //<span class="literal">false</span></div></pre></td></tr></table></figure><h4 id="keys-values-entries"><a href="#keys-values-entries" class="headerlink" title="keys/values/entries"></a>keys/values/entries</h4><p>keys=&gt;把所有的key拿出来<br>values=&gt;把所有的value拿出来<br>entries=&gt;把所有的键值对拿出来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> arr=[11,22,33,44,55]</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> item of arr.keys())&#123;</div><div class="line">    console.log(item)    //0,1,2,3,4</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> item of arr.values())&#123;</div><div class="line">    console.log(item)    //11,22,33,44,55</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> item of arr.entries())&#123;</div><div class="line">    console.log(item)  //[0,11],[1,22],[2,33],[3,44],[4,55]</div><div class="line">&#125;</div><div class="line">entries加上解构赋值可以这么玩</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> [key,value] of arr.entries())&#123;</div><div class="line">    console.log(`<span class="variable">$&#123;key&#125;</span>:<span class="variable">$&#123;value&#125;</span>`)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 需要注意的是上面这些json暂时玩不了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/ES7and8/keyvaluesentries.JPG" alt="这哥仨running" title="">                </div>                <div class="image-caption">这哥仨running</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/ES7and8/jiegoufuzhientries.JPG" alt="结构赋值" title="">                </div>                <div class="image-caption">结构赋值</div>            </figure></p><h4 id="幂"><a href="#幂" class="headerlink" title="幂"></a>幂</h4><p>以前的求幂是用Math的pow,ES7给了个比较6的方法,就是两个**,像python<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(Math.pow(5,2))   //25</div><div class="line">console.log(5**2)            //25</div></pre></td></tr></table></figure></p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>ES6多了个startsWith/endsWith,7的时候多了个padStart/padEnd,也就是前后补东西，很简单理解，比方说过去我要取一个字符串的前面10位<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> str=<span class="string">'hhardyy'</span></div><div class="line">console.log(`(<span class="variable">$&#123;str.padStart(10)&#125;</span>)`)    //(   hhardyy)，不够10位它会补上，endsWith也是差不多</div><div class="line">console.log(`(<span class="variable">$&#123;str.padEnd(10)&#125;</span>)`)      //(hhardyy   )</div><div class="line">//我还可以要求补位的时候补上我喜欢的东西</div><div class="line">console.log(`(<span class="variable">$&#123;str.padStart(10,'6')&#125;</span>)`)//(666hhardyy)</div><div class="line">console.log(`(<span class="variable">$&#123;str.padEnd(10,'6')&#125;</span>)`)  //(hhardyy666)</div></pre></td></tr></table></figure></p><h4 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h4><p>ES6的generator是配合yield用的，具体看上面写的ES6的东西，这里说的是ES7出来一个把它们取代的，叫做async<br> await,区别就是用generator的时候需要用到一个renner，但是async+await就不需要，可以直接用，但是对浏览器版本要求比较高，它的写法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">async <span class="keyword">function</span> <span class="function"><span class="title">Object</span></span>()&#123;</div><div class="line">    console.log(<span class="string">'a'</span>)</div><div class="line">    await</div><div class="line">    console.log(<span class="string">'b'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>举例肯定是数据交互，要起一个本地服务,ajaxFunc是封装的一个普通的原生ajax,就不放出来了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">async <span class="keyword">function</span> <span class="function"><span class="title">getData</span></span>()&#123;</div><div class="line">    <span class="built_in">let</span> data1=await ajaxFunc(<span class="string">'arr.txt'</span>)</div><div class="line">    <span class="built_in">let</span> data2=await ajaxFunc(<span class="string">'json.txt'</span>)</div><div class="line">    console.log(data1,data2)</div><div class="line">&#125;</div><div class="line">getData()</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/ES7and8/asyncfile.JPG" alt="目录" title="">                </div>                <div class="image-caption">目录</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/ES7and8/asynAjax.JPG" alt="get数据" title="">                </div>                <div class="image-caption">get数据</div>            </figure><p>过去的generator写法，需要写一个runner，有人把它写成了库给别人去install，还有一点是generator不能写成箭头函数，但是async可以 async getData()=&gt;{}<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">renner(<span class="keyword">function</span> *<span class="function"><span class="title">getData</span></span>()&#123;</div><div class="line">    <span class="built_in">let</span> data1=yield ajaxFunc(<span class="string">'arr.txt'</span>)</div><div class="line">    <span class="built_in">let</span> data2=yield ajaxFunc(<span class="string">'json.txt'</span>)</div><div class="line">    console.log(data1,data2)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6是下一代JavaScript语言标准的统称，每年6月发布一次修订版，迄今为止已经发布了3个版本，分别是ES2015、ES2016、ES2017。&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=526068535&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="let" scheme="http://yoursite.com/tags/let/"/>
    
      <category term="const" scheme="http://yoursite.com/tags/const/"/>
    
      <category term="箭头函数" scheme="http://yoursite.com/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
      <category term="symbol" scheme="http://yoursite.com/tags/symbol/"/>
    
      <category term="set" scheme="http://yoursite.com/tags/set/"/>
    
      <category term="map" scheme="http://yoursite.com/tags/map/"/>
    
      <category term="promise" scheme="http://yoursite.com/tags/promise/"/>
    
      <category term="generator" scheme="http://yoursite.com/tags/generator/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="ES7&amp;&amp;ES8" scheme="http://yoursite.com/tags/ES7-ES8/"/>
    
      <category term="keys/values/entries" scheme="http://yoursite.com/tags/keys-values-entries/"/>
    
      <category term="幂" scheme="http://yoursite.com/tags/%E5%B9%82/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="async await" scheme="http://yoursite.com/tags/async-await/"/>
    
  </entry>
  
</feed>
