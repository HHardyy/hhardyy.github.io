<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hardy | 小方块</title>
  
  <subtitle>复杂的坑+归其原理+了解实现规则===解决？解决成功：加油解决成功;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-22T17:06:59.144Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BingZhenhuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react-native</title>
    <link href="http://yoursite.com/2019/08/22/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E8%B7%91%E4%B8%80%E4%B8%AAreact-native/"/>
    <id>http://yoursite.com/2019/08/22/从无到有跑一个react-native/</id>
    <published>2019-08-22T14:30:39.000Z</published>
    <updated>2019-08-22T17:06:59.144Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近老大突然提到了原生app开发，所以我。。。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28535311&auto=0&height=66"></iframe><br><a id="more"></a></p><p>所以我想到了react-native、flutter当然还有uni-app，当然这些写出来的app不能直接和原生比，而是只是接近原生的渲染机制，我和一个做了几年安卓原生的前辈交谈过，他认为这种机制更偏向于做一些数据渲染的应用，如果太多动画的话是跟不上原生安卓的体验的。</p><p>在做任何东西之前，先要搭建环境，即使是强无敌的jquery也要先下载jquery源码或者去BootSDN等引外链</p><h3 id="开发的平台"><a href="#开发的平台" class="headerlink" title="开发的平台"></a>开发的平台</h3><p>macOS || Windows || Linux =&gt; iOS || Android</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>搭建之前温馨提示几点：<br>1、需要全程保持“科学上网”，否则能ERROR或者跳网址到你怀疑人生<br>2、因为环境需要，npm的镜像可以设置成淘宝的镜像，否则还是要依赖“科学上网工具”<br>3、不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！<br>4、Node的版本必须大于等于10<br>5、Python的版本必须为 2.x（不支持 3.x）<br>6、JDK的版本必须是1.8（我用的1.7，目前不支持 1.9 及更高版本）。</p><h4 id="必须安装的依赖"><a href="#必须安装的依赖" class="headerlink" title="必须安装的依赖"></a>必须安装的依赖</h4><p>有：Node、React Native命令行工具、Python2 以及JDK和Android Studio（虽然你可以使用任何编辑器来开发应用，但你仍然必须安装 Android Studio来获得编译 Android 应用所需的工具和环境。）</p><p>Node安装是每个前端的标配（略），安装完成后用node -v查看版本号</p><p>Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。安装命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g yarn react-native-cli</div></pre></td></tr></table></figure></p><p>yarn的镜像也可以设置成淘宝镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org --global</div><div class="line">yarn config <span class="built_in">set</span> disturl https://npm.taobao.org/dist --global</div></pre></td></tr></table></figure></p><h4 id="Android开发环境"><a href="#Android开发环境" class="headerlink" title="Android开发环境"></a>Android开发环境</h4><blockquote><p>请注意！！！国内用户必须必须必须有稳定的翻墙工具，否则在下载、安装、配置过程中会不断遭遇链接超时或断开，无法进行开发工作。某些翻墙工具可能只提供浏览器的代理功能，或只针对特定网站代理等等，请自行研究配置或更换其他软件。总之如果报错中出现有网址，那么 99% 就是无法正常翻墙。</p></blockquote><p><a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">安装Android Studio</a>,如果科学上网不了的话，即使有安装包安装过程也极大概率出问题，所以这一步先科学上网再继续<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">安装界面中选择<span class="string">"Custom"</span>选项，确保选中了以下几项：</div><div class="line">Android SDK</div><div class="line">Android SDK Platform</div><div class="line">Performance (Intel ® HAXM) </div><div class="line">Android Virtual Device</div></pre></td></tr></table></figure></p><p>然后点击”Next”来安装选中的组件。(如果选择框是灰的，你也可以先跳过，稍后再来安装这些组件。),看到欢迎界面就是安装完成了，然后继续下一步</p><h4 id="安装-Android-SDK"><a href="#安装-Android-SDK" class="headerlink" title="安装 Android SDK"></a>安装 Android SDK</h4><blockquote><p>Android Studio默认会安装最新版本的Android SDK。目前编译React Native应用需要的是Android 9(Pie)版本的SDK（注意 SDK 版本不等于终端系统版本，RN目前支持android4.1 以上设备）。你可以在Android Studio的 SDK Manager中选择安装各版本的SDK。</p></blockquote><p>在上面那一步安裝完成的Android Studio的欢迎界面中找到SDK Manager。点击”Configure”，然后就能看到”SDK Manager”。（SDK Manager还可以在Android Studio 的”Preferences”菜单中找到。具体路径是Appearance &amp; Behavior → System Settings → Android SDK。）</p><p>在SDK Manager中选择”SDK Platforms”选项卡，然后在右下角勾选”Show Package Details”。展开Android 9 (Pie)选项，确保勾选了下面这些组件（再次提醒你需要科学上网工具，否则看不到接下来的界面）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Android SDK Platform 28</div><div class="line">Intel x86 Atom_64 System Image（官方模拟器镜像文件，使用非官方模拟器不需要安装此组件）</div></pre></td></tr></table></figure></p><p>然后点击”SDK Tools”选项卡，同样勾中右下角的”Show Package Details”。展开”Android SDK Build-Tools”选项，确保选中了React Native 所必须的28.0.3版本。你可以同时安装多个其他版本。</p><p>最后点击”Apply”来下载和安装这些组件。</p><h4 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h4><blockquote><p>React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径，从而正常进行编译。</p></blockquote><p>在系统的环境变量创建一个名为ANDROID_HOME的环境变量（用户变量也可以），指向你的Android SDK所在的目录，也就是C:\你的电脑用户名\AppData\Local\Android\Sdk，这是Android Sdk默认的安装目录（不信的话可以在Android Studio的”Preferences”菜单中查看SDK的路径，具体是Appearance &amp; Behavior → System Settings → Android SDK。弄好之后关闭当前的命令行工具重新打开，新配置的环境变量才生效</p><h4 id="platform-tools目录添加到环境变量Path中"><a href="#platform-tools目录添加到环境变量Path中" class="headerlink" title="platform-tools目录添加到环境变量Path中"></a>platform-tools目录添加到环境变量Path中</h4><p>这个目录默认的路径是c:\Users\你的用户名\AppData\Local\Android\Sdk\platform-tools</p><p>做好了上面这些，接下来就可以开始你想做的了，就是建个项目跑一跑，其实只要上面的那些环境建好了，接下来的步骤都比较顺畅<br>创建一个react-native的项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native init AwesomeProject</div></pre></td></tr></table></figure></p><blockquote><p>可以使用–version参数（注意是两个杠）创建指定版本的项目。例如react-native init MyApp –version 0.44.3。注意版本号必须精确到两个小数点。Windows 用户请注意，请不要在某些权限敏感的目录例如 System32 目录中 init 项目！会有各种权限限制导致不能运行！</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/11.png" alt="建好的目录结构是这样的" title="">                </div>                <div class="image-caption">建好的目录结构是这样的</div>            </figure><p>创建好项目之后就可以运行了，运行的顺序也很讲究<br>1、启动Android Studio打开项目文件下面的android下面的app，然后Create Virtual Device创建一台虚拟安卓设备，然后开机<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/1.png" alt="Android Studio" title="">                </div>                <div class="image-caption">Android Studio</div>            </figure><br>2、打开了安卓虚拟设备之后启动项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> AwesomeProject</div><div class="line">react-native run-android</div></pre></td></tr></table></figure></p><p>如果配置没有问题，你应该可以看到应用自动安装到设备上并开始运行。第一次运行时需要下载大量编译依赖，耗时比较久。此过程严重依赖稳定的翻墙工具，否则将频繁遭遇链接超时和断开，导致无法运行。</p><p>如果运行之后安卓设备打开的界面是爆红的错误，请执行一个npm install将缺失的一些依赖安装上，然后执行react-native start启动项目<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/2.png" alt="start" title="">                </div>                <div class="image-caption">start</div>            </figure><br>然后在Android Studio上点击编译并执行的绿色三角按钮，将app跑起来<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/2.jpg" alt="run" title="">                </div>                <div class="image-caption">run</div>            </figure></p><p>那项目跑起来之后如何去修改里面的程序，写成自己想要的呢，其实和react一样，它的入口组件也是App.js,简单举个例子，我们改掉里面的小部分内容，其他就保留原样展示<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/code1.png" alt="code1" title="">                </div>                <div class="image-caption">code1</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/code2.png" alt="code2" title="">                </div>                <div class="image-caption">code2</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/code3.png" alt="code3" title="">                </div>                <div class="image-caption">code3</div>            </figure><br>代码改动之后，重新编译然后启动发现app界面的内容没有变化的话，你可能会运行react-native run-android，让它重新打包，接着再react-native start启动，然后发现，App界面还是没有更新。这时候可以执行一下这个命令再启动项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --platform android --dev <span class="literal">false</span> --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/reset.png" alt="也就是这样" title="">                </div>                <div class="image-caption">也就是这样</div>            </figure><p>如果有index.android.js，那么可以这样做：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native bundle --platform android --dev <span class="literal">false</span> --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/</div></pre></td></tr></table></figure></p><p>之后再运行react-native start，修改的内容就更新了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/end.png" alt="App" title="">                </div>                <div class="image-caption">App</div>            </figure><br>最后再解释一下这个项目的目录结构</p><table><thead><tr><th>名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>android</td><td style="text-align:center">Android项目目录，包含了使用AndroidStudio开发项目的环境配置文件</td></tr><tr><td>ios</td><td style="text-align:center">iOS项目目录，包含了XCode的环境</td></tr><tr><td>node_modules</td><td style="text-align:center">基于node文件依赖系统产生的相关依赖和第三方lib</td></tr><tr><td>index.js</td><td style="text-align:center">ios或android的入口，已经使用index.js代替index.ios.js/index.android.js，android中配置application文件的getJSMainModuleName()配置入口</td></tr><tr><td>app.json</td><td style="text-align:center">app的json文件</td></tr><tr><td>package.json</td><td style="text-align:center">项目基本信息以及依赖信息</td></tr><tr><td>package-lock.json</td><td style="text-align:center">npm install生成的文件，记录当前npm package的信息</td></tr><tr><td>App.js</td><td style="text-align:center">相当于Android的MainActivity，可以根据自己的需要进行修改或者删除（同时要修改index.js的注册的组件入口js文件名）</td></tr><tr><td>.babelrc</td><td style="text-align:center">Babel配置文件，在.babelrc配置文件中，主要是对预设（presets）和插件（plugins）进行配置，因此不同的转译器作用不同的配置项</td></tr><tr><td>.buckconfig</td><td style="text-align:center">Buck的配置文件，buck是Facebook开源的高效构建系统</td></tr><tr><td>.flowconfig</td><td style="text-align:center">Flow的配置文件，flowconfig是是Flow的配置文件</td></tr><tr><td>.gitattributes</td><td style="text-align:center">git配置文件，指定非文本文件的对比合并方式</td></tr><tr><td>.gitignore</td><td style="text-align:center">git配置文件，用于忽略你不想提交到Git上的文件</td></tr><tr><td>.watchmanconfig</td><td style="text-align:center">watchman的配置文件，watchman用于监控文件变化，辅助实现工程修改信息</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近老大突然提到了原生app开发，所以我。。。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=28535311&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="Python2" scheme="http://yoursite.com/tags/Python2/"/>
    
      <category term="JDK" scheme="http://yoursite.com/tags/JDK/"/>
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常见设计模式</title>
    <link href="http://yoursite.com/2019/08/04/JavaScript%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/04/JavaScript常见设计模式/</id>
    <published>2019-08-03T19:05:36.000Z</published>
    <updated>2019-08-03T19:55:32.017Z</updated>
    
    <content type="html"><![CDATA[<p>javascript常见设计模式</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=562613275&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在js中，单例作为一个命名<br>空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p><blockquote><p>比如你买了个新房子，房子如果没有门，就创建一个门，如果有门就可以直接从门走出去，每个门归属于独立的房号，房间的住户可以通过门进行单例通信</p></blockquote><h4 id="模式作用："><a href="#模式作用：" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、模块间通信<br>2、系统中某个类的对象只能存在一个<br>3、保护自己的属性和方法</p><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、注意this的使用<br>2、闭包容易造成内存泄露，不需要的时候干掉<br>3、注意new的成本（继承）<br>举个栗子，页面上6个按钮的分别点击事件，如果用世界上最强的技术$.的话就是这么写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#a'</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">//业务逻辑</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#b'</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">//业务逻辑</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#c'</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">//业务逻辑</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#d'</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">//业务逻辑</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#e'</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">//业务逻辑</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#f'</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">//业务逻辑</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>这么写的话，如果每个点击按钮的业务逻辑特别复杂，就乱掉了，而且如果$(‘#a’).click(function(){})里头声明了一个变量a=1,$(‘#b’).click(function(){})里面是不可能接收到的，因为a已经被$(‘#a’)给闭包了，所以如果用单例模式来开发这种代码，应该将它归属于不同的命名空间，比如：<br>a、b、c归属于tag1,d、e、f归属于tag2<br>采用单例的实现方式就是这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> tag1=&#123;</div><div class="line">init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    a:1,</div><div class="line">    render:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        <span class="built_in">let</span> me=this</div><div class="line">        me.btna=$(<span class="string">'#a'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">bind</span>:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        <span class="built_in">let</span> me=this</div><div class="line">        me.bina.click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            me.test()</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">test</span>:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        a=5</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">let</span> tag2=&#123;</div><div class="line">init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    a:1,</div><div class="line">    render:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        <span class="built_in">let</span> me=this</div><div class="line">        me.btna=$(<span class="string">'#d'</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">bind</span>:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        <span class="built_in">let</span> me=this</div><div class="line">        me.bina.click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            me.test()</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">test</span>:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        a=6</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>单例通讯的时候先绑定dom<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> tag1=&#123;</div><div class="line">init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    this.render()</div><div class="line">    this.bind()</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">let</span> tag2=&#123;</div><div class="line">init:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    this.render()</div><div class="line">    this.bind()</div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">test</span>:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        tag1.a=6      //改变tag1里面的a</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>构造函数用于创建特定类型的对象—不仅声明了使用的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。可以自定义自己的构造函数，然后在里面声明自定义类型<br>对象的属性或方法。</p><p>在js中，构造函数通常是认为用来实现实例的，js没有类的概念，但是有特殊的构造函数。通过new关键字来调用自定义的构造函数，在构造函数内部，this关键字引用的是新创建的对象</p><h4 id="模式作用：-1"><a href="#模式作用：-1" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、用于创建特定类型的对象<br>2、第一次声明的时候给对象赋值<br>3、自己声明构造函数，赋予属性和方法</p><h4 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、声明函数的时候处理业务逻辑<br>2、区分和单例的区别，配合单例实现初始化<br>3、构造函数大写字母开头<br>4、注意new的成本<br>代码实现其实就是构造函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> hardy(age)&#123;</div><div class="line"><span class="keyword">if</span>(!(this instanceof hardy))&#123;</div><div class="line">        <span class="built_in">return</span> new hardy()</div><div class="line">    &#125;</div><div class="line">    this.age=age?age:<span class="string">'90'</span></div><div class="line">    this.create=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        <span class="built_in">return</span> this.age</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">let</span> har=hardy(18)</div><div class="line"><span class="built_in">let</span> har1=hardy1(19)</div><div class="line">console.log(har)   //18</div><div class="line">console.log(har1)   //19</div></pre></td></tr></table></figure></p><p>单例模式与构造函数结合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> A=&#123;</div><div class="line"><span class="keyword">function</span>：hardy(age)&#123;</div><div class="line">    <span class="keyword">if</span>(!(this instanceof hardy))&#123;</div><div class="line">            <span class="built_in">return</span> new hardy()</div><div class="line">        &#125;</div><div class="line">        this.age=age?age:<span class="string">'90'</span></div><div class="line">        this.create=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            <span class="built_in">return</span> this.age</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> B=&#123;</div><div class="line"><span class="keyword">function</span>：hardy(age)&#123;</div><div class="line">    <span class="keyword">if</span>(!(this instanceof hardy))&#123;</div><div class="line">            <span class="built_in">return</span> new hardy()</div><div class="line">        &#125;</div><div class="line">        this.age=age?age:<span class="string">'90'</span></div><div class="line">        this.create=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            <span class="built_in">return</span> this.age</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">let</span> har=new AA.hardy(18)</div><div class="line"><span class="built_in">let</span> har1=new BB.hardy1(19)</div><div class="line">console.log(har)   //18</div><div class="line">console.log(har1)   //19</div></pre></td></tr></table></figure></p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>建造者模式可以将一个复杂对象的构建与其表示相分离，是的同样的构建过程可以创建不同的表示。也就是说如果我们用了建造者模式，那么用户就需要指定需要建造的类型就可以得到它们，建造者模式实际就是一个指挥者，一个建造者，一个使用指挥者调用具体建造者工作得出结果的客户。</p><p>建造者模式主要用于“分步骤构建一个复杂的对象”，在这其中“分步骤”是一个稳定的算法，而复杂对象的各个部分则经常变化</p><p>比如大家再熟悉不过的$.ajax，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;        //这里的$.ajax就是建造者</div><div class="line">    url:<span class="string">'hardy.php'</span>,</div><div class="line">    succ:<span class="function"><span class="title">function</span></span>()&#123;&#125;,</div><div class="line">    err:<span class="function"><span class="title">function</span></span>()&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>假设：<br>1、产出的东西是房子<br>2、baogongtou调用工人进行开工，而且他要很清楚工人们的某一个大项<br>3、工人是盖房子的工人可以建造卧室、客厅、厨房<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">House</span></span>()&#123;</div><div class="line">this.room=<span class="string">""</span></div><div class="line">this.living_room=<span class="string">""</span></div><div class="line">this.kitchen=<span class="string">""</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Foreman</span></span>()&#123;</div><div class="line">this.gaifangzi=<span class="keyword">function</span>(worker)&#123;</div><div class="line">    worker.make_room()</div><div class="line">    worker.make_livingroom()</div><div class="line">    worker.make_kitchen()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Worker</span></span>()&#123;</div><div class="line">this.make_room=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(<span class="string">'卧室我建好了'</span>)</div><div class="line">    &#125;</div><div class="line">    this.make_livingroom=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">         console.log(<span class="string">'客厅我建好了'</span>)</div><div class="line">    &#125;</div><div class="line">    this.make_kitchen=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(<span class="string">'厨房我建好了'</span>)</div><div class="line">    &#125;</div><div class="line">    this.complate=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        var _house=new House()</div><div class="line">        _house.room=<span class="string">"ok"</span></div><div class="line">        _house.living_room=<span class="string">"ok"</span></div><div class="line">        _house.kitchen=<span class="string">"ok"</span></div><div class="line">        <span class="built_in">return</span> _house</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> worker=new Worker()</div><div class="line"><span class="built_in">let</span> foreman=new Foreman()</div><div class="line">foreman.gaifangzi(worker)</div><div class="line"><span class="built_in">let</span> myhouse=worker.complate()</div><div class="line">console.log(JSON.stringify(myhouse))</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/make4.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型（抽象工厂）</p><p>这个模式十分有用，尤其是创建对象的流程赋值的时候，比如依赖于很多设置文件等。并且，你会经常在程序里看到工厂方法，用于让子类类定义需要创建的对象类型</p><h4 id="模式作用：-2"><a href="#模式作用：-2" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、对象的构建十分复杂<br>2、需要依赖具体的环境创建不同的实例<br>3、处理大量具有相同属性的小对象</p><h4 id="注意事项：-2"><a href="#注意事项：-2" class="headerlink" title="注意事项："></a>注意事项：</h4><p>不能滥用工厂，有时候仅仅是给代码增加复杂度<br>简单工厂<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> XMLHttpFactory=<span class="function"><span class="title">function</span></span>()&#123;&#125;</div><div class="line">XMLHttpFactory.createXMLHttp=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="built_in">let</span> XMLHttp=null</div><div class="line"><span class="keyword">if</span> (window.XMLHttpRequest) &#123;</div><div class="line">XMLHttp=new XMLHttpRequest()</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(window.ActiveXObject)&#123;</div><div class="line">XMLHttp=new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> XMLHttp</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> AjaxHander=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="built_in">let</span> XMLHttp=XMLHttpFactory.createXMLHttp()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>抽象工厂<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">XMLHttpFactory.prototype=&#123;</div><div class="line">createFactory:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    throw new Error(<span class="string">'this is an abstract class'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> XHRHander=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">XMLHttpFactory.call(this)</div><div class="line">&#125;</div><div class="line">XHRHander.prototype=new XMLHttpFactory()</div><div class="line">XHRHander.prototype.constructor=XHRHander</div><div class="line"></div><div class="line">XHRHander.prototype.createFactory=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">var XMLHttp=null</div><div class="line"><span class="keyword">if</span>(window.XMLHttpRequest)&#123;</div><div class="line">    XMLHttp=new XMLHttpRequest()</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(window.ActiveXObject(<span class="string">"Microsoft.XMLHTTP)&#123;</span></div><div class="line"><span class="string">        XMLHttp=new ActiveXObject('Microsoft.XMLHTTP')</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">    return XMLHttp</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure></p><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观模式（Facade）为子系统中的一组接口提供了一个一致的界面，此模块定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br>外观模式不仅简化类中的接口，而且对接口与调用者也进行了解耦。外观模式经常被认为开发者必备，它可以将一些复杂操作封装起来，并创建一个简单的接口用于调用</p><h4 id="模式作用：-3"><a href="#模式作用：-3" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、在设计初期，应该要意识地将不同的两个层分离，比如经典的三层结构。<br>2、在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观可以提供一个简单的接口，减少他们之间的依赖。<br>3、在维护一个遗留的大型系统时，为系统开发一个外观Facade类，为设计粗糙和高度复杂的遗留代码提供比较清晰的接口，让新系统和Facade对象交互。</p><h4 id="注意事项：-3"><a href="#注意事项：-3" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、外观模式被开发者连续使用时会产生一定的性能问题，因为在每次调用时都要检测功能的可用性</p><blockquote><p>代码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> stopEvent=<span class="keyword">function</span>(e)&#123;   //阻止冒泡和默认事件</div><div class="line">e.stopPropagation()</div><div class="line">e.preventDefault()</div><div class="line">&#125;</div><div class="line">$(<span class="string">'.btn'</span>).click(<span class="keyword">function</span>(e)&#123;</div><div class="line">stopEvent(e)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理，顾名思义就是帮助别人做事，GoF对代理模式的定义如下：<br>代理模式（Proxy），为其他对象提供一种代理以控制对这个对象的访问。<br>代理模式使得代理对象控制具体对象的引用。代理几乎可以是任何对象：文件，资源，内存中的对象，或者是一些难以复制的东西</p><h4 id="模式作用：-4"><a href="#模式作用：-4" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、远程代理（一个对象将不同空间的对象进行局部代理）<br>2、虚拟代理（根据需要创建开销很大的对象如渲染网页暂时用占位符代替真图）<br>3、安全代理（控制真实对象的访问权限）<br>4、智能指引（调用对象代理处理另外一些事情如垃圾回收机制）</p><h4 id="注意事项：-4"><a href="#注意事项：-4" class="headerlink" title="注意事项："></a>注意事项：</h4><p>不能滥用代理，有时候仅仅是给代码增加复杂度</p><blockquote><p>代码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">maijia</span></span>()&#123;</div><div class="line">this.name=<span class="string">'小明'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">zhongjie</span></span>()&#123;&#125;</div><div class="line">zhongjie.prototype.maifang=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">new fangdong(new maijia()).maifang(<span class="string">'300'</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> fangdong(maijia)&#123;</div><div class="line">this.maijia_name=maijia.name</div><div class="line">this.maifang=<span class="keyword">function</span>(money)&#123;</div><div class="line">console.log(`收到<span class="variable">$&#123;this.maijia_name&#125;</span>  <span class="variable">$&#123;money&#125;</span>万元`)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">(new zhongjie).maifang()</div></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式又叫发布订阅者模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化的时候就会通知所有的观察者对象，使得它们能够自动更新自己</p><h4 id="模式作用：-5"><a href="#模式作用：-5" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、支持简单的广播通信，自动通知所有已经订阅过的对象。<br>2、页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性<br>3、目标对象与观察者之间的抽象耦合关系能够扩展以及重用</p><h4 id="注意事项：-5"><a href="#注意事项：-5" class="headerlink" title="注意事项："></a>注意事项：</h4><p>监听要在触发之前</p><blockquote><p>代码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//在ES5中主要是通过Object.defineProperty方法定义对象属性的设置和获取，并在进行设置时执行相关的处理函数</div><div class="line">// 创建对象</div><div class="line">var targetObj = &#123;</div><div class="line">    age: 1</div><div class="line">&#125;</div><div class="line">// 定义值改变时的处理函数</div><div class="line"><span class="keyword">function</span> observer(oldVal, newVal) &#123;</div><div class="line">// 其他处理逻辑...</div><div class="line">    console.info(<span class="string">'name属性的值从 '</span>+ oldVal +<span class="string">' 改变为 '</span> + newVal);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 定义name属性及其<span class="built_in">set</span>和get方法</div><div class="line">Object.defineProperty(targetObj, <span class="string">'name'</span>, &#123;</div><div class="line">    enumerable: <span class="literal">true</span>,</div><div class="line">    configurable: <span class="literal">true</span>,</div><div class="line">    get: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> name;</div><div class="line">    &#125;,</div><div class="line">    <span class="built_in">set</span>: <span class="keyword">function</span>(val) &#123;</div><div class="line">        //调用处理函数</div><div class="line">        observer(name, val)</div><div class="line">        name = val;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">targetObj.name = <span class="string">'Martin'</span>;</div><div class="line">targetObj.name = <span class="string">'Lucas'</span>;</div><div class="line">console.info(<span class="string">'targetObj:'</span>, targetObj)</div><div class="line"></div><div class="line">输出</div><div class="line">name属性的值从 Martin 改变为 Lucas</div><div class="line">targetObj: &#123;age: 1, name: <span class="string">'Lucas'</span>&#125;</div></pre></td></tr></table></figure><p>ES6<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class TargetObj &#123;</div><div class="line">    constructor(age, name) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">set</span> name(val) &#123;</div><div class="line">        observer(name, val);</div><div class="line">        name = val;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">let</span> targetObj = new TargetObj(1, <span class="string">'Martin'</span>);</div><div class="line"></div><div class="line">// 定义值改变时的处理函数</div><div class="line"><span class="keyword">function</span> observer(oldVal, newVal) &#123;</div><div class="line">// 其他处理逻辑...</div><div class="line">    console.info(<span class="string">'name属性的值从 '</span>+ oldVal +<span class="string">' 改变为 '</span> + newVal);</div><div class="line">&#125;</div><div class="line">targetObj.name = <span class="string">'Lucas'</span>;</div><div class="line">console.info(targetObj)</div><div class="line"></div><div class="line">输出</div><div class="line">name属性的值从 Martin 改变为 Lucas</div><div class="line">targetObj: &#123;age: 1, name: <span class="string">'Lucas'</span>&#125;</div></pre></td></tr></table></figure></p><p>proxy Api<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class TargetObj &#123;</div><div class="line">    constructor(age, name) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">let</span> targetObj = new TargetObj(1, <span class="string">'Martin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">let</span> observerProxy = new Proxy(targetObj, &#123;</div><div class="line">    <span class="built_in">set</span>(target, property, value, reciever) &#123;</div><div class="line">        <span class="keyword">if</span> (property === <span class="string">'name'</span>) &#123;</div><div class="line">            observer(target[property], value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Reflect.set(target, property, value, reciever);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">// 定义值改变时的处理函数</div><div class="line"><span class="keyword">function</span> observer(oldVal, newVal) &#123;</div><div class="line">// 其他处理逻辑...</div><div class="line">    console.info(`name属性的值从 <span class="variable">$&#123;oldVal&#125;</span> 改变为 <span class="variable">$&#123;newVal&#125;</span>`);</div><div class="line">&#125;</div><div class="line"></div><div class="line">observerProxy.name = <span class="string">'Lucas'</span>;</div><div class="line">console.info(targetObj);</div></pre></td></tr></table></figure></p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式定义了算法家族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户</p><h4 id="模式作用：-6"><a href="#模式作用：-6" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、所有的这些算法都是做相同的事情，只是实现不同<br>2、以相同的方式调用所有的方法，减少了各种算法类与使用算法类之间的耦合<br>3、单独定义算法类，也方便了单元测试</p><h4 id="注意事项：-6"><a href="#注意事项：-6" class="headerlink" title="注意事项："></a>注意事项：</h4><p>不仅可以封装算法，也可以用来封装几乎任何类型的规则，是要在分析过程中需要在不同时间应用不同的业务规则，就可以考虑是要策略模式来处理各种变化</p><blockquote><p>代码：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//比如验证一个电话号码输入</div><div class="line"><span class="built_in">let</span> val = document.querySelector(<span class="string">'#input'</span>);</div><div class="line"></div><div class="line"><span class="built_in">let</span> valLint=&#123;</div><div class="line">isEmpty:<span class="keyword">function</span>(num)&#123;</div><div class="line">    <span class="built_in">return</span> boolean</div><div class="line">    &#125;,</div><div class="line">    isTel:<span class="keyword">function</span>(num)&#123;</div><div class="line">        <span class="built_in">return</span> boolean</div><div class="line">    &#125;</div><div class="line">&#125;//这是一个策略对象，也可以将所用的所有策略分别写入valLint里面，然后封装成一个.js文件，在需要用到策略的时候进行require然后传值判断，直接得到需要的boolean</div><div class="line"></div><div class="line">//使用策略</div><div class="line"><span class="built_in">let</span> isEmpty=valLint.isEmpty(val)</div><div class="line"><span class="built_in">let</span> isTel=valLint.isTel(val)</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!isEmpty&amp;&amp;isTel)&#123;</div><div class="line">....</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>命令模式(Command)的定义是：用来对方法调用进行参数化处理和传送，经过这样处理过的方法调用可以在任何需要的时候执行。也就是说该模式旨在将函数的调用、请求和操作封装成一个单一的对象，然后对这个对象进行一系列的处理。它也可以用来消除调用操作的对象和实现操作的对象之间的耦合。这为各种具体的类的更换带来了极大的灵活性。</p><h4 id="模式作用：-7"><a href="#模式作用：-7" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、将函数的封装、请求、调用结合为一体<br>2、调用具体的函数解耦命令对象与接收对象<br>3、提高程序模块化的灵活性</p><h4 id="注意事项：-7"><a href="#注意事项：-7" class="headerlink" title="注意事项："></a>注意事项：</h4><p>不需要接口一致，直接调用函数即可，以免造成浪费</p><blockquote><p>代码：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> lian=&#123;&#125;</div><div class="line"></div><div class="line">lian.bubing=<span class="keyword">function</span>(bu_num)&#123;</div><div class="line">console.log(`步兵<span class="variable">$&#123;bu_num&#125;</span>开始战斗`)</div><div class="line">&#125;</div><div class="line">lian.paobing=fnuction(pao_num)&#123;</div><div class="line">console.log(`炮兵<span class="variable">$&#123;pao_num&#125;</span>开始战斗`)</div><div class="line">&#125;</div><div class="line">lian.lianzhang=<span class="keyword">function</span>(mingling)&#123;</div><div class="line">lian[mingling.type](mingling.num)</div><div class="line">&#125;</div><div class="line">//发布命令</div><div class="line">lian.lianzhang(&#123;</div><div class="line"><span class="built_in">type</span>:<span class="string">'bubing'</span>,</div><div class="line">num:100</div><div class="line">&#125;)</div><div class="line">lian.lianzhang(&#123;</div><div class="line"><span class="built_in">type</span>:<span class="string">'paobing'</span>,</div><div class="line">num:50</div><div class="line">&#125;)</div><div class="line">//步兵100开始战斗，炮兵50开始战斗</div></pre></td></tr></table></figure><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式提供一种方法顺序访问一个聚合对象中各个元素，而又不需要暴露该方法中的内部表示</p><h4 id="模式作用：-8"><a href="#模式作用：-8" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作（比如jquery中的$.each()）<br>2、集合内部尝尝变化各异，不想暴露其内部结构，但是又想让客户代码透明地访问其中的元素，就可以用迭代器模式。</p><h4 id="注意事项：-8"><a href="#注意事项：-8" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、一般的迭代，至少需要有2个方法，hasNext()和Next()，这样做才做到遍历所有的对象。<br>2、遍历的同时更改迭代器所在的集合结构可能会导致问题（比如c#的foreach里不允许修改item）</p><blockquote><p>代码：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/iterator10.JPG" alt="code" title="">                </div>                <div class="image-caption">code</div>            </figure><h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><p>职责链模式是使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连城一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。<br>（举个栗子：客户需要开发一个系统，于是联系大boss，大boss肯定不会自己写代码，于是大boss把任务指派给项目经理，项目经理自己有几率不写，于是指派给coder来写代码,在这个过程中，客户没有直接和coder说，而是通过大boss层层指派，形成一条链，并沿着这条链传递该任务，上面说的对象指的就是我们这些coder）</p><p>链中收到请求的对象要么亲自处理它，要么转发给下一个候选者。提交方并不明确有多少个对象会处理它，任一候选者都可以响应的请求，可以在运行时刻决定哪些候选者参与到链中。</p><blockquote><p>代码：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/chain_of_resibilities11.jpg" alt="“职责链实现”" title="">                </div>                <div class="image-caption">“职责链实现”</div>            </figure><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式（Adapter）是将一个类（对象）的接口（方法或属性）转换成客户希望的另外一个接口（方法或属性），适配器模式使得原本由<br>于接口不兼容而不能一起工作的那些类（对象）可以一起工作。</p><h4 id="模式作用：-9"><a href="#模式作用：-9" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、使用一个已经存在的对象，但其方法或接口不符合你的要求<br>2、创建一个可复用的对象，该对象可以与其他不相关或不可见的对象协同工作<br>3、使用已经存在的一个或多个对象，但是不能继承已匹配它的接口</p><h4 id="注意事项：-9"><a href="#注意事项：-9" class="headerlink" title="注意事项："></a>注意事项：</h4><p>与代理模式的区别，代理模式是不改变原接口适配时原接口不符合规范</p><blockquote><p>举个栗子：假如本来你做的一个项目里头有一个Object</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> a=&#123;</div><div class="line"><span class="built_in">test</span>:<span class="function"><span class="title">function</span></span>()&#123;&#125;,</div><div class="line">go:<span class="function"><span class="title">function</span></span>()&#123;&#125;</div><div class="line">&#125;</div><div class="line">a.test()</div><div class="line">//这是你原来写的东西，然后假如项目重构，别人嫌弃你的静态方法，于是写成</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">b</span></span>()&#123;</div><div class="line">this.test=<span class="function"><span class="title">function</span></span>()&#123;&#125;</div><div class="line">&#125;</div><div class="line">b.prototype.go=<span class="function"><span class="title">function</span></span>()&#123;&#125;</div><div class="line">//别人重构之后你所有调a的地方都要写成<span class="built_in">let</span> a=new b()，然后改着改着自己就乱了</div></pre></td></tr></table></figure><blockquote><p>代码：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//在别人重构之后，我们可以这样</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Adapter</span></span>()&#123;</div><div class="line"><span class="built_in">let</span> h=new b()</div><div class="line"><span class="built_in">let</span> a=&#123;</div><div class="line">    <span class="built_in">test</span>:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        h.test()</div><div class="line">        &#125;,</div><div class="line">        go:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            h.go()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> a</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">let</span> a=Adapter()</div><div class="line">a.test()</div><div class="line">a.go()</div></pre></td></tr></table></figure><p>这样就迁移回来了，假如在参加一个比较大的项目的时候有功能一样的a.js和b.js，一般来说要判断<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(...)&#123;</div><div class="line">require(<span class="string">'a.js'</span>)</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(...)&#123;</div><div class="line">require(<span class="string">'b.js'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其实没必要，因为可以封装一个c.js的适配器，然后暴露a,b相应的接口对外，在a,b接口判断相应的逻辑，然后处理a.js和b.js</p><h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><p>模板方法(TemplateMethod)定义了一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>模板方法是一种代码复用的基本技术，在类库中尤为重要，因为他们提取了类库中的公共行为。模板方法导致一种反向的控制结构，这种结构就是传说中的”好莱坞法则”，即”别找我们，我们找你”，这指的是父类调用一个类的操作，而不是相反。具体体现是面向对象编程语言里面的抽象类（以及其中的抽象方法），以及继承该抽象类（和抽象方法）的子类</p><h4 id="模式作用：-10"><a href="#模式作用：-10" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现<br>2、各子类中公共的行为应该被提取出来并集中到一个公共父类中规避代码重复，不同之处分离为新的操作，最后，用一个钓鱼这些新操作的模板方法来替换这些不同的代码<br>3、控制子类扩展，模板方法只在特定点调用”hook”，这样就允许在这些点进行扩展</p><h4 id="注意事项：-10"><a href="#注意事项：-10" class="headerlink" title="注意事项："></a>注意事项：</h4><p>和策略模式不同，模板方法使用继承来改变算法的一部分，而策略模式使用委托来改变整个算法</p><blockquote><p>实现一个游戏流程：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Process</span></span>()&#123;&#125;</div><div class="line">Process.prototype.start=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">confirm(<span class="string">'开始游戏'</span>)</div><div class="line">&#125;</div><div class="line">Process.prototype.loading=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">console.log(<span class="string">'loading...'</span>)</div><div class="line">&#125;</div><div class="line">Process.prototype.out=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">confirm(<span class="string">'结束游戏'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Angry_birds</span></span>()&#123;&#125;</div><div class="line"></div><div class="line">Angry_birds.prototype=new Process()</div><div class="line">Angry_birds.start()</div></pre></td></tr></table></figure><p>上述代码=&gt;建立一个游戏流程的模板，然后有一个愤怒的小鸟的游戏直接继承了该模板，有其他游戏也可以直接继承该游戏模板</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型模式（prototype）是指用原型实例指向创建对象的种类，并且通过拷贝这些原型创建新的对象，这里的prototype不是js里面的prototype，而是一个原型的英文单词，只不过js里面的prototype刚好符合这种原型模式，真正在设计模式里面是有原型模式这样的概念的，所以不能把js里面的prototype和原型模式prototype语法混淆。</p><p>对于原型模式，可以利用JavaScript特有的原型继承特性去创建对象的方式，真正的原型继承是作为最新版的ECMAScript5标准提出的，使用Object.create方法来创建这样的对象，比如Object.create(prototype,optionalDescriptorObjects)</p><h4 id="模式作用：-11"><a href="#模式作用：-11" class="headerlink" title="模式作用："></a>模式作用：</h4><p>原型对象本身就是有效地利用了每个构造器创建的对象</p><h4 id="注意事项：-11"><a href="#注意事项：-11" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、注意的依然是浅拷贝和深拷贝的问题，免得出现引用问题<br>2、现有的文献里查看原型模式的定义，没有针对JavaScript的，你可能发现很多讲解的都是关于类的，但是现实情况是基于原型继承 的JavaScript完全避免了类（class）的概念</p><blockquote><p>代码：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> myobj=&#123;</div><div class="line">        str:<span class="string">'mystring'</span>,</div><div class="line">        num:1,</div><div class="line">        myarr:[</div><div class="line">            30,</div><div class="line">            &#123;arrgo:<span class="string">'i am arr'</span>&#125;</div><div class="line">        ],</div><div class="line">        myobj1:&#123;</div><div class="line">            innerobj:&#123;</div><div class="line">                <span class="built_in">test</span>:25</div><div class="line">            &#125;,</div><div class="line">            innerstr:<span class="string">'myobjInnerstr'</span></div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">let</span> <span class="built_in">clone</span>=<span class="keyword">function</span>(obj)&#123;</div><div class="line">    <span class="built_in">let</span> obt=&#123;&#125;,k</div><div class="line">    <span class="keyword">for</span>(k <span class="keyword">in</span> obj)&#123;</div><div class="line">        obt[k]=obj[k]</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> obt</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">let</span> result=<span class="built_in">clone</span>(myobj)</div><div class="line">console.log(myobj)</div><div class="line">console.log(<span class="string">'----------------------------'</span>)</div><div class="line">result.myobj1.innerstr=<span class="string">""</span></div><div class="line">console.log(result)</div><div class="line">console.log(myobj)</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/14-1.png" alt=".log" title="">                </div>                <div class="image-caption">.log</div>            </figure><p>克隆之后修改了myobj1里面的innerstr，然而原来的myobj里面的myobj1[innerstr]也改变了，这是因为受到了引用的影响，可以重写一下clone<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> <span class="built_in">clone</span>=<span class="keyword">function</span>(obj)&#123;</div><div class="line">    <span class="built_in">let</span> obt=&#123;&#125;,k,b</div><div class="line">    <span class="keyword">if</span>((b=(obj instanceof Array))||obj instanceof Object)&#123;</div><div class="line">        obt=b?[]:&#123;&#125;</div><div class="line">        <span class="keyword">for</span>(k <span class="keyword">in</span> obj)&#123;</div><div class="line">            <span class="keyword">if</span>((obj[k] instanceof Array)||(obj[k] instanceof Object))&#123;</div><div class="line">                obt[k]=<span class="built_in">clone</span>(obj[k])</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                obt[k]=obj[k]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> obt</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/14-2.png" alt=".log" title="">                </div>                <div class="image-caption">.log</div>            </figure><p>也可以用Object.create来实现，但是结构打印不出来,值可以拿到，这个是为什么我后续再研究一下，毕竟凌晨4点了。。。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> myobj=&#123;</div><div class="line">        str:<span class="string">'mystring'</span>,</div><div class="line">        num:1,</div><div class="line">        myarr:[</div><div class="line">            30,</div><div class="line">            &#123;arrgo:<span class="string">'i am arr'</span>&#125;</div><div class="line">        ],</div><div class="line">        obj:&#123;</div><div class="line">            innerobj:&#123;</div><div class="line">                <span class="built_in">test</span>:25</div><div class="line">            &#125;,</div><div class="line">            innerstr:<span class="string">'myobjInnerstr'</span></div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> m=Object.create(myobj)</div><div class="line">console.log(myobj)</div><div class="line">console.log(<span class="string">'---------------'</span>)</div><div class="line">m.num=666</div><div class="line">console.log(m.num)</div><div class="line">console.log(<span class="string">'---------------'</span>)</div><div class="line">console.log(myobj)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/14-3.png" alt=".log" title="">                </div>                <div class="image-caption">.log</div>            </figure><p>！！！总之！！！！！！不要为了设计模式而设计模式！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript常见设计模式&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=562613275&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="深拷贝" scheme="http://yoursite.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>前端架构</title>
    <link href="http://yoursite.com/2019/07/24/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2019/07/24/浅谈前端架构/</id>
    <published>2019-07-23T16:59:39.000Z</published>
    <updated>2019-07-24T15:44:14.507Z</updated>
    
    <content type="html"><![CDATA[<p>阿里前辈的经验</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1297742771&auto=0&height=66"></iframe><br><a id="more"></a><br><a href="https://blog.csdn.net/qq20004604/article/details/70480932" target="_blank" rel="external">‘中小型项目前端架构浅谈’</a><br><a href="https://blog.csdn.net/qq20004604/article/details/90575092" target="_blank" rel="external">‘大型项目前端架构浅谈’</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里前辈的经验&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1297742771&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端架构" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>React16.6配置代理&amp;style私有</title>
    <link href="http://yoursite.com/2019/06/22/React16-6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2019/06/22/React16-6配置代理/</id>
    <published>2019-06-22T09:56:19.000Z</published>
    <updated>2019-07-06T17:25:07.542Z</updated>
    
    <content type="html"><![CDATA[<p>你或许想知道的新代理</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=426341675&auto=0&height=66"></iframe><br><a id="more"></a></p><p>在脚手架中，一般配置代理会在package.json中写上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"proxy"</span>:<span class="string">"url"</span></div><div class="line">//或者</div><div class="line"><span class="string">"name"</span>: <span class="string">"hardy"</span>,</div><div class="line"><span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line"><span class="string">"private"</span>: <span class="literal">true</span>,</div><div class="line"><span class="string">"proxy"</span>:<span class="string">"url"</span>,</div></pre></td></tr></table></figure></p><p>这是配置单个代理的时候的情况，假如需要配置多个代理就写成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">"name"</span>: <span class="string">"proxy"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="string">"proxy"</span>:&#123;</div><div class="line">    <span class="string">"/api"</span>: &#123;</div><div class="line">        <span class="string">"target"</span>: <span class="string">"url"</span>,</div><div class="line">        <span class="string">"ws"</span>: <span class="literal">true</span></div><div class="line">      &#125;,</div><div class="line">  <span class="string">"/apb"</span>: &#123;</div><div class="line">        <span class="string">"target"</span>: <span class="string">"url"</span>,</div><div class="line">        <span class="string">"ws"</span>: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>但是如果在react16.6中这样使用，项目运行的时候会报错，提示不允许Object<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"proxy"</span> <span class="keyword">in</span> package.json must be a string</div></pre></td></tr></table></figure></p><p>而且在react16.6中，上面的配置已经解决不了代理问题了，这里我亲测了一个极简的demo，用node简单写一个在3001端口返回简单数据的接口，然后用16的脚手架构建了一个初级应用，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/nodemock.JPG" alt="nodemock" title="">                </div>                <div class="image-caption">nodemock</div>            </figure><br>然后用react脚手架创建一个应用，接着在App这个组件中写一个请求<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/easyget.JPG" alt="easyget" title="">                </div>                <div class="image-caption">easyget</div>            </figure><br>请求之后，打开控制台发现network中确实已经发出了请求，并且有了返回值<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/mocked.png" alt="mocked" title="">                </div>                <div class="image-caption">mocked</div>            </figure><br>但是打印出来是这样的<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/cors.JPG" alt="cors" title="">                </div>                <div class="image-caption">cors</div>            </figure><br>在react16.6中，create-react-app使用了webpack4.0，如果proxy不是字符串的话，是不能够在package.json中直接配置，并且会报错，其实在脚手架的配置文件中是可以找到配置代理的地方的，比如翻一下这个脚手架的webpack配置文件就发现了这个<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/1.JPG" alt="setupProxy.*" title="">                </div>                <div class="image-caption">setupProxy.*</div>            </figure><br>说明在src这个目录下面可以创建一个名为setupProxy的文件用来写代理，<a href="https://facebook.github.io/create-react-app/docs/getting-started" target="_blank" rel="external">这个在官网也有说明</a><br>解决方案就是使用http-proxy-middleware管理包来解决代理问题<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/install.JPG" alt="install" title="">                </div>                <div class="image-caption">install</div>            </figure><br>根据脚手架中webpack配置文件中得到的信息，在src下面创建setupProxy.js文件，然后写入代理<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/thiscode.JPG" alt="install" title="">                </div>                <div class="image-caption">install</div>            </figure><br>写完之后重启服务，代理成功<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/success.JPG" alt="install" title="">                </div>                <div class="image-caption">install</div>            </figure><br><a href="https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development#docsNav" target="_blank" rel="external">更加详细戳这里</a>   </p><h3 id="scoped-amp-amp-styled-components"><a href="#scoped-amp-amp-styled-components" class="headerlink" title="scoped&amp;&amp;styled-components"></a>scoped&amp;&amp;styled-components</h3><p>在index.js引入index.css的时候假如index.css里面有个.hardy,那么在APP组件里面的div使用ClassName=’hardy’也会生效。</p><blockquote><p>在vue组件中，在style标签上添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的，这是一个非常好的机制。但是在实际业务中我们往往会对公共组件样式做细微的<br>调整，如果添加了scoped属性，那么样式将会变得不易修改。</p></blockquote><p>在react中我们可以使用一个依赖叫styled-components<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install styled-components</div></pre></td></tr></table></figure></p><p>来实现css的私有<br>举例个小栗子（reset统一不同内核浏览器的标签）：<br>1、安装styled-components<br>2、把index.css改成style.js<br>然后在style.js中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import &#123; injectGlobal &#125; from <span class="string">'styled-components'</span></div><div class="line">injectGlobal `</div><div class="line">    body&#123;background:red&#125;</div><div class="line">`</div></pre></td></tr></table></figure></p><p>在早一点的版本中，这么写是没问题的，body应该会变红，但是<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/styled-components.JPG" alt="error" title="">                </div>                <div class="image-caption">error</div>            </figure><br>原因是：styled-components 4.x版本将原来的injectGlobal方法用createGlobalStyle替换了。createGlobalStyle是这么用的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//style.js</div><div class="line">import &#123;createGlobalStyle&#125; from <span class="string">'styled-components'</span>;</div><div class="line"><span class="built_in">export</span> const GlobalStyle=createGlobalStyle `</div><div class="line">    body&#123;</div><div class="line">      background:red;</div><div class="line">    &#125;</div><div class="line">`</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//index.js</div><div class="line">import React,&#123;fragments&#125; from <span class="string">'react'</span>;</div><div class="line">import ReactDOM from <span class="string">'react-dom'</span>;</div><div class="line">import &#123;GlobalStyle&#125; from <span class="string">'./style.js'</span></div><div class="line">import App from <span class="string">'./App'</span>;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;fragments&gt;</div><div class="line">  &lt;GlobalStyle/&gt;</div><div class="line">    &lt;App /&gt;</div><div class="line">  &lt;/fragments&gt;</div><div class="line">  , document.getElementById(<span class="string">'root'</span>));</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/red.JPG" alt="succ" title="">                </div>                <div class="image-caption">succ</div>            </figure><p>重置的话写成这样就可以了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import &#123;createGlobalStyle&#125; from <span class="string">'styled-components'</span>;</div><div class="line"><span class="built_in">export</span> const GlobalStyle=createGlobalStyle `</div><div class="line">    html, body, div, span, applet, object, iframe,</div><div class="line">    h1, h2, h3, h4, h5, h6, p, blockquote, pre,</div><div class="line">    a, abbr, acronym, address, big, cite, code,</div><div class="line">    del, dfn, em, img, ins, kbd, q, s, samp,</div><div class="line">    small, strike, strong, sub, sup, tt, var,</div><div class="line">    b, u, i, center,</div><div class="line">    dl, dt, dd, ol, ul, li,</div><div class="line">    fieldset, form, label, legend,</div><div class="line">    table, caption, tbody, tfoot, thead, tr, th, td,</div><div class="line">    article, aside, canvas, details, embed, </div><div class="line">    figure, figcaption, footer, header, hgroup, </div><div class="line">    menu, nav, output, ruby, section, summary,</div><div class="line">    time, mark, audio, video &#123;</div><div class="line">      margin: 0;</div><div class="line">      padding: 0;</div><div class="line">      border: 0;</div><div class="line">      font-size: 100%;</div><div class="line">      font: inherit;</div><div class="line">      vertical-align: baseline;</div><div class="line">    &#125;</div><div class="line">    /* HTML5 display-role reset <span class="keyword">for</span> older browsers */</div><div class="line">    article, aside, details, figcaption, figure, </div><div class="line">    footer, header, hgroup, menu, nav, section &#123;</div><div class="line">      display: block;</div><div class="line">    &#125;</div><div class="line">    body &#123;</div><div class="line">      line-height: 1;</div><div class="line">    &#125;</div><div class="line">    ol, ul &#123;</div><div class="line">      list-style: none;</div><div class="line">    &#125;</div><div class="line">    blockquote, q &#123;</div><div class="line">      quotes: none;</div><div class="line">    &#125;</div><div class="line">    blockquote:before, blockquote:after,</div><div class="line">    q:before, q:after &#123;</div><div class="line">      content: <span class="string">''</span>;</div><div class="line">      content: none;</div><div class="line">    &#125;</div><div class="line">    table &#123;</div><div class="line">      border-collapse: collapse;</div><div class="line">      border-spacing: 0;</div><div class="line">    &#125;</div><div class="line">`</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你或许想知道的新代理&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=426341675&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="React16.6" scheme="http://yoursite.com/tags/React16-6/"/>
    
      <category term="create-react-app" scheme="http://yoursite.com/tags/create-react-app/"/>
    
      <category term="proxy" scheme="http://yoursite.com/tags/proxy/"/>
    
      <category term="scoped" scheme="http://yoursite.com/tags/scoped/"/>
    
      <category term="css私有" scheme="http://yoursite.com/tags/css%E7%A7%81%E6%9C%89/"/>
    
  </entry>
  
  <entry>
    <title>根据经纬度计算两点间距</title>
    <link href="http://yoursite.com/2019/06/15/%E6%A0%B9%E6%8D%AE%E7%BB%8F%E7%BA%AC%E5%BA%A6%E8%AE%A1%E7%AE%97%E4%B8%A4%E7%82%B9%E9%97%B4%E8%B7%9D/"/>
    <id>http://yoursite.com/2019/06/15/根据经纬度计算两点间距/</id>
    <published>2019-06-15T07:37:32.000Z</published>
    <updated>2019-06-15T08:52:13.209Z</updated>
    
    <content type="html"><![CDATA[<p>打卡是很多人每天都要做两次的事情，钉钉很多人都用过，但是应该怎么判断你的位置可不可以打卡呢</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=35476986&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>我最近在做一个打卡的工具，简略它就是设置一个打卡的地点，允许打卡的范围等，然后提醒某个团体进行打卡，但是只能在设定的范围内打卡，不在范围或者不在打卡时间则打卡失败，因为源代码和软件是公司的东西，这里就写一个大家都玩的小例子来计算一下经纬度间的距离。</p></blockquote><h3 id="计算距离主要需要的数据就是"><a href="#计算距离主要需要的数据就是" class="headerlink" title="计算距离主要需要的数据就是"></a>计算距离主要需要的数据就是</h3><p>1、设置的活动地点的经纬度<br>2、打卡者当前位置的经纬度（这个经纬度有可能会改变，因为打卡者有可能在移动，或者是在没进入范围的时候发起的打卡，避免进入范围之后打卡失败）<br>得到上面1、2的数据之后，就可以根据计算出的距离≤设置的打卡范围（100米，200米，500米等），则打卡成功<br>3、地球半径<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/earch_juli/1.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> PI = Math.PI;</div><div class="line"><span class="keyword">function</span> getDistance(lat1,lng1,lat2,lng2)&#123;</div><div class="line">    var f = getRad((lat1 + lat2)/2);</div><div class="line">    var g = getRad((lat1 - lat2)/2);</div><div class="line">    var l = getRad((lng1 - lng2)/2);</div><div class="line">    </div><div class="line">    var sg = Math.sin(g);</div><div class="line">    var sl = Math.sin(l);</div><div class="line">    var sf = Math.sin(f);</div><div class="line">    </div><div class="line">    var s,c,w,r,d,h1,h2;</div><div class="line">    var a = EARTH_RADIUS;</div><div class="line">    var fl = 1/298.257;</div><div class="line">    </div><div class="line">    sg = sg*sg;</div><div class="line">    sl = sl*sl;</div><div class="line">    sf = sf*sf;</div><div class="line">    </div><div class="line">    s = sg*(1-sl) + (1-sf)*sl;</div><div class="line">    c = (1-sg)*(1-sl) + sf*sl;</div><div class="line">    </div><div class="line">    w = Math.atan(Math.sqrt(s/c));</div><div class="line">    r = Math.sqrt(s*c)/w;</div><div class="line">    d = 2*w*a;</div><div class="line">    h1 = (3*r -1)/2/c;</div><div class="line">    h2 = (3*r +1)/2/s;</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> d*(1 + fl*(h1*sf*(1-sg) - h2*(1-sf)*sg));</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> getRad(d)&#123;</div><div class="line">    <span class="built_in">return</span> d*PI/180.0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也可以是这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">getDistance:<span class="keyword">function</span>(lat1,lng1,lat2,lng2)&#123;</div><div class="line">      lat1 = lat1 || 0;</div><div class="line">      lng1 = lng1 || 0;</div><div class="line">      lat2 = lat2 || 0;</div><div class="line">      lng2 = lng2 || 0;    </div><div class="line">      var rad1 = lat1 * Math.PI / 180.0;    </div><div class="line">      var rad2 = lat2 * Math.PI / 180.0;    </div><div class="line">      var a = rad1 - rad2;    </div><div class="line">      var b = lng1 * Math.PI / 180.0 - lng2 * Math.PI / 180.0;    </div><div class="line">      var r = 637139.3;  //地球半径</div><div class="line">      var distance = r * 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(rad1) * Math.cos(rad2) * Math.pow(Math.sin(b / 2), 2)));  </div><div class="line">      <span class="built_in">return</span> distance;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>cosbeta通过搜索找到了一个js的计算脚本（其实是google map的计算脚本，应该算是比较准确了），做成了<a href="http://www.storyday.com/wp-content/uploads/2008/09/latlung_dis.html" target="_blank" rel="external">一个根据经纬度计算两点距离的工具</a>，前辈利用google map的经纬度到距离计算的js脚本还原出来的公式是这个样子的<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/earch_juli/2.JPG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>公式中经纬度均用弧度表示，<a href="http://www.360doc.com/content/10/1228/10/284485_81937345.shtml" target="_blank" rel="external">可以参考这里</a></p><p>lat1 lng1 表示A点纬度和经度<br>lat2 lng2 表示B点纬度和经度</p><p>两点纬度之差: a=lat1 – lat2<br>两点经度之差: b=lng1 - lng2</p><p>637139.3为地球半径，单位为米<br>计算过程为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//计算距离，参数分别为第一点的纬度，经度；第二点的纬度，经度</div><div class="line"><span class="keyword">function</span> getDistance(lat1,lng1,lat2,lng2)&#123;</div><div class="line">    var radLat1 = Rad(lat1);</div><div class="line">    var radLat2 = Rad(lat2);</div><div class="line">    var a = radLat1 - radLat2;</div><div class="line">    var  b = Rad(lng1) - Rad(lng2);</div><div class="line">    var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a/2),2) + Math.cos(radLat1)*Math.cos(radLat2)*Math.pow(Math.sin(b/2),2)))*637139.3;</div><div class="line">    s = Math.round(s * 10000) / 10000; </div><div class="line">    <span class="built_in">return</span> s;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Rad(d)&#123;</div><div class="line">    <span class="built_in">return</span> d * Math.PI / 180.0;//经纬度转换成三角函数中度分表形式。</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>总之，计算的的精度取决于传入的经纬度的精度，同样的经纬度在百度、腾讯、高德等得到的位置有可能都不一样，不过偏差可以尽量缩小</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打卡是很多人每天都要做两次的事情，钉钉很多人都用过，但是应该怎么判断你的位置可不可以打卡呢&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=35476986&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="longitude" scheme="http://yoursite.com/tags/longitude/"/>
    
      <category term="latitude" scheme="http://yoursite.com/tags/latitude/"/>
    
      <category term="经纬度" scheme="http://yoursite.com/tags/%E7%BB%8F%E7%BA%AC%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>读React源码</title>
    <link href="http://yoursite.com/2019/04/06/%E4%BA%86%E8%A7%A3React/"/>
    <id>http://yoursite.com/2019/04/06/了解React/</id>
    <published>2019-04-06T05:43:36.000Z</published>
    <updated>2019-08-04T06:20:35.956Z</updated>
    
    <content type="html"><![CDATA[<p>我年轻需要指点</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=543210521&auto=0&height=66"></iframe><br><a id="more"></a></p><p>首先得有源码<br>通过 CDN 获得 React 和 ReactDOM 的 UMD 版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script crossorigin src=<span class="string">"https://unpkg.com/react@16/umd/react.development.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script crossorigin src=<span class="string">"https://unpkg.com/react-dom@16/umd/react-dom.development.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>上述版本仅用于开发环境，不适合用于生产环境。React 的压缩和优化之后的生产环境版本链接如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script crossorigin src=<span class="string">"https://unpkg.com/react@16/umd/react.production.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script crossorigin src=<span class="string">"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>如果需要加载指定版本的 react 和 react-dom，可以把 16 替换成需要加载的版本号。react16完全重写了核心代码，但是对于使用者来说是毫无感知的，不像vue和ng一样大版本更新的时候需要<br>调整兼容，react16还引入了fiber概念，从根本上解决js单线程运行当数据流量大动画卡帧的问题。  </p><h3 id="1、JSX代码转变到javascript之createElement"><a href="#1、JSX代码转变到javascript之createElement" class="headerlink" title="1、JSX代码转变到javascript之createElement"></a>1、JSX代码转变到javascript之createElement</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">React.createElement(<span class="string">'div'</span>,&#123;</div><div class="line">    class:<span class="string">'aaa'</span>,</div><div class="line">    data-name:<span class="string">'hardy'</span></div><div class="line">&#125;,<span class="string">"test"</span>)</div><div class="line"></div><div class="line">&lt;div class=<span class="string">"aaa"</span> data-name=<span class="string">"hardy"</span>&gt;&lt;/div&gt;</div><div class="line"></div><div class="line"></div><div class="line">React.createElement(<span class="string">'div'</span>,&#123;</div><div class="line">    data-name=<span class="string">'hardy'</span>,</div><div class="line">    React.createElement(<span class="string">'span'</span>,null,<span class="string">'1'</span>),</div><div class="line">    React.createElement(<span class="string">'span'</span>,null,<span class="string">'2'</span>)</div><div class="line">&#125;,<span class="string">'hardy'</span>)</div><div class="line"></div><div class="line">&lt;div data-name=<span class="string">'hardy'</span>&gt;</div><div class="line">    &lt;span&gt;1&lt;/span&gt;</div><div class="line">    &lt;span&gt;2&lt;/span&gt;</div><div class="line">    hardy</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>如果是组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Hardy</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> &lt;a&gt;hardy&lt;/a&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;Hardy id=<span class="string">'hardyid'</span>&gt;</div><div class="line">  &lt;span&gt;1&lt;/span&gt;</div><div class="line">  &lt;span&gt;2&gt;&lt;/span&gt;</div><div class="line">&lt;/Hardy&gt;</div></pre></td></tr></table></figure></p><p>那么createElement的第一项就不是字符串了，而是当成变量去传<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Hardy</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> React.createElement(<span class="string">"a"</span>, null, <span class="string">"hardy"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">React.createElement(Hardy, &#123;</div><div class="line">  id: <span class="string">"hardyid"</span></div><div class="line">&#125;, React.createElement(<span class="string">"span"</span>, null, <span class="string">"1"</span>), React.createElement(<span class="string">"span"</span>, null, <span class="string">"2&gt;"</span>));</div></pre></td></tr></table></figure></p><p>如果自定义的这个组件叫hardy的话，它会被认为是原生dom里面的标签。在执行的时候就会报错，所以在声明自定义组件的时候，首字母一定要大写，这是一个规范.</p><h3 id="2、react-Element"><a href="#2、react-Element" class="headerlink" title="2、react-Element"></a>2、react-Element</h3><p>在react中createElement这个方法是这么实现的，它传入3个参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> createElement(<span class="built_in">type</span>, config, children) &#123;</div><div class="line">  var propName = void 0;</div><div class="line"></div><div class="line">  // Reserved names are extracted</div><div class="line">  var props = &#123;&#125;;</div><div class="line"></div><div class="line">  var key = null;</div><div class="line">  var ref = null;</div><div class="line">  var self = null;</div><div class="line">  var <span class="built_in">source</span> = null;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (config != null) &#123;</div><div class="line">    <span class="keyword">if</span> (hasValidRef(config)) &#123;</div><div class="line">      ref = config.ref;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (hasValidKey(config)) &#123;</div><div class="line">      key = <span class="string">''</span> + config.key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    self = config.__self === undefined ? null : config.__self;</div><div class="line">    <span class="built_in">source</span> = config.__source === undefined ? null : config.__source;</div><div class="line">    // Remaining properties are added to a new props object</div><div class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> config) &#123;</div><div class="line">      <span class="keyword">if</span> (hasOwnProperty<span class="variable">$1</span>.call(config, propName) &amp;&amp; !RESERVED_PROPS.hasOwnProperty(propName)) &#123;</div><div class="line">        props[propName] = config[propName];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // Children can be more than one argument, and those are transferred onto</div><div class="line">  // the newly allocated props object.</div><div class="line">  var childrenLength = arguments.length - 2;</div><div class="line">  <span class="keyword">if</span> (childrenLength === 1) &#123;</div><div class="line">    props.children = children;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; 1) &#123;</div><div class="line">    var childArray = Array(childrenLength);</div><div class="line">    <span class="keyword">for</span> (var i = 0; i &lt; childrenLength; i++) &#123;</div><div class="line">      childArray[i] = arguments[i + 2];</div><div class="line">    &#125;</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> (Object.freeze) &#123;</div><div class="line">        Object.freeze(childArray);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    props.children = childArray;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // Resolve default props</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">type</span> &amp;&amp; type.defaultProps) &#123;</div><div class="line">    var defaultProps = type.defaultProps;</div><div class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> defaultProps) &#123;</div><div class="line">      <span class="keyword">if</span> (props[propName] === undefined) &#123;</div><div class="line">        props[propName] = defaultProps[propName];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> (key || ref) &#123;</div><div class="line">      var displayName = typeof <span class="built_in">type</span> === <span class="string">'function'</span> ? type.displayName || type.name || <span class="string">'Unknown'</span> : <span class="built_in">type</span>;</div><div class="line">      <span class="keyword">if</span> (key) &#123;</div><div class="line">        defineKeyPropWarningGetter(props, displayName);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (ref) &#123;</div><div class="line">        defineRefPropWarningGetter(props, displayName);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">return</span> ReactElement(<span class="built_in">type</span>, key, ref, self, <span class="built_in">source</span>, ReactCurrentOwner.current, props);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3个参数中的type，就是节点类型，如果是原生节点是字符串，如果是自定义组件就是class component 或者function component，或者react的组件Fragment、StricMode、Suspense,config是写在标签上的所有attr，它们都会变成keyvalue的形式存到config对象里面，我们需要从config里面筛选出props的内容或者href这种特殊的attr,children是标签中放的内容，可以是子标签或者文字,过程就是判断有没有合理的ref，有没有合理的key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">if</span> (hasValidRef(config)) &#123;</div><div class="line">    ref = config.ref;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (hasValidKey(config)) &#123;</div><div class="line">    key = <span class="string">''</span> + config.key;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后就是对props进行处理，将不是内嵌的props另存到一个新的对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (propName <span class="keyword">in</span> config) &#123;</div><div class="line">    <span class="keyword">if</span> (hasOwnProperty<span class="variable">$1</span>.call(config, propName) &amp;&amp; !RESERVED_PROPS.hasOwnProperty(propName)) &#123;</div><div class="line">        props[propName] = config[propName];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>内嵌的也就是RESERVED_PROPS中做了这样的声明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const RESERVED_PROPS=&#123;</div><div class="line">   key:<span class="literal">true</span>,</div><div class="line">   ref:<span class="literal">true</span>,</div><div class="line">   __self:<span class="literal">true</span>,</div><div class="line">   __soure:<span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里面的属性都不会出现在比如react项目中组件通信的时候的this.props中，然后是处理children<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var childrenLength = arguments.length - 2;</div><div class="line">  <span class="keyword">if</span> (childrenLength === 1) &#123;</div><div class="line">    props.children = children;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; 1) &#123;</div><div class="line">    var childArray = Array(childrenLength);</div><div class="line">    <span class="keyword">for</span> (var i = 0; i &lt; childrenLength; i++) &#123;</div><div class="line">      childArray[i] = arguments[i + 2];</div><div class="line">    &#125;</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> (Object.freeze) &#123;</div><div class="line">        Object.freeze(childArray);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    props.children = childArray;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>children是可以有多个的，在一个节点上可能有很多兄弟节点，createElement(type, config, children),<br>默认是可以传入3个参数，但是实际上我们可以传入很多个，第三个参数之后的参数都认为是一个children,所以arguments.length-2就等于接下来的这些参数都是children，接着将这些children<br>存到新声明的数组childArray，最终它再放到props.children里面，通过this.props.children就可以拿到;接着是对默认props的处理，比如在写一个自己的组件的时候可以加上这么个值，这样<br>如果给别人用的时候，他没有传入这个值，就默认是设置的默认值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">impoert React,&#123; Component &#125; from <span class="string">'react'</span></div><div class="line">Hardy.defaultProps=&#123; name:hardy &#125;</div><div class="line">class Hardy extends Component&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">type</span> &amp;&amp; type.defaultProps) &#123;   </div><div class="line">    var defaultProps = type.defaultProps;</div><div class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> defaultProps) &#123;</div><div class="line">      //如果==就代表null和undefined都需要设置默认值，===就表示即使是null也不需要设置默认值</div><div class="line">      <span class="keyword">if</span> (props[propName] === undefined) &#123;    </div><div class="line">        props[propName] = defaultProps[propName];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>到这里的时候，预处理的内容已经完成了，然后它return了一个ReactElement，并传入上面处理的那些内容，return ReactElement(type, key, ref, self, source,<br>ReactCurrentOwner.current, props);ReactElement在第1881行的时候做了这样的声明<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/1ReactElement.JPG" alt="“like this”" title="">                </div>                <div class="image-caption">“like this”</div>            </figure><br>ReactElement最终return一个这样的Object<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var element = &#123;</div><div class="line">    // This tag allows us to uniquely identify this as a React Element</div><div class="line">    $<span class="variable">$typeof</span>: REACT_ELEMENT_TYPE,   </div><div class="line"></div><div class="line">    // Built-in properties that belong on the element</div><div class="line">    <span class="built_in">type</span>: <span class="built_in">type</span>,</div><div class="line">    key: key,</div><div class="line">    ref: ref,</div><div class="line">    props: props,</div><div class="line"></div><div class="line">    // Record the component responsible <span class="keyword">for</span> creating this element.</div><div class="line">    _owner: owner</div><div class="line">  &#125;;</div><div class="line">$<span class="variable">$typeof</span>是REACT_ELEMENT_TYPE，用来标识Element是什么类型的，<span class="built_in">type</span>是传进来的<span class="built_in">type</span>，key是处理过的key，ref就是ref，props就是props，_owner就是_owner</div></pre></td></tr></table></figure></p><h3 id="3、react-Component"><a href="#3、react-Component" class="headerlink" title="3、react-Component"></a>3、react-Component</h3><p>Component就是组件<br>一般<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import React,&#123; Component &#125; from <span class="string">'react</span></div><div class="line"><span class="string">class hardy extends Component&#123;&#125;</span></div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import React from <span class="string">'react'</span></div><div class="line">class hardy extends React.Component&#123;&#125;</div></pre></td></tr></table></figure></p><p>hardy都是去继承React的Component的base Class,其实React中有Component和PureComponent，两者唯一的区别就是PureComponent保证了组件在没有任何变化的情况下能够减少不必要的更新<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/2react中的Component和PualComponent.JPG" alt="“PureComponent”" title="">                </div>                <div class="image-caption">“PureComponent”</div>            </figure><br>Component:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/3react中的Component.JPG" alt="Component" title="">                </div>                <div class="image-caption">Component</div>            </figure><br>Component被声明成了一个函数，接收3个参数props, context, updater，this.props和this.context是可以直接用的，emptyObject是我们获取的节点的实例然后挂载在this.refs上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var emptyObject = &#123;&#125;;</div><div class="line">&#123;</div><div class="line">  Object.freeze(emptyObject);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来第421行代码，Component的原型上挂载了一个setState，这是使用频率最多的api，它是用来更新组件状态的，partialState是要更新的新的state，可以是对象，也可以是个方法，callba<br>ck是更新完之后执行的方法，this.setState主要的部分是this.updater.enqueueSetState，也就是调用this.setState的时候初始化调用Component的时候传入的updater对象上面的enqueueS<br>etState方法，enqueueSetState在reactDom里面实现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Component.prototype.setState = <span class="keyword">function</span> (partialState, callback) &#123;</div><div class="line">  !(typeof partialState === <span class="string">'object'</span> || typeof partialState === <span class="string">'function'</span> || partialState == null) ? invariant(<span class="literal">false</span>, <span class="string">'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'</span>) : void 0;</div><div class="line">  this.updater.enqueueSetState(this, partialState, callback, <span class="string">'setState'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>Component上面还有个方法叫forceUpdate，作用就是强制react的state更新<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Component.prototype.forceUpdate = <span class="keyword">function</span> (callback) &#123;</div><div class="line">  this.updater.enqueueForceUpdate(this, callback, <span class="string">'forceUpdate'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>Component的内容就是这些了，确实内容还是蛮少</p><h3 id="4、PureComponent"><a href="#4、PureComponent" class="headerlink" title="4、PureComponent:"></a>4、PureComponent:</h3><p>PureComponent继承自Component，区别就是加了isReactComponent=true,通过这个来标识继承自Component的是PureComponent<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/4pureComponent.JPG" alt="pureComponent" title="">                </div>                <div class="image-caption">pureComponent</div>            </figure></p><h3 id="5、react-ref的三种方式"><a href="#5、react-ref的三种方式" class="headerlink" title="5、react-ref的三种方式"></a>5、react-ref的三种方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">constructor</span></span>()&#123;</div><div class="line">    super()</div><div class="line">    this.objRef=React.createRef()</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">componentDitMount</span></span>()&#123;</div><div class="line">    this.refs.stringRef.textContent=<span class="string">"hardy string"</span>;     //1</div><div class="line">    this.methodsRef.textContent=<span class="string">"hardy function"</span>;       //2</div><div class="line">    this.objRef.current.textContent=<span class="string">"hardy createRef"</span>   //3</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="1、string-ref"><a href="#1、string-ref" class="headerlink" title="1、string ref"></a>1、string ref</h4><p>想要获取节点的元素的props上添加一个ref属性，然后传入字符串，然后在完成这个节点的渲染之后在this.refs上面挂载这个属性的key，如果是节点就是节点，如果是组件就是组件，对应的就是<br>这个节点的实例的对象（将要被废弃的使用方式）</p><p></p><p ref="stringRef"></p><p></p><h4 id="2、function"><a href="#2、function" class="headerlink" title="2、function"></a>2、function</h4><p>ref传入一个方法，方法接收一个参数，参数就是当前的实例，如果是节点就是节点，如果是组件就是组件</p><p></p><p ref="{ele=">(this.methodsRef=ele)}&gt;</p><p></p><h4 id="3、createRef"><a href="#3、createRef" class="headerlink" title="3、createRef"></a>3、createRef</h4><p>这个是react提供的api,利用this.objRef=React.createRef()创建了一个null的current对象，然后传给某个节点，传完之后在组件渲染完成之后，将对应的节点挂载到current上</p><p></p><p ref="{this.objRef}"></p><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/5react下的createRef.JPG" alt="createRef" title="">                </div>                <div class="image-caption">createRef</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/6createRefdo.JPG" alt="createRefdo" title="">                </div>                <div class="image-caption">createRefdo</div>            </figure><br>Object.seal()方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。<p></p><h3 id="6、forwardRef"><a href="#6、forwardRef" class="headerlink" title="6、forwardRef"></a>6、forwardRef</h3><p>之前从上层组件传到子组件的方式只有props，forwardRef可以传入第二个参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const Childcom=React.forwardRef((props,ref)=&gt;&#123;</div><div class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> ref=&#123;ref&#125;&gt;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">export</span> default Com extends React.Component&#123;</div><div class="line">    <span class="function"><span class="title">constructor</span></span>()&#123;</div><div class="line">        super()</div><div class="line">        this.creaRef=React.createRef()</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">componentDidMount</span></span>()&#123;</div><div class="line">        this.ref.current.value=<span class="string">"hardy forwardRef"</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        <span class="built_in">return</span> (</div><div class="line">            &lt;Childcom ref=&#123;this.ref&#125;&gt;&lt;/Childcom&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在react中forwardRef的实现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> forwardRef(render) &#123;</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> (render != null &amp;&amp; render.$<span class="variable">$typeof</span> === REACT_MEMO_TYPE) &#123;</div><div class="line">      warningWithoutStack<span class="variable">$1</span>(<span class="literal">false</span>, <span class="string">'forwardRef requires a render function but received a `memo` '</span> + <span class="string">'component. Instead of forwardRef(memo(...)), use '</span> + <span class="string">'memo(forwardRef(...)).'</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeof render !== <span class="string">'function'</span>) &#123;</div><div class="line">      warningWithoutStack<span class="variable">$1</span>(<span class="literal">false</span>, <span class="string">'forwardRef requires a render function but was given %s.'</span>, render === null ? <span class="string">'null'</span> : typeof render);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      !(</div><div class="line">      // Do not warn <span class="keyword">for</span> 0 arguments because it could be due to usage of the <span class="string">'arguments'</span> object</div><div class="line">      render.length === 0 || render.length === 2) ? warningWithoutStack<span class="variable">$1</span>(<span class="literal">false</span>, <span class="string">'forwardRef render functions accept exactly two parameters: props and ref. %s'</span>, render.length === 1 ? <span class="string">'Did you forget to use the ref parameter?'</span> : <span class="string">'Any additional parameter will be undefined.'</span>) : void 0;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (render != null) &#123;</div><div class="line">      !(render.defaultProps == null &amp;&amp; render.propTypes == null) ? warningWithoutStack<span class="variable">$1</span>(<span class="literal">false</span>, <span class="string">'forwardRef render functions do not support propTypes or defaultProps. '</span> + <span class="string">'Did you accidentally pass a React component?'</span>) : void 0;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">return</span> &#123;</div><div class="line">    $<span class="variable">$typeof</span>: REACT_FORWARD_REF_TYPE,</div><div class="line">    render: render</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="7、context"><a href="#7、context" class="headerlink" title="7、context"></a>7、context</h3><p>react中组件组件通信用props,多层组件通信的时候中间隔着不同的组件，这时候用context，父组件设置了一个context，其所有的子组件都可以通过context访问到<br>context的实现方式有两种<br>1、childContextTypes（即将被废弃）<br>2、createContext（re16提供的）<br>关系<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> default ()=&gt;&#123;</div><div class="line">    &lt;Parent&gt;</div><div class="line">        &lt;Child/&gt;</div><div class="line">        &lt;Child/&gt;</div><div class="line">    &lt;/Parent&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>父组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Parent extends React.Component&#123;</div><div class="line">    <span class="function"><span class="title">constructor</span></span>()&#123;</div><div class="line">       super()</div><div class="line">       this.state=&#123;</div><div class="line">           ChildContext:<span class="string">"hardy"</span></div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">getChildContext</span></span>()&#123;</div><div class="line">        <span class="built_in">return</span> &#123;value:this.state.ChildContext&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Parent.childContextTypes=&#123;</div><div class="line">    value:PropTypes.string   //和PropTypes一样，如果不声明是无法获取到的，</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>子组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Child.contextTypes=&#123;</div><div class="line">    value:PropTypes.string</div><div class="line">&#125;</div><div class="line">class Child extends React.Component&#123;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        <span class="built_in">return</span> (&lt;p&gt;&#123;this.context.value&#125;&lt;/p&gt;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面那是老的context用法 ，接下来是新的api<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const &#123; Provider,Consumer &#125; =React.createContext(<span class="string">'default'</span>)</div></pre></td></tr></table></figure></p><p>Provider和Consumer分别是context的提供方和订阅方,在Parent直接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Provider value=&#123;this.state.newContext&#125;&gt;&lt;/Provider&gt;</div></pre></td></tr></table></figure></p><p>然后在Child这边需要用到的地方直接,Consumer,在父组件定义了context之后，子组件的哪个地方需要用到这个context就可以直接用这个组件就可以了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Consumer&gt;&#123;value=&gt;&lt;p&gt;newContext:&#123;value&#125;&lt;/p&gt;&#125;&lt;/Consumer&gt;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/7newcreateContext.JPG" alt="newcreateContext" title="">                </div>                <div class="image-caption">newcreateContext</div>            </figure><p>createContext接收两个参数，一个是defaultValue，另一个calculateChangedBits用来计算新老API变化的，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/8newcreateContext.JPG" alt="newcreateContext" title="">                </div>                <div class="image-caption">newcreateContext</div>            </figure><br>_currentValue: defaultValue,_currentValue2: defaultValue是用来更新最新的defaultValue值</p><h3 id="8、ConCurrentMode（re16之后）"><a href="#8、ConCurrentMode（re16之后）" class="headerlink" title="8、ConCurrentMode（re16之后）"></a>8、ConCurrentMode（re16之后）</h3><p>ConCurrentMode（本叫assignMode）16.6之后名字更新，作用是让react的渲染过程进行优先的排比，并且能让整体的渲染过程中断，它可以进行任务调度，把更多的cpu性能（javascript是单线<br>程语言，如果react的某个更新渲染占用了非常长的进程，会导致动画卡顿或者其他的一些响应变卡，因为这时候js正在运行react的更新，这时候react可以有选择的优先进行优先级更高的任务，比<br>如一个人在游泳，他一次要游到水底再上来，如果他中间岸上有人有更重要的事情找他，但是只能等他先游上来才能继续，但是这个就提供了每隔一段时间会看一下是否有更重要的事情然后先做。）<br>ConCurrentMode有个特性，在ConCurrentMode子树中渲染了ConCurrentMode之后，它下面所有节点的更新就是低优先级的更新<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/9concurrentmodeJustSymbol.JPG" alt="concurrentmodeJustSymbol" title="">                </div>                <div class="image-caption">concurrentmodeJustSymbol</div>            </figure><br>react16.6已经可以使用一部分功能的新的react filter<br>Suspense：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">SuspenseComp</span></span>()&#123;</div><div class="line">    const data=requestData()</div><div class="line">    <span class="built_in">return</span> &lt;p&gt;&#123;data&#125;&lt;/p&gt;</div><div class="line">&#125;</div><div class="line"><span class="built_in">export</span> default ()=&gt;&#123;</div><div class="line">   &lt;Suspense fallback=<span class="string">"loading"</span>&gt;  </div><div class="line">       &lt;SuspenseComp/&gt;    //SuspenseComp中的data还没有的时候显示loading</div><div class="line">   &lt;/Suspense&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个api目前在正式的项目不建议用，可以先用lazy(lazy.js)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import React from <span class="string">'react'</span></div><div class="line"><span class="built_in">export</span> default ()=&gt; <span class="built_in">return</span> &lt;p&gt;lazy comp&lt;/p&gt;</div><div class="line"></div><div class="line">import React,&#123; lazy &#125; from <span class="string">'react'</span></div><div class="line">const lazyComp=lazy(()=&gt;&#123;import(./lazy.js)&#125;)</div></pre></td></tr></table></figure></p><p>这个就是用了webpack的异步加载的api,看源码之后发现Suspense也是个symbol<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/10suspenseYeshichangliangJPG.JPG" alt="suspenseYeshichangliang" title="">                </div>                <div class="image-caption">suspenseYeshichangliang</div>            </figure><br>lazy函数接收一个方法，ctor<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/11lazyNotaSymbol.JPG" alt="lazyNotaSymbol" title="">                </div>                <div class="image-caption">lazyNotaSymbol</div>            </figure><br>_status用来记录状态<br>_result用来记录promise对象返回之后的属性，最终resolve出来的会放在_result上面</p><h3 id="9、hooks"><a href="#9、hooks" class="headerlink" title="9、hooks"></a>9、hooks</h3><p>要安装hooks必须要react&amp;&amp;react-dom16.7以上，如果没有16.7.0，可以安装react16.7.0-alpha.2&amp;&amp;react-dom16.7.0-alpha.2，如果已经有了直接安装最新版<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import React,&#123; useState &#125; from <span class="string">'react'</span></div><div class="line"><span class="built_in">export</span> default ()=&gt;&#123;</div><div class="line">const [name,setname]=useState(<span class="string">'hardy'</span>)</div><div class="line"><span class="built_in">return</span> (</div><div class="line">&lt;&gt;</div><div class="line">   &lt;p&gt;my name is:&#123;name&#125;&lt;/p&gt;</div><div class="line"> &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> value=&#123;name&#125; onChange=&#123;e=&gt;setName(e.target.value)&#125;&gt;&lt;/input&gt;</div><div class="line">&lt;/&gt;</div><div class="line">)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这是一个函数组件，和class组件的区别就是没有this对象，没有this就没有this.state,也没有生命周期方法，这个demo用hooks来给组件存储state，给useState传入一个默认值，然后返回一个<br>数组，再解构。name是变量，setname是改变变量的方法.</p><h3 id="react中的diff算法"><a href="#react中的diff算法" class="headerlink" title="react中的diff算法"></a>react中的diff算法</h3><p>虚拟dom中的diff算法<br>1、state<br>2、jsx模板<br>3、数据+模板  生成虚拟dom（虚拟dom就是一个js对象，用它来描述真实dom）（损耗了性能）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'div'</span>,&#123;id:<span class="string">'abc'</span>&#125;,[<span class="string">'span'</span>,&#123;&#125;,<span class="string">'helloword'</span>]]</div></pre></td></tr></table></figure></p><p>4、用虚拟dom的结构生成真实的dom，来显示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">'abc'</span>&gt;&lt;span&gt;hello word&lt;/span&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p><p>5、state 发生变化<br>6、数据+模板  生成新的虚拟dom （提升性能）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'div'</span>,&#123;id:<span class="string">'abc'</span>&#125;,[<span class="string">'span'</span>,&#123;&#125;,<span class="string">'bye bye'</span>]]</div></pre></td></tr></table></figure></p><p>7、比较原始虚拟dom和新的虚拟dom的区别，找到区别是span中的内容（提升性能）<br>8、直接操作dom，改变span中的内容<br>优点：<br>性能提升<br>使得跨端应用得以实现（比如react native）</p><p>待续….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我年轻需要指点&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=543210521&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="jsx" scheme="http://yoursite.com/tags/jsx/"/>
    
      <category term="diff" scheme="http://yoursite.com/tags/diff/"/>
    
  </entry>
  
  <entry>
    <title>bind、call、apply</title>
    <link href="http://yoursite.com/2019/02/21/bind%E3%80%81call%E3%80%81apply/"/>
    <id>http://yoursite.com/2019/02/21/bind、call、apply/</id>
    <published>2019-02-20T16:00:00.000Z</published>
    <updated>2019-07-24T15:26:51.904Z</updated>
    
    <content type="html"><![CDATA[<p>改变this指向的三位选手，bind,call,apply。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=475475570&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>bind,call,apply这三位选手都是原型Function下面的方法，函数原型对象是Function.prototype。比如使用了.push方法，它会去Array的prototype查找是否存在该方法，如果它会顺着原<br>型链<strong>_proto</strong>继续找，直到找到null，也就是原型链prototype<br>chain的最终链接。。。。。有点飞出地球表面。。。。,这三位选手中call、apply是立即调用函数，都是在特定的作用域中调用函数，等于设置函数体内this对象的值，以扩充函数赖以运行的作用域<br>，bind则是返回一个绑定this的函数。</p></blockquote><h3 id="三位选手一般会这么用，例如有两个对象a和b"><a href="#三位选手一般会这么用，例如有两个对象a和b" class="headerlink" title="三位选手一般会这么用，例如有两个对象a和b"></a>三位选手一般会这么用，例如有两个对象a和b</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> a=&#123;</div><div class="line">name:<span class="string">'a'</span>,</div><div class="line">getName:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">console.log(this.name)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> b=&#123;</div><div class="line">name:<span class="string">'b'</span>,</div><div class="line">getName:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">console.log(this.name)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> bFunc=a.getName.bind(b)    //<span class="built_in">bind</span>将a的this指向了b，所以a里面的getName打印的this.name就是  b</div><div class="line">bFunc()</div><div class="line">a.getName.call(b)              //call将a的this指向b，所以getName打印出b</div><div class="line">b.getName.apply(a)             //apply将b的this指向a，所以getName打印出a</div></pre></td></tr></table></figure><p>bind可以传入两次参数，可以let bFunc=a.getName.bind(b,arg1,arg2….)也可以bFunc(arg1,arg2…)；call方法接收两个参数，第一个参数和apply的一样，然后传入的参数必须是列举<br>出来，可以将一个函数的对象上下文从初始的上下文改变为第一个参数指定的新对象，如果没有提供，那么this指向Global；apply接收两个参数，第一个参数是函数运行的作用域，第二个参数<br>是数组（一整个数组），如果第二个参数不是一个有效数组或者arguments对象，会导致TypeError，如果两个参没有传入的话，那么this指向Global；apply和call和bind就是传参不一样,app<br>ly和call都是会在调用的时候同时执行调用的函数,但是bind则会返回一个绑定了this的函数.</p><h3 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h3><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>需求：返回一个可以new并且与被调函数具有相同函数体的新函数，调用bind的时候传入参数长度不定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Function.prototype.hBind=<span class="keyword">function</span>(context)&#123;    //在Function的原型上增加一个hBind方法</div><div class="line">   <span class="keyword">if</span> (typeof this!==<span class="string">'function'</span>) &#123;</div><div class="line">   throw new TypeError(<span class="string">'is not a Function'</span>)</div><div class="line">   <span class="built_in">return</span></div><div class="line">   &#125;</div><div class="line">   <span class="built_in">let</span> this_=this,</div><div class="line">       aArgs=[].slice.call(arguments,1),    //arguments是类数组，[]=new Array，利用Array.prototype的slice从arguments里面拿到第一次传入的参数</div><div class="line">       F=<span class="function"><span class="title">function</span></span>()&#123;&#125;,                      //为避免出现引用类型的原型对象出现相互影响创建一个用于中专的函数F</div><div class="line">       Fb=<span class="function"><span class="title">function</span></span>()&#123;                       //返回的函数，也就是例如<span class="built_in">let</span> func=obj.bind(obj)的func</div><div class="line">       <span class="built_in">return</span> this_.apply(              </div><div class="line">       this instanceof F &amp;&amp; context?this:context||window, </div><div class="line">       aArgs.concat([].slice.call(arguments))             </div><div class="line">       )</div><div class="line">       &#125;</div><div class="line">   F.prototype=this.prototype     //函数F的原型对象复制this的原型对象</div><div class="line">   Fb.prototype=new F()           //Fb的原型对象再复制F的原型对象，，实现中专</div><div class="line">   <span class="built_in">return</span> Fb</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>需求：改变this指向和传参不定长度，可以将目标函数作为这个对象的属性，不能增加对象的属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Function.prototype.hCall=<span class="keyword">function</span>(context,...args)&#123;</div><div class="line">   <span class="keyword">if</span> (typeof this!==<span class="string">'function'</span>) &#123;</div><div class="line">   throw new TypeError(<span class="string">'is not a Function'</span>)</div><div class="line">   <span class="built_in">return</span></div><div class="line">   &#125;</div><div class="line">   <span class="built_in">let</span> cont=context||window</div><div class="line">   <span class="built_in">let</span> arrs=args?args:[]</div><div class="line">   <span class="built_in">let</span> func=Symbol()</div><div class="line">   cont[func]=this</div><div class="line">   cont[func](...arrs)</div><div class="line">   delete cont[func]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p>与call一样，只是第二个参数是数组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Function.prototype.hApply=<span class="keyword">function</span>(context,args)&#123;</div><div class="line">  <span class="keyword">if</span> (this&amp;&amp;this.constructor!==Function) &#123;</div><div class="line">  throw new TypeError(<span class="string">'is not a function'</span>)</div><div class="line">  &#125;</div><div class="line">  context=context||window</div><div class="line">  args=args?args:[]</div><div class="line">  <span class="built_in">let</span> func=Symbol()</div><div class="line">  context[func]=this</div><div class="line">  <span class="keyword">if</span> (args&amp;&amp;args.constructor===Array) &#123;</div><div class="line">  context[func](...args)</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!args) &#123;</div><div class="line">  delete context[func]</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">  throw new TypeError(<span class="string">'CreateListFromArrayLike called on non-object'</span>)</div><div class="line">  &#125;</div><div class="line">  elete context[func]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;改变this指向的三位选手，bind,call,apply。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=475475570&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="bind" scheme="http://yoursite.com/tags/bind/"/>
    
      <category term="apply" scheme="http://yoursite.com/tags/apply/"/>
    
      <category term="call" scheme="http://yoursite.com/tags/call/"/>
    
      <category term="原型" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>react+echars做的图表轮子</title>
    <link href="http://yoursite.com/2019/01/20/React-echars%E5%81%9A%E7%9A%84%E5%9B%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/20/React-echars做的图表组件/</id>
    <published>2019-01-20T15:34:27.000Z</published>
    <updated>2019-01-20T15:57:27.983Z</updated>
    
    <content type="html"><![CDATA[<p>突然用到了图表，突然想到echars，突然搞个轮子</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4874896&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>我也不知道为啥要弄它出来</p></blockquote><p>使用方法：<br>1、安装echarts依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install echarts --save</div></pre></td></tr></table></figure></p><p>2、在父组件准备需要的数据，类似这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const data = [</div><div class="line">  &#123;value: 232, name: <span class="string">"奥特之父"</span>&#125;,</div><div class="line">  &#123;value: 200, name: <span class="string">"奥特之母"</span>&#125;,</div><div class="line">  &#123;value: 325, name: <span class="string">"奥特之王"</span>&#125;,</div><div class="line">  &#123;value: 413, name: <span class="string">"佐菲"</span>&#125;,</div><div class="line">  &#123;value: 135, name: <span class="string">"初代"</span>&#125;,</div><div class="line">  &#123;value: 326, name: <span class="string">"赛文"</span>&#125;,</div><div class="line">  &#123;value: 537, name: <span class="string">"杰克"</span>&#125;,</div><div class="line">  &#123;value: 138, name: <span class="string">"艾斯"</span>&#125;,</div><div class="line">  &#123;value: 213, name: <span class="string">"泰罗"</span>&#125;,</div><div class="line">  &#123;value: 329, name: <span class="string">"雷欧"</span>&#125;</div><div class="line">]</div></pre></td></tr></table></figure></p><p>3、在父组件import这个组件之后在你想放它的地方写上它,然后给它传入数据，图表的标题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;EcharsPie data=&#123;data&#125; title=<span class="string">"各种奥特曼的占比（瞎掰的）"</span>&gt;&lt;/EcharsPie&gt;</div></pre></td></tr></table></figure></p><p>echarspie.css的样式(无关紧要，你自己show time)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.h-echarspie-box&#123;</div><div class="line">width: 100%;</div><div class="line">height: 100%;</div><div class="line">margin: 0 auto;</div><div class="line">&#125;</div><div class="line">.h-echarspie-box div&#123;</div><div class="line">width: 100%;</div><div class="line">height: 100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><a href="https://github.com/HHardyy/React-echars-pie" target="_blank" rel="external">它在这里</a><br><a href="https://echarts.baidu.com/index.html" target="_blank" rel="external">想做更丰富的可以到这里研究</a><br>它长这样:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reactEchars/show.gif" alt="它长这样" title="">                </div>                <div class="image-caption">它长这样</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然用到了图表，突然想到echars，突然搞个轮子&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=4874896&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="echars" scheme="http://yoursite.com/tags/echars/"/>
    
      <category term="图表" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法之美手记</title>
    <link href="http://yoursite.com/2018/12/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E%E6%89%8B%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/12/20/数据结构与算法之美手记/</id>
    <published>2018-12-20T01:25:03.000Z</published>
    <updated>2018-12-26T16:08:27.028Z</updated>
    
    <content type="html"><![CDATA[<p>跟随Google大佬的脚步。。。（一如既往的跟不上）</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=486412012&auto=0&height=66"></iframe><br><a id="more"></a></p><p>突然看到《数据结构与算法之美》，突然买，突然看，突然继续看，突然反复看。。。</p><h3 id="什么是数据结构？什么是算法？"><a href="#什么是数据结构？什么是算法？" class="headerlink" title="什么是数据结构？什么是算法？"></a>什么是数据结构？什么是算法？</h3><p>1、从广义上讲，数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。<br>举例：<br>图书馆储藏书籍你肯定见过吧？为了方便查找，图书管理员一般会将书籍分门别类进行“存储”。按照一定规律编号，就是书籍这种“数据”的存储结构。<br>那我们如何来查找一本书呢？有很多种办法，你当然可以一本一本地找，也可以先根据书籍类别的编号，是人文，还是科学、计算机，来定位书架，然后再依次查找。笼统地说，这些查找方法都<br>是算法。<br>2、从狭义上讲，是指某些著名的数据结构和算法，比如队列、栈、堆、二分查找、动态规划等。这些都是前人智慧的结晶，都是前人从很多实际操作场景中抽象出来的，经过非常多的求证和检验，<br>可以高效地帮助我们解决很多实际的开发问题。</p><h3 id="数据结构和算法有什么关系？"><a href="#数据结构和算法有什么关系？" class="headerlink" title="数据结构和算法有什么关系？"></a>数据结构和算法有什么关系？</h3><p>数据结构是为算法服务的，算法要作用在特定的数据结构之上。<br>举例：<br>数组具有随机访问的特点，常用的二分查找算法需要用数组来存储数据。但如果我们选择链表这种数据结构，二分查找算法就无法工作了，因为链表并不支持随机访问。<br>数据结构是静态的，它只是组织数据的一种方式。如果不在它的基础上操作、构建算法，孤立存在的数据结构就是没用的。</p><h3 id="我们怎么选用合适的数据结构和算法？有什么衡量标准吗？"><a href="#我们怎么选用合适的数据结构和算法？有什么衡量标准吗？" class="headerlink" title="我们怎么选用合适的数据结构和算法？有什么衡量标准吗？"></a>我们怎么选用合适的数据结构和算法？有什么衡量标准吗？</h3><p>衡量的标准(metric)—时间复杂度和空间复杂度，也就是数据结构与算法中最重要的概念——复杂度分析。数据结构和算法解决的是如何更省、更快地存储和处理数据的问题，因此，我们就需要<br>一个考量效率和资源消耗的方法，这就是复杂度分析方法，知道怎么去分析复杂度，才能得出正确的判断。</p><h3 id="几种常见时间复杂度实例分析"><a href="#几种常见时间复杂度实例分析" class="headerlink" title="几种常见时间复杂度实例分析"></a>几种常见时间复杂度实例分析</h3><p>虽然代码千差万别，但是常见的复杂度量级并不多。我稍微总结了一下，这些复杂度量级几乎涵盖了了你今后可以接触的所有代码的复杂度量级。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/4.jpg" alt="复杂度量级，按数量级递增" title="">                </div>                <div class="image-caption">复杂度量级，按数量级递增</div>            </figure><br>可以粗略地分为两类，多项式量级和非多项式量级，其中，非多项式量级只有两个：O(2n) 和 O(n!)。<br>当数据规模n越来越大时，非多项式量级的算法的执行时间会急剧增加，求解决问题的执行时间会无限增长，所以非多项式时间复杂度的算法其实是非常低效的算法。</p><h4 id="多项式时间复杂度"><a href="#多项式时间复杂度" class="headerlink" title="多项式时间复杂度"></a>多项式时间复杂度</h4><p>1、O（1）<br>O（1）只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码，比如这段代码，即便有三行，它的时间复杂度也是O（1），而不是O（3）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int i = 8;</div><div class="line">int j = 6;</div><div class="line">int sum = i + j;</div></pre></td></tr></table></figure></p><p>总结：只要代码的执行时间不随着n的增大而增大，这样代码的时间复杂度我们都记作O（1）。或者说，一般情况下，只要算法中不存在循环语句，递归语句，即使有成千上万行的代码，其时间复杂度也是O（1）。</p><p>2、O（logn）、O（nlogn）<br>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i=1;</div><div class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</div><div class="line">  i = i * 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>根据复杂度分析方法，第三行代码是循环执行次数最多的，所以，只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。<br>从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。<br>如果把它一个一个列出来，就应该是这个样子的：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/5.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>所以，只要知道 x 值是多少,就知道这行代码执行的次数了。通过 2x=n 求解 x。所以，这段代码的时间复杂度就是 O(log2n)。<br>现在，把代码稍微改下，再看看，这段代码的时间复杂度是多少？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">i=1;</div><div class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</div><div class="line">  i = i * 3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>根据刚刚的思路，很简单就能看出来,这段代码的时间复杂度为 O(log3n)。实际上，不管是以 2 为底、以 3 为底，还是以 10 为底。我们可以把所有对数阶的时间复杂度都记<br>为 O(logn)。为什么呢？<br>我们知道，对数之间是可以互相转换的，log3n 就等于 log32 <em> log2n，所以 O(log3n) = O(C </em>log2n)，其中 C=log32 是一个常量。基于我们前面的一个理论：在采用大<br>O标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))。所以，O(log2n) 就等于 O(log3n)。因此，在对数阶时间复杂度的表示方法里，我们忽略对数的“底”，统一表示为 O(logn)。</p><h3 id="十个经典的排序算法"><a href="#十个经典的排序算法" class="headerlink" title="十个经典的排序算法"></a>十个经典的排序算法</h3><p>看java算法教程时候的截图笔记~~~~<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/1.JPG" alt="十大经典排序算法导图" title="">                </div>                <div class="image-caption">十大经典排序算法导图</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/2.JPG" alt="对比表中关键字字母解释" title="">                </div>                <div class="image-caption">对比表中关键字字母解释</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/Algorithm/3.JPG" alt="各种术语说明" title="">                </div>                <div class="image-caption">各种术语说明</div>            </figure>  </p><h3 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h3><p>两两比较相邻的数字，左边比右边大就做交换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> bubble(arr,n)&#123;</div><div class="line"><span class="built_in">let</span> temp=null;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=0;i&lt;n-1;i++)&#123;</div><div class="line"><span class="keyword">if</span>(arr[i]&gt;arr[i+1])&#123;</div><div class="line">temp=arr[i];</div><div class="line">arr[i]=arr[i+1];</div><div class="line">arr[i+1]=temp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;//走一遍冒泡</div><div class="line"><span class="keyword">function</span> sortBble(arr,n)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i = n;i&gt;=1;i--)&#123;</div><div class="line">bubble(arr,i)</div><div class="line">&#125;</div><div class="line">&#125;//走一组冒泡</div><div class="line"><span class="built_in">let</span> arr=[1,3,2,7,5,6,4,9,8,0]</div><div class="line">sortBble(arr,arr.length)</div><div class="line">console.log(arr)</div></pre></td></tr></table></figure></p><p>有一个骚操作是可以提高冒泡排序的性能，降低时间复杂度的，也是刚get的新技能，那就是亦或，也就是这个东西^,举个栗子,封装一个冒泡排序，普通操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function sortFunc(arr)&#123;</div><div class="line">for(let i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">   for(let j = 0; j &lt;= arr.length - i - 1; j++)&#123;</div><div class="line">       if(arr[j]&gt;arr[j+1])&#123;</div><div class="line">           //普通操作</div><div class="line">           //let wap = arr[j];</div><div class="line">           //arr[j] = arr[j+1];</div><div class="line">           //arr[j+1] = wap;</div><div class="line">    </div><div class="line">           //亦或操作</div><div class="line">           arr[j] = arr[j]^arr[j+1];</div><div class="line">           arr[j+1] = arr[j]^arr[j+1];</div><div class="line">           arr[j] = arr[j]^arr[j+1];</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="2、-选择排序"><a href="#2、-选择排序" class="headerlink" title="2、 选择排序"></a>2、 选择排序</h3><p>每次走一遍数组，找到最大的数字，然后和最后一个做交换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> getMaxIndex(arr,n)&#123;</div><div class="line"><span class="built_in">let</span> max=arr[0];</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=0;i&lt;n;i++)&#123;</div><div class="line"><span class="keyword">if</span> (arr[i]&gt;max) &#123;</div><div class="line">max=arr[i]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> arr.indexOf(max)</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> selectionSort(arr,n)&#123;</div><div class="line"><span class="built_in">let</span> maxIndex,temp;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> j=n;j&gt;0;j--)&#123;</div><div class="line">maxIndex=getMaxIndex(arr,j)</div><div class="line">temp=arr[maxIndex];</div><div class="line">arr[maxIndex]=arr[j-1];</div><div class="line">arr[j-1]=temp;</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> arr</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> arr=[1,3,2,7,5,6,4,9,8,0]</div><div class="line">console.log(selectionSort(arr,arr.length))</div></pre></td></tr></table></figure></p><h3 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h3><p>将一条记录插入到已排好的有序表中，从而得到一个新的、记录数量增1的有序表。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> insert(arr,n)&#123;</div><div class="line"><span class="built_in">let</span> key=arr[n]</div><div class="line"><span class="built_in">let</span> i=n</div><div class="line"><span class="keyword">for</span>(i;arr[i-1]&gt;key;i--)&#123;</div><div class="line"><span class="keyword">if</span>(i&lt;=0)&#123;</div><div class="line"><span class="built_in">return</span></div><div class="line">&#125;</div><div class="line">arr[i]=arr[i-1];</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> arr[i]=key;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> insertSort(arr,n)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=0;i&lt;n;i++)&#123;</div><div class="line">insert(arr,i)</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> arr</div><div class="line">&#125;</div><div class="line"><span class="built_in">let</span> arr=[1,3,2,7,5,6,4,9,8,0]</div><div class="line">console.log(insertSort(arr,arr.length))</div></pre></td></tr></table></figure></p><h3 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h3><p>插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> shellSort(arr) &#123;</div><div class="line">　　var len = arr.length,</div><div class="line">　　temp,</div><div class="line">　　gap = 1;</div><div class="line">　　<span class="keyword">while</span>(gap &lt; len/5) &#123; </div><div class="line">　　　　gap =gap*5+1;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">for</span> (gap; gap &gt; 0; gap = Math.floor(gap/5)) &#123;</div><div class="line">　　　　<span class="keyword">for</span> (var i = gap; i &lt; len; i++) &#123;</div><div class="line">　　　　　　temp = arr[i];</div><div class="line">　　　　　　<span class="keyword">for</span> (var j = i-gap; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j-=gap) &#123;</div><div class="line">　　　　　　　　arr[j+gap] = arr[j];</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　　　arr[j+gap] = temp;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> arr;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(shellSort(arr));</div></pre></td></tr></table></figure></p><h3 id="5、归并排序"><a href="#5、归并排序" class="headerlink" title="5、归并排序"></a>5、归并排序</h3><p>将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> mergeSort(arr) &#123; //采用自上而下的递归方法</div><div class="line">　　var len = arr.length;</div><div class="line">　　<span class="keyword">if</span>(len &lt; 2) &#123;</div><div class="line">　　　　<span class="built_in">return</span> arr;</div><div class="line">　　&#125;</div><div class="line">　　var middle = Math.floor(len / 2),</div><div class="line">　　left = arr.slice(0, middle),</div><div class="line">　　right = arr.slice(middle);</div><div class="line">　　<span class="built_in">return</span> merge(mergeSort(left), mergeSort(right));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">function</span> merge(left, right)&#123;</div><div class="line">　　var result = [];</div><div class="line">　　<span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</div><div class="line">　　　　<span class="keyword">if</span> (left[0] &lt;= right[0]) &#123;</div><div class="line">　　　　　　result.push(left.shift());</div><div class="line">　　　　&#125; <span class="keyword">else</span> &#123;</div><div class="line">　　　　　　result.push(right.shift());</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line"> </div><div class="line">　　<span class="keyword">while</span> (left.length)&#123;</div><div class="line">　　　　result.push(left.shift());</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">while</span> (right.length)&#123;</div><div class="line">　　　　result.push(right.shift());</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> result;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(mergeSort(arr));</div></pre></td></tr></table></figure></p><h3 id="6、快速排序"><a href="#6、快速排序" class="headerlink" title="6、快速排序"></a>6、快速排序</h3><p>通过一趟排序将要排序的数据分割成独立的两部分,其中一部分的所有数据都比另外一部分的所有数据都要小,然后再按此方法对这两部分数据分别进行快速排序,整个排序过程可以递归进行,<br>以此达到整个数据变成有序序列<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> quickSort(array, left, right) &#123;</div><div class="line">　　<span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">　　　　var x = array[right], i = left - 1, temp;</div><div class="line">　　　　<span class="keyword">for</span> (var j = left; j &lt;= right; j++) &#123;</div><div class="line">　　　　　　<span class="keyword">if</span> (array[j] &lt;= x) &#123;</div><div class="line">　　　　　　　　i++;</div><div class="line">　　　　　　　　temp = array[i];</div><div class="line">　　　　　　　　array[i] = array[j];</div><div class="line">　　　　　　　　array[j] = temp;</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125;</div><div class="line">　　　　console.log(array) ;</div><div class="line">　　　　console.log(left,i) ;</div><div class="line">　　　　quickSort(array, left, i - 1);</div><div class="line">　　　　console.log(array)</div><div class="line">　　　　console.log(i,right)</div><div class="line">　　　　quickSort(array, i + 1, right);</div><div class="line">　　&#125;</div><div class="line">　　console.log(array)</div><div class="line">　　<span class="built_in">return</span> array;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(quickSort(arr,0,arr.length-1));</div></pre></td></tr></table></figure></p><h3 id="7、堆排序"><a href="#7、堆排序" class="headerlink" title="7、堆排序"></a>7、堆排序</h3><p>Heapsort是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> heapSort(array) &#123;</div><div class="line">　　var heapSize = array.length, temp;</div><div class="line">　　<span class="keyword">for</span> (var i = Math.floor(heapSize / 2) - 1; i &gt;= 0; i--) &#123;　　</div><div class="line">　　　　heapify(array, i, heapSize);</div><div class="line">　　&#125;</div><div class="line">　　//堆排序</div><div class="line">　　<span class="keyword">for</span> (var j = heapSize - 1; j &gt;= 1; j--) &#123;</div><div class="line">　　　　temp = array[0];</div><div class="line">　　　　array[0] = array[j];</div><div class="line">　　　　array[j] = temp;</div><div class="line">　　　　console.log(array)</div><div class="line">　　　　heapify(array, 0, --heapSize);</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> array;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> heapify(arr, x, len) &#123;</div><div class="line">　　var l = 2 * x + 1, r = 2 * x + 2, largest = x, temp;</div><div class="line">　　<span class="keyword">if</span> (l &lt; len &amp;&amp; arr[l] &gt; arr[largest]) &#123;</div><div class="line">　　　　largest = l;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">if</span> (r &lt; len &amp;&amp; arr[r] &gt; arr[largest]) &#123;</div><div class="line">　　　　largest = r;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">if</span> (largest != x) &#123;</div><div class="line">　　　　temp = arr[x];</div><div class="line">　　　　arr[x] = arr[largest];</div><div class="line">　　　　arr[largest] = temp;</div><div class="line">　　　　console.log(arr)</div><div class="line">　　　　heapify(arr, largest, len);</div><div class="line">　　&#125;</div><div class="line">&#125;</div><div class="line">var arr=[91,60,96,13,35,65,46,65,10,30,20,31,77,81,22];</div><div class="line">console.log(heapSort(arr));</div></pre></td></tr></table></figure></p><h3 id="8、计数排序"><a href="#8、计数排序" class="headerlink" title="8、计数排序"></a>8、计数排序</h3><p>对于给定的输入序列中的每一个元素x，确定该序列中值小于x的元素的个数（此处并非比较各元素的大小，而是通过对元素值的计数和计数值的累加来确定）。一旦有了这个信息，就可以将x直<br>接存放到最终的输出序列的正确位置上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> countingSort(array) &#123;</div><div class="line">　　var len = array.length,</div><div class="line">　　B = [],</div><div class="line">　　C = [],</div><div class="line">　　min = max = array[0];</div><div class="line">　　<span class="keyword">for</span> (var i = 0; i &lt; len; i++) &#123;</div><div class="line">　　　　min = min &lt;= array[i] ? min : array[i];</div><div class="line">　　　　max = max &gt;= array[i] ? max : array[i];</div><div class="line">　　　　C[array[i]] = C[array[i]] ? C[array[i]] + 1 : 1;</div><div class="line">　　　　console.log(C)</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">for</span> (var j = min; j &lt; max; j++) &#123;</div><div class="line">　　　　C[j + 1] = (C[j + 1] || 0) + (C[j] || 0);</div><div class="line">　　　　console.log(C)</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">for</span> (var k = len - 1; k &gt;= 0; k--) &#123;</div><div class="line">　　　　B[C[array[k]] - 1] = array[k];</div><div class="line">　　　　C[array[k]]--;</div><div class="line">　　　　console.log(B)</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> B;</div><div class="line">&#125;</div><div class="line">var arr = [2, 2, 3, 8, 7, 1, 2, 2, 2, 7, 3, 9, 8, 2, 1, 4, 2, 4, 6, 9, 2];</div><div class="line">console.log(countingSort(arr));</div></pre></td></tr></table></figure></p><h3 id="9、桶排序"><a href="#9、桶排序" class="headerlink" title="9、桶排序"></a>9、桶排序</h3><p>将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> bucketSort(array, num) &#123;</div><div class="line">　　<span class="keyword">if</span> (array.length &lt;= 1) &#123;</div><div class="line">　　　　<span class="built_in">return</span> array;</div><div class="line">　　&#125;</div><div class="line">　　var len = array.length, buckets = [], result = [], min = max = array[0], space, n = 0;</div><div class="line"></div><div class="line">　　var index = Math.floor(len / num) ;</div><div class="line">　　<span class="keyword">while</span>(index&lt;2)&#123;</div><div class="line"></div><div class="line">　　　　num--;</div><div class="line">　　　　index = Math.floor(len / num) ;</div><div class="line">　　&#125;</div><div class="line"></div><div class="line">　　<span class="keyword">for</span> (var i = 1; i &lt; len; i++) &#123;</div><div class="line">　　　　min = min &lt;= array[i] ? min : array[i];</div><div class="line">　　　　max = max &gt;= array[i] ? max : array[i];</div><div class="line">　　&#125;</div><div class="line">　　space = (max - min + 1) / num;  //步长</div><div class="line">　　<span class="keyword">for</span> (var j = 0; j &lt; len; j++) &#123;</div><div class="line">　　　　var index = Math.floor((array[j] - min) / space);</div><div class="line">　　　　<span class="keyword">if</span> (buckets[index]) &#123; // 非空桶，插入排序</div><div class="line">　　　　　　var k = buckets[index].length - 1;</div><div class="line">　　　　　　<span class="keyword">while</span> (k &gt;= 0 &amp;&amp; buckets[index][k] &gt; array[j]) &#123;</div><div class="line">　　　　　　　　buckets[index][k + 1] = buckets[index][k];</div><div class="line">　　　　　　　　k--;</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　　　buckets[index][k + 1] = array[j];</div><div class="line">　　　　&#125; <span class="keyword">else</span> &#123; //空桶，初始化</div><div class="line">　　　　　　buckets[index] = [];</div><div class="line">　　　　　　buckets[index].push(array[j]);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">while</span> (n &lt; num) &#123;</div><div class="line">　　　　result = result.concat(buckets[n]);</div><div class="line">　　　　n++;</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> result;</div><div class="line">&#125;</div><div class="line">var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];</div><div class="line">console.log(bucketSort(arr,4));</div></pre></td></tr></table></figure></p><h3 id="10、基数排序"><a href="#10、基数排序" class="headerlink" title="10、基数排序"></a>10、基数排序</h3><p>透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)<br>，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> radixSort(arr, maxDigit) &#123;</div><div class="line">　　var mod = 10;</div><div class="line">　　var dev = 1;</div><div class="line">　　var counter = [];</div><div class="line">　　<span class="keyword">for</span> (var i = 0; i &lt; maxDigit; i++, dev *= 10, mod *= 10) &#123;</div><div class="line">　　　　<span class="keyword">for</span>(var j = 0; j &lt; arr.length; j++) &#123;</div><div class="line">　　　　　　var bucket = parseInt((arr[j] % mod) / dev);</div><div class="line">　　　　　　<span class="keyword">if</span>(counter[bucket]== null) &#123;</div><div class="line">　　　　　　　　counter[bucket] = [];</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　counter[bucket].push(arr[j]);</div><div class="line">　　　　&#125;</div><div class="line">　　　　var pos = 0;</div><div class="line">　　　　<span class="keyword">for</span>(var j = 0; j &lt; counter.length; j++) &#123;</div><div class="line">　　　　　　var value = null;</div><div class="line">　　　　　　<span class="keyword">if</span>(counter[j]!=null) &#123;</div><div class="line">　　　　　　　　<span class="keyword">while</span> ((value = counter[j].<span class="built_in">shift</span>()) != null) &#123;</div><div class="line">　　　　　　　　　　arr[pos++] = value;</div><div class="line">　　　　　　　　&#125;</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　<span class="built_in">return</span> arr;</div><div class="line">&#125;</div><div class="line">var arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];</div><div class="line">console.log(radixSort(arr,2));</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟随Google大佬的脚步。。。（一如既往的跟不上）&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=486412012&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树算法原理</title>
    <link href="http://yoursite.com/2018/12/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/12/05/二叉树算法原理/</id>
    <published>2018-12-04T16:08:31.000Z</published>
    <updated>2018-12-05T04:07:17.622Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树原理手记。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=865014922&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根结点的度不大于2。有了根结点之后，每个顶点定义了唯一的父结点，和最多2个子结<br>点。然而，没有足够的信息来区分左结点和右结点。如果不考虑连通性，允许图中有多个连通分量，这样的结构叫做森林。二叉树是由n（n&gt;=0）个结点组成的有序集合<br>集合或者为空，或者是由一个根节点加上两棵分别称为左子树和右子树的、互不相交的二叉树组成。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/1.JPG" alt="“二叉树”" title="">                </div>                <div class="image-caption">“二叉树”</div>            </figure>  <h3 id="设计二叉树逻辑"><a href="#设计二叉树逻辑" class="headerlink" title="设计二叉树逻辑"></a>设计二叉树逻辑</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">BinaryTree</span></span>()&#123;</div><div class="line">//定义节点</div><div class="line">var Node=<span class="keyword">function</span>(key)&#123;</div><div class="line">this.key=key;</div><div class="line">this.left=null;</div><div class="line">this.right=null;</div><div class="line">&#125;;</div><div class="line">//定义一个根节点</div><div class="line">var root=null;</div><div class="line">//node老节点,newNode新节点（要插入一个新节点的时候，如果新节点比当前的老节点的值要小，那么就可以把新节点放到老节点的左边）</div><div class="line">var insertNode=<span class="keyword">function</span>(node,newNode)&#123;  </div><div class="line"><span class="keyword">if</span> (node.key&gt;newNode.key) &#123;   //如果新节点小于老节点或者</div><div class="line"><span class="keyword">if</span> (node.left===null) &#123;    //如果新节点还没有左节点的话</div><div class="line">node.left=newNode;     //可以把新节点当作老节点的左孩子</div><div class="line">&#125;<span class="keyword">else</span>&#123;   //如果已经有左孩子了，就将这个新节点插入到左节点的左边部分</div><div class="line">insertNode(node.left,newNode);</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;    //如果新节点大于老节点、，就插入老节点右边部分</div><div class="line"><span class="keyword">if</span>(node.right===null)&#123;   //看老节点右边部分是不是为空</div><div class="line">node.right=newNode;   //如果老节点右边为空，就把这个新节点作为老节点的右孩子</div><div class="line">&#125;<span class="keyword">else</span>&#123;    //如果右孩子不为空的话，继续往右边添加</div><div class="line">insertNode(node.right,newNode);                                         //到此为止，整个树的插入逻辑就设计完成了</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.insert=<span class="keyword">function</span>(key)&#123;   //专门用来插入节点</div><div class="line">var newNode=new Node(key)  //根据传进来的节点数值，构造一个节点对象</div><div class="line"><span class="keyword">if</span> (root===null) &#123;       //如果此时根节点是空</div><div class="line">root=newNode;        //新插入的节点就是根节点</div><div class="line">&#125;<span class="keyword">else</span>&#123;                  //否则根据排序二叉树的特性插入新的节点</div><div class="line">insertNode(root,newNode)    //插入新节点的方法</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="树逻辑设计完成之后，构造一系列节点，来调用这个二叉树的接口，进行节点插入的过程"><a href="#树逻辑设计完成之后，构造一系列节点，来调用这个二叉树的接口，进行节点插入的过程" class="headerlink" title="树逻辑设计完成之后，构造一系列节点，来调用这个二叉树的接口，进行节点插入的过程"></a>树逻辑设计完成之后，构造一系列节点，来调用这个二叉树的接口，进行节点插入的过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var ndoes=[8,3,10,1,6,14,4,7,13];   //构造一个数组定义插入节点的数值</div><div class="line">var binaryTree=new BinaryTree();    //实例化一个BinaryTree</div><div class="line">//然后依次把数组中的数值插入二叉树，插入完之后，完整的二叉树就构成了</div><div class="line">ndoes.forEach(<span class="keyword">function</span>(key)&#123;</div><div class="line">    binaryTree.insert(key)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>一开始二叉树是空的，所以第一次插入节点的时候节点8就成了根节点，也就是起始二叉树的根节点<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/2.JPG" alt="“进入的第一个节点”" title="">                </div>                <div class="image-caption">“进入的第一个节点”</div>            </figure><br>用chrome调试可以看到二叉树生成的过程<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/3.JPG" alt="“根节点8”" title="">                </div>                <div class="image-caption">“根节点8”</div>            </figure><br>第二个节点3进来的时候会和根节点比较，然后成为节点8的左孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/4.JPG" alt="“左孩子3”" title="">                </div>                <div class="image-caption">“左孩子3”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/5.JPG" alt="“左孩子3”" title="">                </div>                <div class="image-caption">“左孩子3”</div>            </figure><br>第三次进来的时候是节点10，节点10会和8比对，发现比8大并且节点8的右孩子节点为空，所以节点10就成了节点8的右孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/6.JPG" alt="“左孩子3”" title="">                </div>                <div class="image-caption">“左孩子3”</div>            </figure><br>第四次进来的是节点1，此时二叉树已经有了根节点8以及左孩子3，右孩子10，然后进来的1比8小，而且此时已经有了左孩子3,左孩子3此时是没有左右孩子节点的，所以进来的1成了3的左孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/7.JPG" alt="“左孩子1”" title="">                </div>                <div class="image-caption">“左孩子1”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/8.JPG" alt="“左孩子1进来的时候和8比对”" title="">                </div>                <div class="image-caption">“左孩子1进来的时候和8比对”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/9.JPG" alt="“左孩子1和8比对之后和3比对”" title="">                </div>                <div class="image-caption">“左孩子1和8比对之后和3比对”</div>            </figure><br>第五次加入的是节点6，由于节点6是小于节点8的并且大于此时节点8的左孩子节点3，所以就成了此时空着的节点3的右节点<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/10.JPG" alt="“根节点8的左子树3的右孩子”" title="">                </div>                <div class="image-caption">“根节点8的左子树3的右孩子”</div>            </figure><br>它的过程是6进来的时候和8比对，然后8此时有了左孩子3，然后6和3比对，6&gt;3而且此时3没有右孩子，所以就成了3的右孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/11.JPG" alt="“6和8比对”" title="">                </div>                <div class="image-caption">“6和8比对”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/12.JPG" alt="“6和3比对”" title="">                </div>                <div class="image-caption">“6和3比对”</div>            </figure><br>第六次进来的是节点14，由于节点14大于节点8所以走右边，因为节点8的右孩子此时是10,14大于10而且节点10此时没有右孩子，所以就成了节点10的右孩子<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/13.JPG" alt="“此时的二叉树”" title="">                </div>                <div class="image-caption">“此时的二叉树”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/14.JPG" alt="“14和8比对”" title="">                </div>                <div class="image-caption">“14和8比对”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/15.JPG" alt="“14和10比对”" title="">                </div>                <div class="image-caption">“14和10比对”</div>            </figure><br>以此类推，最后根据给的数组生成了一颗二叉树<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/16.JPG" alt="“生成的排序二叉树”" title="">                </div>                <div class="image-caption">“生成的排序二叉树”</div>            </figure><br>有了一棵构建好的排序二叉树之后，可以用遍历获取二叉树中每个节点的信息，遍历分三种方法，中序遍历、前序遍历、后序遍历</p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历（LDR）是二叉树遍历的一种，也叫做中根遍历、中序周游。在二叉树中，中序遍历首先遍历左子树，然后访问根结点，最后遍历右子树。<br>假如此时我处于某一个节点，处于这个节点的时候，我先看左孩子有没有，如果有的话，遍历整棵左子树，遍历完整棵左子树之后再返回来输出当前节点，输出完之后<br>再去遍历整棵右子树，遍历完之后，一个节点的左子树和右子树以及它本身就都被遍历完了，然后它沿着箭头向它的父节点遍历，依赖这个中序遍历的话实际上是以升<br>序的方式访问整个二叉树的节点</p><h4 id="给BinaryTree增加一个中序遍历的接口"><a href="#给BinaryTree增加一个中序遍历的接口" class="headerlink" title="给BinaryTree增加一个中序遍历的接口"></a>给BinaryTree增加一个中序遍历的接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var inOrderTraverseNode=<span class="keyword">function</span>(node,callback)&#123;    //node=二叉树的节点对象,callback=普通回调函数</div><div class="line"><span class="keyword">if</span>(node!==null)&#123;   //如果节点不为空的话</div><div class="line">    inOrderTraverseNode(node.left,callback)  //访问它的左子树</div><div class="line">    callback(node.key)   //访问完左子树之后访问当前节点，然后把当前节点的值传入回调函数中</div><div class="line">    inOrderTraverseNode(node.right,callback)  //继续访问当前节点的右子树</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//callback=待会要输出某个节点的值得时候，把这个节点的值传入到这个回调函数中，让这个回调函数决定如何输出</div><div class="line">this.inOrderTraverse=<span class="keyword">function</span>(callback)&#123;        </div><div class="line">inOrderTraverseNode(root,callback)   //从根节点开始遍历</div><div class="line">&#125;</div><div class="line"></div><div class="line">var callback=<span class="keyword">function</span>(key)&#123;</div><div class="line">    console.log(key)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调BinaryTree的中序接口</div><div class="line">binaryTree.inOrderTraverse(callback)</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/a.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>前序遍历（DLR），是二叉树遍历的一种，也叫做先根遍历、先序遍历、前序周游，可记做根左右。前序遍历首先访问根结点然后遍历左子树，最后遍历右子树。</p><h4 id="给BinaryTree增加一个前序遍历的接口"><a href="#给BinaryTree增加一个前序遍历的接口" class="headerlink" title="给BinaryTree增加一个前序遍历的接口"></a>给BinaryTree增加一个前序遍历的接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var preOrderTraverseNode=<span class="keyword">function</span>(node,callback)&#123;</div><div class="line"><span class="keyword">if</span>(node!==null)&#123;</div><div class="line">callback(node.key)</div><div class="line">preOrderTraverseNode(node.left,callback)   //遍历该节点左子树</div><div class="line">preOrderTraverseNode(node.right,callback)  //遍历该节点的右子树</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.preOrderTraverse=<span class="keyword">function</span>(callback)&#123;</div><div class="line">preOrderTraverseNode(root,callback)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调BinaryTree的前序接口</div><div class="line">binaryTree.preOrderTraverse(callback)</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/b.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历（LRD）是二叉树遍历的一种，也叫做后根遍历、后序周游，可记做左右根。后序遍历有递归算法和非递归算法两种。在二叉树中，先左后右再根，即首先遍历<br>左子树，然后遍历右子树，最后访问根结点。</p><h4 id="给BinaryTree增加一个后序遍历的接口"><a href="#给BinaryTree增加一个后序遍历的接口" class="headerlink" title="给BinaryTree增加一个后序遍历的接口"></a>给BinaryTree增加一个后序遍历的接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var postOrderTraverseNode=<span class="keyword">function</span>(node,callback)&#123;</div><div class="line"><span class="keyword">if</span> (node!==null) &#123;</div><div class="line">postOrderTraverseNode(node.left,callback) //先遍历当前节点的左子树</div><div class="line">postOrderTraverseNode(node.right,callback) //遍历完左子树之后遍历右子树</div><div class="line">callback(node.key)   //遍历完之后输出节点的值</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.postOrderTraverse=<span class="keyword">function</span>(callback)&#123;</div><div class="line">postOrderTraverseNode(root,callback)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调BinaryTree的前序接口</div><div class="line">binaryTree.postOrderTraverse(callback)</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/c.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><h3 id="二叉树节点查找"><a href="#二叉树节点查找" class="headerlink" title="二叉树节点查找"></a>二叉树节点查找</h3><p>主要是看某个给定数值的节点是否在二叉树中存在，设想开发作战游戏，飞机发出导弹的运行轨迹在不断改变，那它能否击中外星人了，这样就把外星人的坐标当成<br>一个二叉树，导弹前进的时候坐标也在变化，导弹每前进一次，坐标变化之后就在外星人坐标的二叉树中查找，如果导弹的坐标和外星人在二叉树中的坐标重合的话<br>，也就是说，在二叉树中找到了一个数值和导弹的数值是一样的，也就是击中了，要是找不到的话，就说明导弹击不中外星人</p><h4 id="二叉树的节点查找分三种"><a href="#二叉树的节点查找分三种" class="headerlink" title="二叉树的节点查找分三种"></a>二叉树的节点查找分三种</h4><p>1、查找二叉树最小节点，从当前节点出发查找节点左子树<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//查找二叉树最小节点接口</div><div class="line">var minNode=<span class="keyword">function</span>(node)&#123;</div><div class="line"><span class="keyword">if</span>(node)&#123;</div><div class="line"><span class="keyword">while</span>(node&amp;&amp;node.left!==null)&#123;</div><div class="line">node=node.left</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> node.key</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> null</div><div class="line">&#125;</div><div class="line">this.min=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="built_in">return</span> minNode(root)</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(`二叉树的最小节点是<span class="variable">$&#123;binaryTree.min()&#125;</span>`)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/d.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><p>2、查找二叉树最大节点，从当前节点出发查找节点右子树<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//查找二叉树最大节点接口</div><div class="line">var maxNode=<span class="keyword">function</span>(node)&#123;</div><div class="line"><span class="keyword">if</span> (node) &#123;</div><div class="line"><span class="keyword">while</span>(node&amp;&amp;node.right!==null)&#123;</div><div class="line">node=node.right</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> node.key</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> null</div><div class="line">&#125;</div><div class="line">this.max=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="built_in">return</span> maxNode(root)</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(`二叉树的最小节点是<span class="variable">$&#123;binaryTree.max()&#125;</span>`)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/e.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><p>3、给定某个节点数值，然后和根节点进行比对大小，大的话从右子树继续比对，小的话就是左子树，如果是一样的话，直接返回当前节点的值，如果没找到可以认为是查找失败<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//查找给定的节点</div><div class="line">var searchNode=<span class="keyword">function</span>(node,key)&#123;</div><div class="line"><span class="keyword">if</span> (node===null) &#123;</div><div class="line"><span class="built_in">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (node.key&gt;key) &#123;</div><div class="line"><span class="built_in">return</span> searchNode(node.left,key)</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (node.key&lt;key) &#123;</div><div class="line"><span class="built_in">return</span> searchNode(node.right,key)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="built_in">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.search=<span class="keyword">function</span>(key)&#123;</div><div class="line"><span class="built_in">return</span> searchNode(root,key)</div><div class="line">&#125;</div><div class="line">console.log(binaryTree.search(6)?`key is 6`:`not found`)   //6是二叉树中有的节点</div><div class="line">console.log(binaryTree.search(16)?`key is 16`:`not found`)   //16是二叉树中没有的节点</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/f.gif" alt="“打断点调试”" title="">                </div>                <div class="image-caption">“打断点调试”</div>            </figure><h3 id="二叉树节点删除"><a href="#二叉树节点删除" class="headerlink" title="二叉树节点删除"></a>二叉树节点删除</h3><h4 id="删除只有一个子树的节点"><a href="#删除只有一个子树的节点" class="headerlink" title="删除只有一个子树的节点"></a>删除只有一个子树的节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//接口</div><div class="line">var removeNode=<span class="keyword">function</span>(node,key)&#123;</div><div class="line"><span class="keyword">if</span> (node===null) &#123;</div><div class="line"><span class="built_in">return</span> null</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (key&lt;node.key) &#123;</div><div class="line">node.left=removeNode(node.left,key)</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key&gt;node.key) &#123;</div><div class="line">node.right=removeNode(node.right,key)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">if</span> (node.left===null&amp;&amp;node.right===null) &#123;</div><div class="line">node=null</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (node.left===null) &#123;</div><div class="line">node=node.right</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (node.right===null) &#123;</div><div class="line">node=node.left</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.remove=<span class="keyword">function</span>(key)&#123;</div><div class="line">removeNode(root,key)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//调接口</div><div class="line">binaryTree.remove(10)    //删除节点10</div></pre></td></tr></table></figure><p>假如删除的节点含有左右子树的话，就要从被删除节点的右子树中找到最小的子节点，然后将要删除的节点的值换成找到的最小的子节点的值，这样二叉树里面就有<br>两个相同的节点，这时候就要把最小子节点去掉，做完这些步骤之后二叉树仍然是保持平衡性质的，这时候接口可以改成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">var findMinNode=<span class="keyword">function</span>(node)&#123;</div><div class="line"><span class="keyword">if</span> (node) &#123;</div><div class="line"><span class="keyword">while</span>(node&amp;&amp;node.left!==null)&#123;</div><div class="line">node=node.left</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line">var removeNode=<span class="keyword">function</span>(node,key)&#123;</div><div class="line"><span class="keyword">if</span> (node===null) &#123;</div><div class="line"><span class="built_in">return</span> null</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (key&lt;node.key) &#123;</div><div class="line">node.left=removeNode(node.left,key)</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (key&gt;node.key) &#123;</div><div class="line">node.right=removeNode(node.right,key)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">if</span> (node.left===null&amp;&amp;node.right===null) &#123;</div><div class="line">node=null</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (node.left===null) &#123;</div><div class="line">node=node.right</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (node.right===null) &#123;</div><div class="line">node=node.left</div><div class="line"><span class="built_in">return</span> node</div><div class="line">&#125;</div><div class="line">//执行到这里就说明这是有两个子树的节点</div><div class="line">var aux=findMinNode(node.right)  //找到这个节点，在节点右子树中找到最小的子节点</div><div class="line">node.key=aux.key    //找到之后把这个节点的值更新成这个子节点的值</div><div class="line">node.right=removeNode(node.right,aux.key)   //从右子树中把这个最小子节点删除</div><div class="line"><span class="built_in">return</span> node     //删除之后得到平衡的二叉树</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">this.remove=<span class="keyword">function</span>(key)&#123;</div><div class="line">removeNode(root,key)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>应用场景：前序遍历用于复制二叉树，因为即使你想重新根据节点生成，如果节点多的话，算法的空间复杂度是很大的，前序遍历复制的效率要比重新生成的效率高出10倍左右<br>，中序遍历可用于排序，后序遍历可以用在系统文件检索。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/binarytree/666.jpg" alt="最后放上我偶像" title="">                </div>                <div class="image-caption">最后放上我偶像</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树原理手记。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=865014922&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="中序遍历" scheme="http://yoursite.com/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="前序遍历" scheme="http://yoursite.com/tags/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="后序遍历" scheme="http://yoursite.com/tags/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
      <category term="二叉树节点查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%8A%82%E7%82%B9%E6%9F%A5%E6%89%BE/"/>
    
      <category term="二叉树节点删除" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%8A%82%E7%82%B9%E5%88%A0%E9%99%A4/"/>
    
  </entry>
  
  <entry>
    <title>react造了一个PC城市选择的轮子</title>
    <link href="http://yoursite.com/2018/11/16/react%E9%80%A0%E4%BA%86%E4%B8%80%E4%B8%AAPC%E5%9F%8E%E5%B8%82%E9%80%89%E6%8B%A9%E7%9A%84%E8%BD%AE%E5%AD%90/"/>
    <id>http://yoursite.com/2018/11/16/react造了一个PC城市选择的轮子/</id>
    <published>2018-11-16T04:48:42.000Z</published>
    <updated>2018-12-04T18:04:31.917Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一个react项目的时候，突然想做出来留着下次需要就二次开</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=167679&auto=0&height=66"></iframe><br><a id="more"></a></p><p>在做城市选择的时候，找了网上的一些现成资料，但是都是移动端的，PC的太少，antd的我自己觉得不太好用，然后就想着自己写一个备用，下次需要就在它基础上二次开发就可以了<br><a href="https://github.com/HHardyy/react-cityselect" target="_blank" rel="external">它在这里</a><br>，这个不是我项目里面的，毕竟项目里面的代码不能暴露，这是我重新设计的极简版，没有太多余的依赖文件，可以扩展的空间也更多，demo是我用脚手架建的一个简单的使用这个组件的例子，里头我用的是redux和装饰器来做。</p><blockquote><p>用的时候初始化一下ul的默认样式（margin，padding）</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reactCselect/aaa.gif" alt="“跑起来”" title="">                </div>                <div class="image-caption">“跑起来”</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做一个react项目的时候，突然想做出来留着下次需要就二次开&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=167679&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="轮子" scheme="http://yoursite.com/tags/%E8%BD%AE%E5%AD%90/"/>
    
      <category term="城市选择" scheme="http://yoursite.com/tags/%E5%9F%8E%E5%B8%82%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>Ant Design of React(Upload)</title>
    <link href="http://yoursite.com/2018/11/06/Ant-Design-of-React-Upload/"/>
    <id>http://yoursite.com/2018/11/06/Ant-Design-of-React-Upload/</id>
    <published>2018-11-05T16:11:51.000Z</published>
    <updated>2018-11-05T17:49:57.397Z</updated>
    
    <content type="html"><![CDATA[<p>日常记录，Upload大家都懂，写接口接Upload大家也都会，但是别拦我，我说说我遇到的antd Design的Upload</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1320593213&auto=0&height=66"></iframe><br><a id="more"></a></p><p>假如我有个文件要上传到服务器并且返回文件保存的路径，那我可能会像下面这么写</p><blockquote><p>FormData对象用以将数据编译成键值对，以便用XMLHttpRequest来发送数据。其主要用于发送表单数据，但亦可用于发送带键数据(keyed data)<br>而独立于表单使用。如果表单enctype属性设为multipart/form-data ，则会使用表单的submit()方法来发送数据，从而，发送数据具有同样形式。</p></blockquote><p>前端代码,也就是你点击上传或者发送或者什么的之后执行的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">handleUpload = () =&gt; &#123;</div><div class="line">//为文件创建formData，key是files</div><div class="line">    const formData = new FormData();</div><div class="line">    fileList.forEach((file) =&gt; &#123;</div><div class="line">      formData.append(<span class="string">'files'</span>, file);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    this.setState(&#123;</div><div class="line">      uploading: <span class="literal">true</span>,</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    reqwest(&#123;</div><div class="line">      url: <span class="string">'/upload'</span>,</div><div class="line">      method: <span class="string">'post'</span>,</div><div class="line">      processData: <span class="literal">false</span>,</div><div class="line">      data: formData,</div><div class="line">      success: (resp) =&gt; &#123;</div><div class="line">      console.log(resp)</div><div class="line">        this.setState(&#123;</div><div class="line">          fileList: [],</div><div class="line">          uploading: <span class="literal">false</span>,</div><div class="line">        &#125;);</div><div class="line">        message.success(<span class="string">'upload successfully.'</span>);</div><div class="line">      &#125;,</div><div class="line">      error: () =&gt; &#123;</div><div class="line">        this.setState(&#123;</div><div class="line">          uploading: <span class="literal">false</span>,</div><div class="line">        &#125;);</div><div class="line">        message.error(<span class="string">'upload failed.'</span>);</div><div class="line">      &#125;,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>接口,比较简陋，主要是看看直接接收会出来什么东西<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> upload = multer(&#123;dest:<span class="string">'./目录/我的路径'</span>&#125;); //设置文件存储位置</div><div class="line">app.use(express.static(<span class="string">'./目录'</span>));           //设置静态文件目录</div><div class="line">app.post(<span class="string">"/upload"</span>,upload.single(<span class="string">'files'</span>),(req, res) =&gt; &#123;</div><div class="line">    console.log(req.file)</div><div class="line">    const initFileName=req.file.originalname  //原始文件名</div><div class="line">    console.log(initFileName)</div><div class="line">    res.send(<span class="string">'./uploads/'</span> + initFileName)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>然后我选择一个叫测试.doc的文档上传。接着打开浏览器调试看看给我返回了什么<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/1.JPG" alt="response" title="">                </div>                <div class="image-caption">response</div>            </figure><br>返回的文件地址，文件名是一串uuid的编码，开始我以为是组件默认的加密之后，但是服务器打印出来的文件信息显示encoding是“7bit”，所以并不是它默认加密或者什么<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/2.JPG" alt="服务器打印" title="">                </div>                <div class="image-caption">服务器打印</div>            </figure><br>（虽然是uuid编码，但是两个图文件名为啥不一样。。。这个怪我这个爪，是因为服务器的时候我又拖了个文件上传，其实同一个文件的话，它是一样的）<br>当然你想直接console.log(formData)查看数据是不可以的，formData不允许，只允许类似这样的操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> formData = new FormData()</div><div class="line">formData.append(<span class="string">'user'</span>, <span class="string">'hhardyy'</span>)</div><div class="line">获取 formData.get(<span class="string">'user'</span>)  </div><div class="line">删除 formData.delete(<span class="string">'user'</span>)</div><div class="line">打印出来看的话就是 console.log(formData.get(<span class="string">'user'</span>))</div></pre></td></tr></table></figure></p><p>假如怀疑是不是真的上传有文件的话，可以看看我们发的请求<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/3.JPG" alt="服务器打印" title="">                </div>                <div class="image-caption">服务器打印</div>            </figure><br>实际上不仅是路径上的文件名变成了uuid编码，保存的文件名字也是一样<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/4.JPG" alt="formData的信息" title="">                </div>                <div class="image-caption">formData的信息</div>            </figure><br>这时候如果想让保存的文件名字是上传时候的名字或者自定义名字的话可以这么操作，上面那个后台接收其实用的是Express4.x的中间件multer，它有个东西叫diskstorage，可以用来自定义存储位<br>置和自定义文件名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var storage = multer.diskStorage(&#123;</div><div class="line">  destination: <span class="keyword">function</span> (req, file, cb) &#123;</div><div class="line">    cb(null, <span class="string">'文件存储目录'</span>)</div><div class="line">  &#125;,</div><div class="line">  filename: <span class="keyword">function</span> (req, file, cb) &#123;</div><div class="line">    cb(null, <span class="string">'文件名'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"> </div><div class="line">var upload = multer(&#123; storage: storage &#125;)</div></pre></td></tr></table></figure></p><p>安装 multer<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install multer --save</div></pre></td></tr></table></figure></p><p>destination和filename函数的参数req在这里.body都是空对象{}，未装载formdata的文本域数据。file虽然装载了文件对象，但是信息不全。<br>接口可以改成这么写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> storage = multer.diskStorage(&#123;</div><div class="line">    destination: <span class="keyword">function</span> (req, file, cb) &#123;</div><div class="line">        cb(null, <span class="string">'./我的路径'</span>);</div><div class="line">    &#125;,//指定存储路径</div><div class="line">    filename: <span class="keyword">function</span> (req, file, cb) &#123;</div><div class="line">    //originalname=原始文件名，原始文件名是测试.doc，我把它后缀干掉，下面改成文件名+上传时间+文件后缀</div><div class="line">        <span class="built_in">let</span> fileName=file.originalname.substring(0,file.originalname.indexOf(<span class="string">'.'</span>,0))    </div><div class="line">        cb(null, fileName + <span class="string">'-'</span> + Date.now() + <span class="string">'.doc'</span>);//指定文件名和扩展名</div><div class="line">    &#125;</div><div class="line">&#125;);//指定存储方法,upload.single=单个文件，upload.Array=多个文件</div><div class="line">app.use(express.static(<span class="string">'./我的路径'</span>));       //设置静态文件目录</div><div class="line"><span class="built_in">let</span> upload = multer(&#123; storage: storage &#125;);  //存储方法，5是限制大小，files是前端的files，一定要是一样的</div><div class="line">app.use(upload.single(<span class="string">'files'</span>, 5));</div><div class="line">app.post(<span class="string">'/upload'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">    res.send(<span class="string">'./路径'</span> + req.file.filename);  //文件的下载地址</div><div class="line">    console.log(req.file)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>这样就正常了。继续深入了解可以去了解一下multer，这只是个简单的demo<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/AntDesignofReact/5.JPG" alt="保存的文件" title="">                </div>                <div class="image-caption">保存的文件</div>            </figure></p><p>还有一个问题就是返回的文件路径我想让别人点击一下就可以访问，那我这时候会用一个a来包裹，然后返回给前端直接可以点链接访问到文件的连接，但是后台返回的是字符串，你到前端的时候显示也是字符串，就像<br>这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"http://<span class="variable">$&#123;this.state.fileAddress&#125;</span>"</span>&gt;请点击查看我的简历&lt;/a&gt;</div></pre></td></tr></table></figure></p><p>其实在做react项目时，有时候需要将后台传过来的html元素的字符串形式变成真正的dom渲染到页面，如果直接插入的话页面显示的就是这段字符串，它不会自己进行转义，这时候可以在你要渲染的元素那写上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span dangerouslySetInnerHTML=&#123;&#123;__html: xxx&#125;&#125;&gt;&lt;/span&gt;               // xxx是你的那段字符串，只是html元素会被转义成dom</div></pre></td></tr></table></figure></p><p>语法是这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> str=<span class="string">"&lt;a href="</span>https://hhardyy.com/<span class="string">"&gt;hhardyy&lt;/a&gt;"</span></div><div class="line">&lt;span dangerouslySetInnerHTML=&#123;&#123;__html: str&#125;&#125;&gt;&lt;span/&gt;</div></pre></td></tr></table></figure></p><p>今晚正好做了简历点对点发送接收功能，顺便写一写demo。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常记录，Upload大家都懂，写接口接Upload大家也都会，但是别拦我，我说说我遇到的antd Design的Upload&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1320593213&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="字符串html元素渲染" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2html%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93/"/>
    
      <category term="multer" scheme="http://yoursite.com/tags/multer/"/>
    
      <category term="Upload" scheme="http://yoursite.com/tags/Upload/"/>
    
  </entry>
  
  <entry>
    <title>浅谈高阶组件</title>
    <link href="http://yoursite.com/2018/10/05/%E6%B5%85%E8%B0%88%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/10/05/浅谈高阶组件/</id>
    <published>2018-10-04T18:19:24.000Z</published>
    <updated>2018-10-04T18:52:31.886Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道高阶函数，本文讲的高阶组件最大的特点就是代码复用，逻辑抽象…</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=534165062&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>最近学会了吉他，再加上是深夜了，所以就配个吉他版夜的钢琴曲</p></blockquote><p>切入正题，就简单粗暴的举例说明吧</p><p>简单解释高阶组件，首先示例一个函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</div><div class="line">    console.log(<span class="string">"hhardyy i love you"</span>);</div><div class="line">&#125;</div><div class="line">hello()</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/1.JPG" alt="“”" title="">                </div>                <div class="image-caption">“”</div>            </figure>  <p>然后高阶组件这么写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</div><div class="line">    console.log(<span class="string">"hhardyy i love you"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> newHello(fnc)&#123;</div><div class="line">    <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(<span class="string">"befor hello"</span>)</div><div class="line">        fnc()</div><div class="line">        console.log(<span class="string">"after hello"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">hello = newHello(hello)</div><div class="line">hello()</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/2.JPG" alt="“”" title="">                </div>                <div class="image-caption">“”</div>            </figure>  <p>这种模式就叫装饰器模式，这两hello()使用的时候虽然是一样的，但是内部已经发生了翻天覆地的变化，这是理解高阶组件的第一步，接下来我写个组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Hello extends Component&#123;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        <span class="built_in">return</span> &lt;h2&gt;hhardyy <span class="built_in">test</span> react &amp; 疯狂<span class="built_in">test</span> react&lt;/h2&gt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后在我的项目中的组件（一个写好的组件就可以）的return中用上，然后打印<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/3.JPG" alt="“”" title="">                </div>                <div class="image-caption">“”</div>            </figure><br>高阶组件其实就是一个组件传入另一个组件，而大家也意识到，组件其实就是个函数，我用<a href="https://babeljs.io/repl" target="_blank" rel="external">babel</a>来解析一下这个组件<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/4.png" alt="“babel解析hello组件”" title="">                </div>                <div class="image-caption">“babel解析hello组件”</div>            </figure><br>从这里可以看出来，所有的组件本质上都是一个函数，再举个栗子，我写个专门装饰上面hello组件的函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> newHello(Component)&#123;</div><div class="line">    class newHel extends Component&#123;</div><div class="line">        <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">            <span class="built_in">return</span> (</div><div class="line">                &lt;div&gt;</div><div class="line">                    &lt;p&gt;高阶组件元素&lt;/p&gt;</div><div class="line">                    &lt;Component &#123;...this.props&#125;&gt;&lt;/Component&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> newHel</div><div class="line">&#125;</div><div class="line">Hello = newHello(Hello)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/5.png" alt="“专门装饰上面hello组件的函数”" title="">                </div>                <div class="image-caption">“专门装饰上面hello组件的函数”</div>            </figure>  <p>我们常用的@connect装饰器其实就是这么个原理，这里我假装newHello是从别的地方引进来的，很远很远的地方（怕太远了你们看不到就往上移了几行，假装很远），然后在hello组件上写上@newHello，也就是这个样子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@newHello</div><div class="line">class Hello extends Component&#123;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        <span class="built_in">return</span> &lt;h2&gt;hhardyy <span class="built_in">test</span> react组件 模拟@ &amp; 疯狂<span class="built_in">test</span> react&lt;/h2&gt;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/6.png" alt="“模拟装饰器写法”" title="">                </div>                <div class="image-caption">“模拟装饰器写法”</div>            </figure>  <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/7.png" alt="“效果”" title="">                </div>                <div class="image-caption">“效果”</div>            </figure>  <p>来模拟@connect装饰器，这就是最简单的一个高阶组件，也就是给一个组件，然后返回另外一个组件，另外的组件把原来的组件包裹一层，这样就可以在原来的组件之上添加或者修改一些功能</p><h3 id="高阶组件主要分两种"><a href="#高阶组件主要分两种" class="headerlink" title="高阶组件主要分两种"></a>高阶组件主要分两种</h3><h4 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h4><p>上面这个组件叫属性代理，我们可以在<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Component &#123;...this.props&#125;&gt;&lt;/Component&gt;</div></pre></td></tr></table></figure></p><p>上给name,data等等</p><h4 id="反向继承"><a href="#反向继承" class="headerlink" title="反向继承"></a>反向继承</h4><p>就是不继承React.Component,而是直接继承原来的组件，这样就可以改写原来component的生命周期，比如这样子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> newHello(Component)&#123;</div><div class="line">    class newHel extends Component&#123;  //这里的Component不是继承自React的Component，而是传进来的Component</div><div class="line">        <span class="function"><span class="title">componentDidMount</span></span>() &#123;</div><div class="line">            console.log(<span class="string">"高阶组件新增生命周期完成"</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">            <span class="built_in">return</span> &lt;Component&gt;&lt;/Component&gt;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> newHel</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样之后和之前的关系就成了继承的关系，而不是代理的关系，这种方式可以修改它的生命周期，可以修改渲染逻辑以及整个渲染的流程，使用高阶组件的作用主要是代码复用以及逻辑抽象等<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/8.png" alt="“两者简单的代码比较”" title="">                </div>                <div class="image-caption">“两者简单的代码比较”</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/heightTopZu/9.png" alt="“属性继承和反向代理的区别效果”" title="">                </div>                <div class="image-caption">“属性继承和反向代理的区别效果”</div>            </figure><br>有点困，仗着国庆小长假疯狂试探新知识，平均睡觉时间3点</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道高阶函数，本文讲的高阶组件最大的特点就是代码复用，逻辑抽象…&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=534165062&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="高阶组件" scheme="http://yoursite.com/tags/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
    
      <category term="反向继承" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%90%91%E7%BB%A7%E6%89%BF/"/>
    
      <category term="属性代理" scheme="http://yoursite.com/tags/%E5%B1%9E%E6%80%A7%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>redux、react-router</title>
    <link href="http://yoursite.com/2018/09/21/redux%E3%80%81react-router/"/>
    <id>http://yoursite.com/2018/09/21/redux、react-router/</id>
    <published>2018-09-21T04:29:36.000Z</published>
    <updated>2018-09-23T08:30:43.286Z</updated>
    
    <content type="html"><![CDATA[<p>redux状态管理，不光react可以用，vue，angular都可以用。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=460318201&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>Redux 本身很简单。当使用普通对象来描述应用的 state 时。这个对象就像 “Model”，区别是它并没有 setter（修改器方法）。因此其它的代码不能随意修改它，造成难以复现的 bug。<br>要想更新 state 中的数据，你需要发起一个 action。Action 就是一个普通 JavaScript对象（注意到没，这儿没有任何魔法？）用来描述发生了什么。强制使用action来描述所有变化带来的好处是可以清晰<br>地知道应用中到底发生了什么。如果一些东西改变了，就可以知道为什么变。action就像是描述发生了什么的指示器。最终，为了把action和state串起来，开发一些函数，这就是reducer。再次地，没有任何魔<br>法，reducer 只是一个接收 state 和 action，并返回新的 state 的函数。 对于大的应用来说，不大可能仅仅只写一个这样的函数，所以我们编写很多小函数来分别管理state的一部分,再开发一个reducer<br>调用这两个 reducer，进而来管理整个应用的 state,差不多就是 Redux 思想的全部。</p></blockquote><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><p>一张图了解redux工作<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/111.png" alt="redux" title="">                </div>                <div class="image-caption">redux</div>            </figure><br>例如初始一个状态管理，这是我建好的项目里面的三个js,index.js负责渲染，App.js是个组件，index.redux.js负责状态管理<br>index.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import React from <span class="string">'react'</span></div><div class="line">import ReactDom from <span class="string">'react-dom'</span></div><div class="line">import App from <span class="string">'./App'</span></div><div class="line">import &#123; createStore &#125; from <span class="string">'redux'</span></div><div class="line">import &#123; center &#125; from <span class="string">'./index.redux'</span></div><div class="line">const store=createStore(center)</div><div class="line"></div><div class="line">ReactDom.render(</div><div class="line">    &lt;App store=&#123;store&#125;/&gt;,</div><div class="line">    document.getElementById(<span class="string">'root'</span>)</div><div class="line">)</div></pre></td></tr></table></figure></p><p>App.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import React,&#123;Component&#125; from <span class="string">'react'</span></div><div class="line"></div><div class="line">class App extends Component&#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        const sTore=this.props.store;</div><div class="line">        const data=sTore.getState();</div><div class="line">        <span class="built_in">return</span> &lt;h1&gt;hellow app,现在有菜鸡<span class="variable">$&#123;data&#125;</span>只&lt;/h1&gt;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">export</span> default App</div></pre></td></tr></table></figure></p><p>index.redux.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">const ADD_CAI=<span class="string">'加菜鸡'</span>;</div><div class="line">const REMOVE_CAI=<span class="string">'减菜鸡'</span></div><div class="line"></div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> center(state=0,action)&#123;</div><div class="line">    switch(action.type)&#123;</div><div class="line">        <span class="keyword">case</span> ADD_CAI:</div><div class="line">            <span class="built_in">return</span> state+1;</div><div class="line">        <span class="keyword">case</span> REMOVE_CAI:</div><div class="line">            <span class="built_in">return</span> state-1;</div><div class="line">        default :</div><div class="line">            <span class="built_in">return</span> 10</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//action creator专门创建action</div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> <span class="function"><span class="title">addCai</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> &#123;<span class="built_in">type</span>:ADD_CAI&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> <span class="function"><span class="title">removeCai</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> &#123;<span class="built_in">type</span>:REMOVE_CAI&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/1.JPG" alt="这是初始的一个状态" title="">                </div>                <div class="image-caption">这是初始的一个状态</div>            </figure>  <p>改变状态的话，在App.js里面导入在index.redux.js里头定义的addCai，removeCai方法，然后添加两个按钮用来触发<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;hellow app,现在有菜鸡<span class="variable">$&#123;data&#125;</span>只&lt;/h1&gt;</div><div class="line">&lt;button onClick=&#123;()=&gt;store.dispatch(addCai())&#125;&gt;添加一只菜鸡&lt;/button&gt;</div><div class="line">&lt;button onClick=&#123;()=&gt;store.dispatch(removeCai())&#125;&gt;菜死一只菜鸡&lt;/button&gt;</div></pre></td></tr></table></figure></p><p>这时候执行的话，其实状态已经改变了但是h1里面的数值没有改变，原因是状态虽然改变了，但是没有刷新，所以页面显示还是年轻的模样，只需要在index.js里面执行一下，store.subs<br>cribe(render)，意思就是把render重新执行一下，这时候状态改变就可以了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">    ReactDom.render(</div><div class="line">        &lt;App store=&#123;store&#125;/&gt;,</div><div class="line">        document.getElementById(<span class="string">'root'</span>)</div><div class="line">    )</div><div class="line">&#125;</div><div class="line">render()</div><div class="line">//状态改变之后执行一下render</div><div class="line">store.subscribe(render)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/2.gif" alt="render" title="">                </div>                <div class="image-caption">render</div>            </figure>  <p>当然，也可以把App.js里头import的两个方法转移到index.js，然后通过给子组件传值的方式传给App.js，这样代码看起来可能更和谐。</p><h3 id="redux异步"><a href="#redux异步" class="headerlink" title="redux异步"></a>redux异步</h3><p>redux默认只处理同步，异步需要中间件redux-thunk<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install redux-thunk --save</div></pre></td></tr></table></figure></p><p>异步中间件使用，在index.js里头<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import &#123; createStore,applyMiddleware &#125; from <span class="string">'redux'</span></div><div class="line">import thunk from <span class="string">'redux-thunk'</span></div><div class="line"></div><div class="line">const store=createStore(</div><div class="line">center,</div><div class="line">applyMiddleware(thunk)</div><div class="line">)</div></pre></td></tr></table></figure></p><p>这时候就可以异步了，比如在index.redux.js里面模拟一个异步操作testAsync，然后在App.js里面添加一个button用来触发testAsync。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button onClick=&#123;()=&gt;store.dispatch(testAsync())&#125;&gt;凌迟处死一只菜鸡&lt;/button&gt;</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/3.gif" alt="render" title="">                </div>                <div class="image-caption">render</div>            </figure>  <h3 id="react连接redux状态管理操作"><a href="#react连接redux状态管理操作" class="headerlink" title="react连接redux状态管理操作"></a>react连接redux状态管理操作</h3><p>将render函数改成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; Provider &#125; from <span class="string">'react-redux'</span></div><div class="line">ReactDom.render(</div><div class="line">     (</div><div class="line">        &lt;Provider store=&#123;store&#125; &gt;</div><div class="line">            &lt;App/&gt;</div><div class="line">        &lt;/Provider&gt;</div><div class="line">     ),</div><div class="line">    document.getElementById(<span class="string">'root'</span>),</div><div class="line">)</div></pre></td></tr></table></figure></p><p>App.js里面导入connect以及index.redux里头的方法，这时候button里面的onClick事件处理函数直接可以写成{函数名}的形式，因为它这时候所有的数据都是直接从外部传进来的，所有的数据都是由index.react.js控制<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import &#123; connect &#125; from <span class="string">'react-redux'</span></div><div class="line">import &#123;addCai,removeCai,testAsync&#125; from <span class="string">'./index.redux'</span></div><div class="line">class App extends Component&#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="title">render</span></span>()&#123;</div><div class="line">        const data=this.props.num;</div><div class="line">        const addCai=this.props.addCai;</div><div class="line">        const removeCai=this.props.removeCai;</div><div class="line">        const testAsync=this.props.testAsync;</div><div class="line">        <span class="built_in">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;h1&gt;hellow app,现在有菜鸡&#123;data&#125;只&lt;/h1&gt;</div><div class="line">                &lt;button onClick=&#123;addCai&#125;&gt;添加一只菜鸡&lt;/button&gt;</div><div class="line">                &lt;button onClick=&#123;removeCai&#125;&gt;菜死一只菜鸡&lt;/button&gt;</div><div class="line">                &lt;button onClick=&#123;testAsync&#125;&gt;凌迟处死一只菜鸡&lt;/button&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const mapStateToProps=(state)=&gt;&#123;</div><div class="line">    <span class="built_in">return</span> &#123; num: state&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const actionCreators= &#123;addCai,removeCai,testAsync&#125;</div><div class="line">  </div><div class="line">App=connect(mapStateToProps,actionCreators)(App)</div><div class="line"><span class="built_in">export</span> default App</div></pre></td></tr></table></figure></p><p>connect的第一个参数，把state给到props，第二个参数也给到props，也就是属性和方法<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/22.gif" alt="react-redux" title="">                </div>                <div class="image-caption">react-redux</div>            </figure>  </p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>用装饰器之前先装一下这个插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-plugin-transform-decorators-legacy --save</div></pre></td></tr></table></figure></p><p>然后在项目的package.json里面添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"plugins"</span>: [</div><div class="line">    [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;],</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后就可以做出这样的改变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const mapStateToProps=(state)=&gt;&#123;</div><div class="line">    <span class="built_in">return</span> &#123; num: state&#125;</div><div class="line">&#125;</div><div class="line">const actionCreators= &#123;addCai,removeCai,testAsync&#125;</div><div class="line">App=connect(mapStateToProps,actionCreators)(App)</div><div class="line">//==》</div><div class="line">@connect(</div><div class="line">    state=&gt;(&#123;num:state&#125;),//属性</div><div class="line">    &#123;addCai,removeCai,testAsync&#125; //方法</div><div class="line">)</div></pre></td></tr></table></figure></p><h3 id="合并所有reducer"><a href="#合并所有reducer" class="headerlink" title="合并所有reducer"></a>合并所有reducer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import combineReducers from <span class="string">'redux'</span></div><div class="line">import AA from aa.redux.js</div><div class="line">import BB from aa.redux.js</div><div class="line">combineReducers(&#123;AA,BB&#125;)</div></pre></td></tr></table></figure><h3 id="react-router4"><a href="#react-router4" class="headerlink" title="react-router4"></a>react-router4</h3><blockquote><p>react-router4是全新的版本，和之前的版本不兼容，浏览器和react-native均兼容和vue一样，React开发单页应用必备，践行路由即组件的概念比如：动态路由，Route，Link，Switch</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-router-dom --save</div></pre></td></tr></table></figure></blockquote><p>react-router-dom作为浏览器的路由<br>简单的路由例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">import React from <span class="string">'react'</span></div><div class="line">import ReactDom from <span class="string">'react-dom'</span></div><div class="line">import &#123; createStore,applyMiddleware,compose &#125; from <span class="string">'redux'</span></div><div class="line">import thunk from <span class="string">'redux-thunk'</span></div><div class="line">import &#123; Provider &#125; from <span class="string">'react-redux'</span></div><div class="line">import App from <span class="string">'./App'</span></div><div class="line">import &#123; center &#125; from <span class="string">'./index.redux'</span></div><div class="line"></div><div class="line">import &#123; BrowserRouter,Route,Link &#125; from <span class="string">'react-router-dom'</span></div><div class="line"></div><div class="line">const store=createStore(center,compose(</div><div class="line">    applyMiddleware(thunk),</div><div class="line">    window.devToolsExtension? window.devToolsExtension():()=&gt;&#123;&#125;</div><div class="line">))//异步中间件</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Cai2</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> &lt;h1&gt;hwllo this is Cai2&lt;/h1&gt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Cai3</span></span>()&#123;</div><div class="line">    <span class="built_in">return</span> &lt;h1&gt;hello this is Cai3&lt;/h1&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> ReactDom.render(</div><div class="line">     (</div><div class="line">        &lt;Provider store=&#123;store&#125; &gt;</div><div class="line">            &lt;BrowserRouter&gt;</div><div class="line">                &lt;div&gt;</div><div class="line">                &lt;ul&gt;</div><div class="line">                    &lt;li&gt;</div><div class="line">                        &lt;Link to=<span class="string">"/"</span>&gt;第一只菜鸡&lt;/Link&gt;</div><div class="line">                    &lt;/li&gt;</div><div class="line">                    &lt;li&gt;</div><div class="line">                        &lt;Link to=<span class="string">"cai2"</span>&gt;第二只菜鸡&lt;/Link&gt;</div><div class="line">                    &lt;/li&gt;</div><div class="line">                    &lt;li&gt;</div><div class="line">                        &lt;Link to=<span class="string">"cai3"</span>&gt;第三只菜鸡&lt;/Link&gt;</div><div class="line">                    &lt;/li&gt;</div><div class="line">                &lt;/ul&gt;</div><div class="line">                &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;&lt;/Route&gt;</div><div class="line">                &lt;Route path=<span class="string">"/cai2"</span> component=&#123;Cai2&#125;&gt;&lt;/Route&gt;</div><div class="line">                &lt;Route path=<span class="string">"/cai3"</span> component=&#123;Cai3&#125;&gt;&lt;/Route&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/BrowserRouter&gt;</div><div class="line">        &lt;/Provider&gt;</div><div class="line">     ),</div><div class="line">    document.getElementById(<span class="string">'root'</span>),</div><div class="line">)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/reduxImg/lu.gif" alt="run" title="">                </div>                <div class="image-caption">run</div>            </figure>  <p>但是有个问题，就是点Cai2的时候，组件App也渲染出来，是因为它path匹配的时候根目录是/，而/cai2，/cai3也是有/<br>，所以都会显示，它其实是个正则匹配，这时候可以选择加一个exact进行完全匹配，就可以了。</p><p><route path="/" exact="" component="{App}"></route><br>假如要添加一个地址跳转错误的友好404，就像这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"/:localtion"</span> component=&#123;Wrong&#125;&gt;&lt;/Route&gt;</div></pre></td></tr></table></figure></p><p>Redirect：默认页面打开加载某个组件或者强制加载某个组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Redirect to=<span class="string">"/"</span>&gt;&lt;/Redirect&gt;</div></pre></td></tr></table></figure></p><p>Switch：只渲染命中的第一个组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Switch&gt;</div><div class="line">&lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;Route path=<span class="string">"/:localtion"</span> component=&#123;Wrong&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;Route path=<span class="string">"/cai2"</span> component=&#123;Cai2&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;Route path=<span class="string">"/cai3"</span> component=&#123;Cai3&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/Switch&gt;</div></pre></td></tr></table></figure></p><h4 id="React-Router中的HashRouter与BrowserRouter"><a href="#React-Router中的HashRouter与BrowserRouter" class="headerlink" title="React-Router中的HashRouter与BrowserRouter"></a>React-Router中的HashRouter与BrowserRouter</h4><p>以下解释的前提是你要懂hash地址，假如有一个 Link 标签，跳转到 /hhardyy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BrowserRouter： http://localhost:8080/hhardyy</div><div class="line">HashRouter： http://localhost:8080/<span class="comment">#/hhardyy</span></div></pre></td></tr></table></figure></p><p>如果有服务器端的动态支持，建议使用 BrowserRouter，否则建议使用 HashRouter。原因在于，如果是单纯的静态文件，假如路径从 / 切换到 /hhardyy 后，此时刷新页面，页面将无法正常访问。<br>二者的替换方法很简单，在import的时候，将 BrowserRouter 修改为 HashRouter 就可以了，不需要修改其他东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redux状态管理，不光react可以用，vue，angular都可以用。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=460318201&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
      <category term="react-redux" scheme="http://yoursite.com/tags/react-redux/"/>
    
      <category term="装饰器" scheme="http://yoursite.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="中间件" scheme="http://yoursite.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>密码算法实验</title>
    <link href="http://yoursite.com/2018/09/17/%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95%E5%AE%9E%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/09/17/密码算法实验/</id>
    <published>2018-09-17T09:07:33.000Z</published>
    <updated>2018-09-17T10:57:04.897Z</updated>
    
    <content type="html"><![CDATA[<p>很久很久很久，简直久以前的密码算法实验。。。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1300819741&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="服务器启动，开启6666端口"><a href="#服务器启动，开启6666端口" class="headerlink" title="服务器启动，开启6666端口"></a>服务器启动，开启6666端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">ss = new ServerSocket(6666);</div><div class="line">started = <span class="literal">true</span>;</div><div class="line">&#125; catch (BindException e) &#123;</div><div class="line">        System.out.println(<span class="string">"Sorry,Port in use!"</span>);</div><div class="line">        System.out.println(<span class="string">"Please turn off the program to restart the server!"</span>);</div><div class="line">        System.exit(0);</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">try &#123;</div><div class="line"><span class="keyword">while</span> (started) &#123;</div><div class="line">    Socket s = ss.accept();</div><div class="line">    Client c = new Client(s);</div><div class="line">    System.out.println(<span class="string">"a client connected!"</span>);</div><div class="line">    new Thread(c).start();</div><div class="line">    clients.add(c);</div><div class="line">    &#125;</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">try &#123;</div><div class="line">ss.close();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="客户机接入"><a href="#客户机接入" class="headerlink" title="客户机接入"></a>客户机接入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">s = new Socket(<span class="string">"localhost"</span>, 6666);</div><div class="line">dos = new DataOutputStream(s.getOutputStream());</div><div class="line">dis = new DataInputStream(s.getInputStream());</div><div class="line">bConnected = <span class="literal">true</span>;</div><div class="line">&#125; catch (UnknownHostException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="客户机构建窗体"><a href="#客户机构建窗体" class="headerlink" title="客户机构建窗体"></a>客户机构建窗体</h3><p>（比较简陋的项目，只是eclipse里面做个窗体来假装客户机）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">setLocation(600, 300);</div><div class="line">add(tfTxt, BorderLayout.SOUTH);</div><div class="line">add(taContent, BorderLayout.NORTH);</div><div class="line">pack();</div><div class="line">this.addWindowListener(new <span class="function"><span class="title">WindowAdapter</span></span>() &#123;</div><div class="line">public void windowClosing(WindowEvent arg0) &#123;</div><div class="line">disconnect();</div><div class="line">System.exit(0);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">tfTxt.addActionListener(new TFListener());</div><div class="line">setVisible(<span class="literal">true</span>);</div><div class="line">connect();</div><div class="line">tRecv.start();</div></pre></td></tr></table></figure></p><h3 id="服务器监听端口"><a href="#服务器监听端口" class="headerlink" title="服务器监听端口"></a>服务器监听端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line"><span class="keyword">while</span> (started) &#123;</div><div class="line">Socket s = ss.accept();</div><div class="line">Client c = new Client(s);</div><div class="line">System.out.println(<span class="string">"a client connected!"</span>);</div><div class="line">new Thread(c).start();</div><div class="line">clients.add(c);</div><div class="line">&#125;</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">try &#123;</div><div class="line">ss.close();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="加密身份认证"><a href="#加密身份认证" class="headerlink" title="加密身份认证"></a>加密身份认证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">String str1 = null;</div><div class="line">Random random = new Random();</div><div class="line">int r = random.nextInt();</div><div class="line">String u = <span class="string">"hhardyy"</span>;</div><div class="line">String Verification_code = u + r;</div><div class="line">String Decryption_certification = null;</div><div class="line">System.out.println(<span class="string">"发送的认证消息"</span> + u + r);</div><div class="line">// 生成一对公钥</div><div class="line">try &#123;</div><div class="line">Rsa rsa = new Rsa();</div><div class="line">KeyPair rsak = rsa.genKeyPair();</div><div class="line">PrivateKey ks = rsak.getPrivate();// 私钥</div><div class="line">PublicKey kp = rsak.getPublic();// 公钥</div><div class="line"></div><div class="line">// 用公钥把发送的时候生成的随机数进行加密发送</div><div class="line">byte[] byte_Verification_code = Verification_code.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">byte[] er = rsa.encrypt(byte_Verification_code, kp);</div><div class="line">// 保存密钥</div><div class="line">saveKey(ks, <span class="string">"key_Private.key"</span>);</div><div class="line">saveData(er, <span class="string">"key_pubData.data"</span>);</div><div class="line"></div><div class="line">str1 = new String(er);</div><div class="line">System.out.println(<span class="string">"服务器收到的客户机加密用户认证："</span> + str1);</div><div class="line">&#125; catch (Exception e1) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e1.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="解密认证"><a href="#解密认证" class="headerlink" title="解密认证"></a>解密认证</h3><p>注意：这里判断两个值是否相等不能用==或者===，=更不行，因为==或者===对比的是值得路径等等，所以要用str1.equals(str2)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">String DemsgString=null;//定义一个变量存储通信数据</div><div class="line">try &#123;</div><div class="line">// 解密start</div><div class="line">Rsa rsa = new Rsa();</div><div class="line">PrivateKey privatekey = readKey(<span class="string">"key_Private.key"</span>); </div><div class="line">byte[] er = readData(<span class="string">"key_pubData.data"</span>); </div><div class="line">byte[] k = rsa.decrypt(er, privatekey); //k = RSAdec(ek, ks)</div><div class="line">    <span class="keyword">if</span> (Verification_code.equals(Decryption_certification)) &#123;</div><div class="line">        str2 = <span class="string">"认证成功，允许通信"</span>;//测试成功</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">        str2 = <span class="string">"认证失败"</span>; //测试失败</div><div class="line">DemsgString=<span class="string">"身份认证失败"</span>;</div><div class="line">&#125;</div><div class="line">&#125; catch (Exception e2) &#123;</div><div class="line">e2.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="通信数据加密"><a href="#通信数据加密" class="headerlink" title="通信数据加密"></a>通信数据加密</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">Aes aes = new Aes();</div><div class="line">//生成密钥，用口令来生成密钥</div><div class="line">String <span class="built_in">pwd</span> = <span class="string">"xiaofangkuai"</span>;</div><div class="line">byte[] aesKs = aes.genKey(<span class="built_in">pwd</span>);</div><div class="line">System.out.println(<span class="string">"通信内容："</span>+str);</div><div class="line">byte[] msgb=str.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">byte[] em = aes.encrypt(msgb, aesKs);//通信内容加密</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"AES口令生成秘钥Key:"</span>,aesKs);</div><div class="line">System.out.println(<span class="string">""</span>);</div><div class="line">String EemsgString = new String(em, <span class="string">"UTF-8"</span>);</div><div class="line">System.out.println(<span class="string">"加密之后："</span>+EemsgString);</div><div class="line"></div><div class="line">byte[] m = aes.decrypt(em, aesKs);</div><div class="line">DemsgString = new String(m, <span class="string">"UTF-8"</span>);</div><div class="line">System.out.println(<span class="string">"解密之后："</span>+m);</div><div class="line">System.out.println(<span class="string">"转码："</span>+DemsgString);</div><div class="line">&#125; catch (Exception ec) &#123;</div><div class="line">ec.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="客户机关闭连接"><a href="#客户机关闭连接" class="headerlink" title="客户机关闭连接"></a>客户机关闭连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">dos.close();</div><div class="line">dis.close();</div><div class="line">s.close();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">try &#123;</div><div class="line">bConnected = <span class="literal">false</span>;</div><div class="line">tRecv.join();</div><div class="line">&#125; catch (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">try &#123;</div><div class="line">dos.close();</div><div class="line">dis.close();</div><div class="line">s.close();</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>例子比较简陋，看懂不懂没关系，主要看配图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/javaSav/run.JPG" alt="。。。" title="">                </div>                <div class="image-caption">。。。</div>            </figure></p><h3 id="剑谱"><a href="#剑谱" class="headerlink" title="剑谱"></a>剑谱</h3><h4 id="保存秘钥的方法"><a href="#保存秘钥的方法" class="headerlink" title="保存秘钥的方法"></a>保存秘钥的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static void saveKey(Key key, String keyName) throws Exception &#123;</div><div class="line">FileOutputStream foskey = new FileOutputStream(keyName);</div><div class="line">ObjectOutputStream oos = new ObjectOutputStream(foskey);</div><div class="line">oos.writeObject(key);</div><div class="line">oos.close();</div><div class="line">foskey.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="保存数据的方法"><a href="#保存数据的方法" class="headerlink" title="保存数据的方法"></a>保存数据的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static void saveData(byte[] results, String dataName) throws Exception &#123;</div><div class="line">FileOutputStream fosData = new FileOutputStream(dataName);</div><div class="line">fosData.write(results);</div><div class="line">fosData.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="读取数据的方法"><a href="#读取数据的方法" class="headerlink" title="读取数据的方法"></a>读取数据的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public static byte[] readData(String dataName) throws Exception &#123;</div><div class="line">FileInputStream fisDat = new FileInputStream(dataName);</div><div class="line"></div><div class="line">// 读二进制数据</div><div class="line">ByteArrayOutputStream arrayOutputStream = new ByteArrayOutputStream();</div><div class="line">int len = 0;</div><div class="line">byte[] data = new byte[1024];</div><div class="line"><span class="keyword">while</span> ((len = fisDat.read(data)) != -1) &#123;</div><div class="line">arrayOutputStream.write(data, 0, len);</div><div class="line">&#125;</div><div class="line">byte[] result = arrayOutputStream.toByteArray();</div><div class="line">arrayOutputStream.close();</div><div class="line"></div><div class="line">fisDat.close();</div><div class="line"><span class="built_in">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="读取秘钥的方法"><a href="#读取秘钥的方法" class="headerlink" title="读取秘钥的方法"></a>读取秘钥的方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static PrivateKey readKey(String keyName) throws Exception &#123;</div><div class="line">FileInputStream fiskey = new FileInputStream(keyName);</div><div class="line">ObjectInputStream oiskey = new ObjectInputStream(fiskey);</div><div class="line">PrivateKey key = (PrivateKey) oiskey.readObject();</div><div class="line">oiskey.close();</div><div class="line">fiskey.close();</div><div class="line"><span class="built_in">return</span> key;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Coder-java"><a href="#Coder-java" class="headerlink" title="Coder.java"></a>Coder.java</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import java.util.Base64;</div><div class="line">public class Coder &#123;</div><div class="line">public static String encode(byte[] data) &#123;</div><div class="line">Base64.Encoder ecd = Base64.getEncoder();</div><div class="line"><span class="built_in">return</span> ecd.encodeToString(data);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static byte[] decode(String str) &#123;</div><div class="line">Base64.Decoder dcd = Base64.getDecoder();</div><div class="line"><span class="built_in">return</span> dcd.decode(str);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="AES-java"><a href="#AES-java" class="headerlink" title="AES.java"></a>AES.java</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">import java.security.SecureRandom;</div><div class="line">import javax.crypto.Cipher;</div><div class="line">import javax.crypto.KeyGenerator;</div><div class="line">import javax.crypto.SecretKey;</div><div class="line">import javax.crypto.spec.SecretKeySpec;</div><div class="line"></div><div class="line">public class TestAES &#123;</div><div class="line">private Cipher cipher;</div><div class="line"></div><div class="line">public TestAES() throws Exception &#123;</div><div class="line">cipher=Cipher.getInstance(<span class="string">"AES"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private SecretKey getKey(byte[] key) throws Exception&#123;</div><div class="line"><span class="built_in">return</span> new SecretKeySpec(key, <span class="string">"AES"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public byte[] encrypt(byte[] data, byte[] key) throws Exception&#123;</div><div class="line">cipher.init(Cipher.ENCRYPT_MODE, getKey(key));</div><div class="line">byte [] encData=cipher.doFinal(data);</div><div class="line"><span class="built_in">return</span> encData;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public byte[] decrypt(byte[] encData, byte[] key) throws Exception &#123;</div><div class="line">cipher.init(Cipher.DECRYPT_MODE, getKey(key));</div><div class="line">byte [] data=cipher.doFinal(encData);</div><div class="line"><span class="built_in">return</span> data;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public byte[] genKey(String fact) throws Exception&#123;</div><div class="line">KeyGenerator keygen=KeyGenerator.getInstance(<span class="string">"AES"</span>);</div><div class="line">        keygen.init(128, new SecureRandom(fact.getBytes()));</div><div class="line">        SecretKey original_key=keygen.generateKey();</div><div class="line">        byte [] key=original_key.getEncoded();</div><div class="line">        <span class="built_in">return</span> key;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public String genKeyStr(String fact) throws Exception&#123;</div><div class="line">        byte [] key=genKey(fact);</div><div class="line">        String keyStr = Coder.encode(key);</div><div class="line">        <span class="built_in">return</span> keyStr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public String encrypt(String dataStr, String keyStr) throws Exception&#123;</div><div class="line">byte[] data = dataStr.getBytes();</div><div class="line">byte[] key = Coder.decode(keyStr);</div><div class="line">byte[] edata = encrypt(data,key);</div><div class="line"><span class="built_in">return</span> Coder.encode(edata);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public String decrypt(String encDataStr, String keyStr) throws Exception &#123;</div><div class="line">byte[] edata = Coder.decode(encDataStr);</div><div class="line">byte[] key = Coder.decode(keyStr);</div><div class="line">byte [] data = decrypt(edata,key);</div><div class="line"><span class="built_in">return</span> new String(data);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">try &#123;</div><div class="line">TestAES t = new TestAES();</div><div class="line"></div><div class="line">//生成密钥，用口令来生成密钥</div><div class="line">String <span class="built_in">pwd</span> = <span class="string">"123456"</span>;</div><div class="line">byte[] k = t.genKey(<span class="built_in">pwd</span>);</div><div class="line"></div><div class="line">String msg = <span class="string">"Plain text 1"</span>;</div><div class="line">byte[] msgb=msg.getBytes();</div><div class="line"></div><div class="line">byte[] emsgb = t.encrypt(msgb, k);</div><div class="line">byte[] dmsgb = t.decrypt(emsgb, k);</div><div class="line"></div><div class="line">t.print(<span class="string">"Key"</span>,k);</div><div class="line">t.print(<span class="string">"msgb"</span>, msgb);</div><div class="line">t.print(<span class="string">"emsgb"</span>, emsgb);</div><div class="line">t.print(<span class="string">"dmsgb"</span>, dmsgb);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"End"</span>);</div><div class="line">&#125;</div><div class="line">catch(Exception ec) &#123;</div><div class="line">ec.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">private void <span class="built_in">print</span>(String note, byte[] bs)&#123;</div><div class="line">System.out.println(note+<span class="string">": "</span>+Coder.encode(bs));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Hash-java"><a href="#Hash-java" class="headerlink" title="Hash.java"></a>Hash.java</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">import java.security.MessageDigest;</div><div class="line"></div><div class="line">public class TestHash &#123;</div><div class="line">public byte[] getSha256(byte[] data) throws Exception&#123;</div><div class="line">MessageDigest  md = MessageDigest.getInstance(<span class="string">"SHA-256"</span>);</div><div class="line">    md.update(data);</div><div class="line">    <span class="built_in">return</span> md.digest();</div><div class="line">&#125;</div><div class="line">public byte[] getSha1(byte[] data) throws Exception</div><div class="line">&#123;</div><div class="line">MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);    </div><div class="line">messageDigest.update(data);</div><div class="line"><span class="built_in">return</span> messageDigest.digest();    </div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">try &#123;</div><div class="line">TestHash t = new TestHash();</div><div class="line"></div><div class="line">String msg = <span class="string">"a"</span>;</div><div class="line">byte[] msgb=msg.getBytes();</div><div class="line">byte[] d = t.getSha256(msgb);</div><div class="line"></div><div class="line">t.print(<span class="string">"msgb"</span>, msgb);</div><div class="line">t.print(<span class="string">"Dig"</span>, d);</div><div class="line">&#125;</div><div class="line">catch(Exception ec) &#123;</div><div class="line">ec.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">private void <span class="built_in">print</span>(String note, byte[] bs)&#123;</div><div class="line">System.out.println(note+<span class="string">"["</span>+bs.length+<span class="string">"]: "</span>+Coder.encode(bs));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="RSA-java"><a href="#RSA-java" class="headerlink" title="RSA.java"></a>RSA.java</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">import java.security.KeyPair;</div><div class="line">import java.security.KeyPairGenerator;</div><div class="line">import java.security.PrivateKey;</div><div class="line">import java.security.PublicKey;</div><div class="line">import javax.crypto.Cipher;</div><div class="line"></div><div class="line">public class TestRSA &#123;</div><div class="line">Cipher cipher;</div><div class="line"></div><div class="line">public TestRSA() throws Exception&#123;</div><div class="line">cipher=Cipher.getInstance(<span class="string">"RSA"</span>);//java默认<span class="string">"RSA"</span>=<span class="string">"RSA/ECB/PKCS1Padding"</span>  </div><div class="line">&#125;</div><div class="line"></div><div class="line">//生成密钥对  </div><div class="line">    public  KeyPair genKeyPair() throws Exception&#123;  </div><div class="line">        KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);  </div><div class="line">        keyPairGenerator.initialize(1024);        </div><div class="line">        <span class="built_in">return</span> keyPairGenerator.generateKeyPair();  </div><div class="line">    &#125;  </div><div class="line">    </div><div class="line">    public String getKeyString() throws Exception &#123;</div><div class="line">    KeyPair k = genKeyPair();</div><div class="line">    </div><div class="line">    String kstr = <span class="string">""</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> kstr;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //公钥加密  </div><div class="line">    public  byte[] encrypt(byte[] content, PublicKey pKey) throws Exception&#123;  </div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, pKey);  </div><div class="line">        <span class="built_in">return</span> cipher.doFinal(content);  </div><div class="line">    &#125;  </div><div class="line">    //私钥解密  </div><div class="line">    public  byte[] decrypt(byte[] content, PrivateKey sKey) throws Exception&#123;  </div><div class="line">        cipher.init(Cipher.DECRYPT_MODE, sKey);  </div><div class="line">        <span class="built_in">return</span> cipher.doFinal(content);  </div><div class="line">    &#125;  </div><div class="line"> </div><div class="line">    //私钥加密  </div><div class="line">    public  byte[] encrypt(byte[] content, PrivateKey sKey) throws Exception&#123;  </div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, sKey);  </div><div class="line">        <span class="built_in">return</span> cipher.doFinal(content);  </div><div class="line">    &#125;  </div><div class="line">    //公钥解密  </div><div class="line">    public  byte[] decrypt(byte[] content, PublicKey pKey) throws Exception&#123;  </div><div class="line">        cipher.init(Cipher.DECRYPT_MODE, pKey);  </div><div class="line">        <span class="built_in">return</span> cipher.doFinal(content);  </div><div class="line">    &#125;  </div><div class="line"> </div><div class="line">    </div><div class="line">public static void main(String[] args) &#123;</div><div class="line">try &#123;</div><div class="line">TestRSA t = new TestRSA();</div><div class="line"></div><div class="line">//密钥对</div><div class="line">KeyPair k = t.genKeyPair();</div><div class="line">PrivateKey ks = k.getPrivate();</div><div class="line">PublicKey kp = k.getPublic();</div><div class="line"></div><div class="line">t.print(<span class="string">"Private Key"</span>,ks.getEncoded());</div><div class="line">t.print(<span class="string">"Public Key"</span>,kp.getEncoded());</div><div class="line"></div><div class="line">String msg=<span class="string">"abcd"</span>;</div><div class="line">byte[] msgb = msg.getBytes();</div><div class="line"></div><div class="line">byte[] emsgb = t.encrypt(msgb,ks);</div><div class="line">byte[] dmsgb = t.decrypt(emsgb, kp);</div><div class="line"></div><div class="line">t.print(<span class="string">"msgb"</span>, msgb);</div><div class="line">t.print(<span class="string">"emsgb"</span>, emsgb);</div><div class="line">t.print(<span class="string">"dmsgb"</span>, dmsgb);</div><div class="line"></div><div class="line">emsgb = t.encrypt(msgb,kp);</div><div class="line">dmsgb = t.decrypt(emsgb, ks);</div><div class="line"></div><div class="line">t.print(<span class="string">"msgb"</span>, msgb);</div><div class="line">t.print(<span class="string">"emsgb"</span>, emsgb);</div><div class="line">t.print(<span class="string">"dmsgb"</span>, dmsgb);</div><div class="line">&#125;</div><div class="line">catch(Exception ec) &#123;</div><div class="line">ec.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">private void <span class="built_in">print</span>(String note, byte[] bs)&#123;</div><div class="line">System.out.println(note+<span class="string">"["</span>+bs.length+<span class="string">"]: "</span>+Coder.encode(bs));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久很久很久，简直久以前的密码算法实验。。。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1300819741&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="RSA" scheme="http://yoursite.com/tags/RSA/"/>
    
      <category term="AES" scheme="http://yoursite.com/tags/AES/"/>
    
      <category term="HASH" scheme="http://yoursite.com/tags/HASH/"/>
    
  </entry>
  
  <entry>
    <title>Vue音乐播放器</title>
    <link href="http://yoursite.com/2018/09/17/Vue%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>http://yoursite.com/2018/09/17/Vue音乐播放器/</id>
    <published>2018-09-17T04:27:06.000Z</published>
    <updated>2018-09-17T11:09:07.935Z</updated>
    
    <content type="html"><![CDATA[<p>vue全家桶做的音乐播放器</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=480579211&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h3><p>“babel-runtime”: “^6.26.0”,对ES语法进行转义<br>“fastclick”: “^1.0.6”,解决移动端300毫秒延迟<br>“babel-polyfill”: “^6.26.0”,(polyfill补丁的意思)，就是对一些ES6 的api比如promise这种做一个转义<br>jsonp解决跨域问题（<a href="https://github.com/webmodules/jsonp）" target="_blank" rel="external">https://github.com/webmodules/jsonp）</a></p><h3 id="组件轮播"><a href="#组件轮播" class="headerlink" title="组件轮播"></a>组件轮播</h3><p>better-scroll<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install better-scroll --save</div></pre></td></tr></table></figure></p><h3 id="代码转化babel-loader"><a href="#代码转化babel-loader" class="headerlink" title="代码转化babel-loader"></a>代码转化babel-loader</h3><p><a href="https://www.npmjs.com/package/babel-loader" target="_blank" rel="external">文档地址</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-loader babel-core babel-preset-env webpack</div></pre></td></tr></table></figure></p><h3 id="vue-lazyload插件-用于图片懒加载"><a href="#vue-lazyload插件-用于图片懒加载" class="headerlink" title="vue-lazyload插件:用于图片懒加载"></a>vue-lazyload插件:用于图片懒加载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-lazyload --save</div></pre></td></tr></table></figure><h3 id="v-for爆红，"><a href="#v-for爆红，" class="headerlink" title="v-for爆红，"></a>v-for爆红，</h3><p>Vue 2.2 之后，要求 component 进行列表渲染时，必须指定 key，因此这里可能是 vscode 的一个误报（tr 不是 component），如果不想看到这样的提示，你可以绑定一个 key，或者先检查一下自己有没有做过升级，然后再去看看相关内容升级之后有些什么变化。也可以设置里面添加：”vetur.validation.template”: false<br>也可以： <li class="item" v-for="(item,index) in discList" :key="index"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">|0(或0)：表示向下取整相当于math.floor</div></pre></td></tr></table></figure></li></p><h3 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.<span class="variable">$refs</span>.filter.style[<span class="string">'backgdrop-filter'</span>]=`blur(<span class="variable">$&#123;blur&#125;</span>px)`</div></pre></td></tr></table></figure><p>普通安卓手机无法体验的高斯模糊</p><h3 id="vue动画钩子，css3的animation动画"><a href="#vue动画钩子，css3的animation动画" class="headerlink" title="vue动画钩子，css3的animation动画"></a>vue动画钩子，css3的animation动画</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;transition </div><div class="line">    name=<span class="string">"normal"</span></div><div class="line">    @enter=<span class="string">"enter"</span></div><div class="line">    @after-enter=<span class="string">"afterenter"</span></div><div class="line">    @leave=<span class="string">"leave"</span></div><div class="line">    @after-leave=<span class="string">"leaveEnter"</span></div><div class="line">    &gt;</div></pre></td></tr></table></figure><p>这里用第三方开源的动画库</p><h3 id="create-keyframe-animation"><a href="#create-keyframe-animation" class="headerlink" title="create-keyframe-animation"></a>create-keyframe-animation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install create-keyframe-animation --save</div></pre></td></tr></table></figure><p>用法移步api反正就是import之后一顿嗨</p><h3 id="svg用于底部迷你播放器歌曲播放进度的圆环"><a href="#svg用于底部迷你播放器歌曲播放进度的圆环" class="headerlink" title="svg用于底部迷你播放器歌曲播放进度的圆环"></a>svg用于底部迷你播放器歌曲播放进度的圆环</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"progress-circle"</span>&gt;</div><div class="line">        &lt;svg :width=<span class="string">"32"</span> :height=<span class="string">"32"</span> viewBox=<span class="string">"0 0 100 100"</span> version=<span class="string">"1.1"</span> xmlns=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</div><div class="line">            &lt;circle class=<span class="string">"progress-background"</span> r=<span class="string">"50"</span> cx=<span class="string">"50"</span> cy=<span class="string">"50"</span> fill=<span class="string">"transparent"</span>/&gt;</div><div class="line">            &lt;circle class=<span class="string">"progress-bar"</span> r=<span class="string">"50"</span> cx=<span class="string">"50"</span> cy=<span class="string">"50"</span> fill=<span class="string">"transparent"</span> stroke-dasharray=<span class="string">"314"</span> stroke-dashoffset=<span class="string">"157"</span>/&gt;</div><div class="line">        &lt;/svg&gt;</div><div class="line">        &lt;slot&gt;&lt;/slot&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>用数据配合stroke-dasharray=”314” stroke-dashoffset=”157”实现圆圈歌曲进度</p><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><p>接收一个函数，函数可以拿到每个元素<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">findIndex(()=&gt;&#123;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">let</span> index=list.findIndex((item)=&gt;&#123;</div><div class="line">    <span class="built_in">return</span> item.id===this.currentSong.id</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="歌单页面数据"><a href="#歌单页面数据" class="headerlink" title="歌单页面数据"></a>歌单页面数据</h3><p>qq音乐的接口referer:<a href="https://y.qq.com，不能通过jsonp的方式了，这里用node做转发，在请求接口的地方用axios请求，然后直接请求本地地址" target="_blank" rel="external">https://y.qq.com，不能通过jsonp的方式了，这里用node做转发，在请求接口的地方用axios请求，然后直接请求本地地址</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">//api/recommend.js</div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> getSongList (disstid) &#123;</div><div class="line">    const url = <span class="string">'/getSongList'</span></div><div class="line">    const data = Object.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">        format: <span class="string">'json'</span>,</div><div class="line">        needNewCode: 1,</div><div class="line">        disstid: disstid,</div><div class="line">        <span class="built_in">type</span>: 1,</div><div class="line">        json: 1,</div><div class="line">        utf8: 1,</div><div class="line">        onlysong: 0,</div><div class="line">        g_tk: 1800233000,</div><div class="line">        platform: <span class="string">'yqq'</span>,</div><div class="line">        needNewCode: 0,</div><div class="line">        onlysong: 0,</div><div class="line">        notice: 0</div><div class="line">    &#125;)</div><div class="line">    <span class="built_in">return</span> axios.get(url, &#123;</div><div class="line">        params: data</div><div class="line">    &#125;).<span class="keyword">then</span>((res) =&gt; &#123;</div><div class="line">        <span class="built_in">return</span> Promise.resolve(res.data)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//devserver里头写这样的转发</div><div class="line">    app.get(<span class="string">'/getSongList'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">      var url = <span class="string">'https://c.y.qq.com/qzone/fcg-bin/fcg_ucc_getcdinfo_byids_cp.fcg'</span></div><div class="line">      axios.get(url, &#123;</div><div class="line">        headers: &#123;</div><div class="line">          referer: <span class="string">'https://y.qq.com/'</span>,</div><div class="line">          host: <span class="string">'c.y.qq.com'</span></div><div class="line">        &#125;,</div><div class="line">        params: req.query</div><div class="line">      &#125;).<span class="keyword">then</span>((response) =&gt; &#123;</div><div class="line">        res.json(response.data)</div><div class="line">      &#125;).catch((e) =&gt; &#123;</div><div class="line">        console.log(e)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vueMusic/getdata.JPG" alt="succ" title="">                </div>                <div class="image-caption">succ</div>            </figure><h3 id="后端接口代理"><a href="#后端接口代理" class="headerlink" title="后端接口代理"></a>后端接口代理</h3><p>在build下面的webpack.dev.conf.js里面配置后端代理，写成自定义接口，然后前端请求自定义的接口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">const axios = require(<span class="string">'axios'</span>) </div><div class="line">devServer 里添加</div><div class="line">  before(app) &#123;</div><div class="line">      app.get(<span class="string">'/getDiscList'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">        var url = <span class="string">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span></div><div class="line">        axios.get(url, &#123;</div><div class="line">          headers: &#123;</div><div class="line">            referer: <span class="string">'https://y.qq.com/'</span></div><div class="line">          &#125;,</div><div class="line">          params: req.query</div><div class="line">        &#125;).<span class="keyword">then</span>((response) =&gt; &#123;</div><div class="line">          res.json(response.data)</div><div class="line">        &#125;).catch((e) =&gt; &#123;</div><div class="line">          console.log(e)</div><div class="line">        &#125;)</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//api/recommend(推荐歌单的api)</div><div class="line"><span class="built_in">export</span> <span class="keyword">function</span> <span class="function"><span class="title">getDiscList</span></span>() &#123;</div><div class="line">  const url = <span class="string">'/getDiscList'</span></div><div class="line">  const data = Object.assign(&#123;&#125;, commonParams, &#123;</div><div class="line">    platform: <span class="string">'yqq'</span>,</div><div class="line">    picmid: 1,</div><div class="line">    hostUin: 0,</div><div class="line">    sin: 0,</div><div class="line">    ein: 29,</div><div class="line">    sortId: 5,</div><div class="line">    needNewCode: 0,</div><div class="line">    categoryId: 10000000,</div><div class="line">    rnd: Math.random(),</div><div class="line">    format: <span class="string">'json'</span></div><div class="line">  &#125;)</div><div class="line">  <span class="built_in">return</span> axios.get(url, &#123;</div><div class="line">    params: data</div><div class="line">  &#125;).<span class="keyword">then</span>((res) =&gt; &#123;</div><div class="line">    <span class="built_in">return</span> Promise.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//组件中</div><div class="line">import &#123;getDiscList&#125; from <span class="string">'api/recommend'</span></div><div class="line"></div><div class="line">methods: &#123;</div><div class="line">    <span class="function"><span class="title">_getDiscList</span></span>() &#123;</div><div class="line">        getDiscList().<span class="keyword">then</span>((res) =&gt; &#123;</div><div class="line">          <span class="keyword">if</span> (res.code === ERR_OK) &#123;</div><div class="line">            this.discList = res.data.list</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;      </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p><a href="https://github.com/HHardyy/vue-music" target="_blank" rel="external">项目地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue全家桶做的音乐播放器&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=480579211&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue2.x" scheme="http://yoursite.com/tags/Vue2-x/"/>
    
      <category term="Vuex" scheme="http://yoursite.com/tags/Vuex/"/>
    
      <category term="Vue Router" scheme="http://yoursite.com/tags/Vue-Router/"/>
    
      <category term="axios jsonp" scheme="http://yoursite.com/tags/axios-jsonp/"/>
    
      <category term="better-scroll" scheme="http://yoursite.com/tags/better-scroll/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>React探路合集</title>
    <link href="http://yoursite.com/2018/07/27/React%E6%8E%A2%E8%B7%AF%E5%90%88%E9%9B%86/"/>
    <id>http://yoursite.com/2018/07/27/React探路合集/</id>
    <published>2018-07-27T00:52:54.000Z</published>
    <updated>2019-01-18T07:51:23.618Z</updated>
    
    <content type="html"><![CDATA[<p>react脚手架建项目的时候突然太卡，改一下npm的registry或许有帮助。。。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26209792&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="React巨卡"><a href="#React巨卡" class="headerlink" title="React巨卡"></a>React巨卡</h3><p>建react项目的时候，突然的巨卡，create-react-app之后吃个苹果回来还在卡着不动，就像这样。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/11.gif" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure><br>换源：create-react-app指令默认npm，永久设置registry就ok了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/22.JPG" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure><br>图中的命令从上往下依次是清理npm缓存，设置registry成<a href="https://registry.npm.taobao.org，" target="_blank" rel="external">https://registry.npm.taobao.org，</a><br>查看registry设置是否成功（也可以npm info express）</p><h3 id="npm源切换淘宝镜像和原来的方法："><a href="#npm源切换淘宝镜像和原来的方法：" class="headerlink" title="npm源切换淘宝镜像和原来的方法："></a>npm源切换淘宝镜像和原来的方法：</h3><p>查看现在的镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm get registry</div></pre></td></tr></table></figure></p><p>1、设置淘宝镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config set registry http://registry.npm.taobao.org/</div></pre></td></tr></table></figure></p><p>2、切换回原镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config set registry https://registry.npmjs.org/</div></pre></td></tr></table></figure></p><h3 id="npm-run-eject"><a href="#npm-run-eject" class="headerlink" title="npm run eject"></a>npm run eject</h3><p>npm run eject不弹出个性化配置，并提示This git repository has untracked files or uncommitted changes:<br>意思是这个git仓库有未跟踪的文件或未提交的更改：</p><p>很简单，这时候git status查看一下状态，看看有没有未提交的修改，修改一下再提交仓库。<br>这时候npm run eject出现下面这些东西的时候就是成功了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/33.JPG" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure></p><h3 id="connect装饰器爆红"><a href="#connect装饰器爆红" class="headerlink" title="@connect装饰器爆红"></a>@connect装饰器爆红</h3><p>写react联合redux的时候可能会用到装饰器babel-plugin-transform-decorators-legacy，顺带提一下用法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-plugin-transform-decorators-legacy</div></pre></td></tr></table></figure></p><p>package.json的babel里头添加这个<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"plugins"</span>: [</div><div class="line">      <span class="string">"transform-decorators-legacy"</span></div><div class="line">]</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/111.JPG" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure><p>注意：插件顺序很重要，如果要手动包括您的插件和使用transform-class-properties，确保transform-decorators-legacy来之前 transform-class-properties。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"plugins"</span>: [</div><div class="line">      <span class="string">"transform-decorators-legacy"</span>,</div><div class="line">      <span class="string">"transform-class-properties"</span></div><div class="line">]</div></pre></td></tr></table></figure></p><p>写完重新start就生效了，这里说的是在组件中@connect之后，下面有红线，一个原因是你没在package.json里面用上免得插件,也有可能是已经添加了上面那个插件，但是没用，这时候可以选择修改一下setting.json，添加下面这个代码，覆盖掉原本它默认的false<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"javascript.implicitProjectConfig.experimentalDecorators"</span>: <span class="literal">true</span></div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-juka/222.JPG" alt="“emmmmm”" title="">                </div>                <div class="image-caption">“emmmmm”</div>            </figure><h3 id="onClick失效"><a href="#onClick失效" class="headerlink" title="onClick失效"></a>onClick失效</h3><p>刚在写退出登录功能的时候，方法不执行，即使bind了this，代码也完全没问题，排除了默认以及冒泡等，可能是被遮住了，点不到那个元素，这时候设置一下z-index就可以了，不行就设置z-index: xxx !important; 提升它的优先级，然后就可以了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react脚手架建项目的时候突然太卡，改一下npm的registry或许有帮助。。。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=26209792&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="npm run eject" scheme="http://yoursite.com/tags/npm-run-eject/"/>
    
      <category term="connect装饰器" scheme="http://yoursite.com/tags/connect%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
      <category term="onClick" scheme="http://yoursite.com/tags/onClick/"/>
    
      <category term="镜像" scheme="http://yoursite.com/tags/%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>&#39;BMap&#39; is not defined？BMap初始化爆红</title>
    <link href="http://yoursite.com/2018/07/22/BMap-is-not-defined%EF%BC%9FBMap%E5%88%9D%E5%A7%8B%E5%8C%96%E6%8A%A5%E9%94%99%E7%88%86%E7%BA%A2/"/>
    <id>http://yoursite.com/2018/07/22/BMap-is-not-defined？BMap初始化报错爆红/</id>
    <published>2018-07-22T08:00:12.000Z</published>
    <updated>2018-07-22T08:23:48.117Z</updated>
    
    <content type="html"><![CDATA[<p>用vue全家桶撸一个项目的时候，eslint给我找了一个麻烦。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=498549913&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>BMap是什么东西：省略的字=它的解释.length</p><h3 id="说说爆红"><a href="#说说爆红" class="headerlink" title="说说爆红"></a>说说爆红</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vueMap/juli.png" alt="undefind" title="">                </div>                <div class="image-caption">undefind</div>            </figure><p>根据api，在vue页面中初始化百度地图，假如在初始化项目的时候不安装eslint规则的话，它是不会有事的，但是安装了之后，就给爆红线了，说BMap undefind,但是是可以正常跑的，如果代码中存在较多BMap，满频幕红线，我不信你不会闹心，简单来两个<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vueMap/1.JPG" alt="红线" title="">                </div>                <div class="image-caption">红线</div>            </figure></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在BMap.Map前面加window，就是new window.BMap.Map。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vueMap/2.JPG" alt="eg" title="">                </div>                <div class="image-caption">eg</div>            </figure><br>粗略的搞个demo，methods里头定义一个这样的方法,mounted里头：this.creatMap();<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">creatMap</span></span> () &#123;</div><div class="line">    navigator.geolocation.getCurrentPosition(</div><div class="line">        <span class="keyword">function</span> (position) &#123;</div><div class="line">          var x = position.coords.longitude</div><div class="line">          var y = position.coords.latitude</div><div class="line">          var map = new window.BMap.Map(<span class="string">'myMap'</span>)</div><div class="line">          var point = new window.BMap.Point(y, x)</div><div class="line">          map.centerAndZoom(point, 14)</div><div class="line">          map.enableScrollWheelZoom()</div><div class="line">          var myIcon = new window.BMap.Icon(<span class="string">'HHardyy.png'</span>, new BMap.Size(30, 30))</div><div class="line">          var marker2 = new window.BMap.Marker(point, &#123; icon: myIcon &#125;)    // 创建标注</div><div class="line">          map.addOverlay(marker2)</div><div class="line">          var opts = &#123;</div><div class="line">            width: 200, // 信息窗口宽度</div><div class="line">            height: 60, // 信息窗口高度</div><div class="line">            title: <span class="string">'HHardyy'</span> // 信息窗口标题</div><div class="line">          &#125;</div><div class="line">        var infoWindow = new window.BMap.InfoWindow(<span class="string">'show time'</span>, opts) // 创建信息窗口对象</div><div class="line">        map.openInfoWindow(infoWindow, point) // 开启信息窗口</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p></blockquote><h3 id="那么问题来了，如果加window不顶用咋办，Cannot-read-property-‘Map’-of-undefined？"><a href="#那么问题来了，如果加window不顶用咋办，Cannot-read-property-‘Map’-of-undefined？" class="headerlink" title="那么问题来了，如果加window不顶用咋办，Cannot read property ‘Map’ of undefined？"></a>那么问题来了，如果加window不顶用咋办，Cannot read property ‘Map’ of undefined？</h3><p>参考：<a href="https://blog.csdn.net/leeleejoker/article/details/80598528" target="_blank" rel="external">这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用vue全家桶撸一个项目的时候，eslint给我找了一个麻烦。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=498549913&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="百度地图" scheme="http://yoursite.com/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="BMap" scheme="http://yoursite.com/tags/BMap/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>对象深拷贝与浅拷贝</title>
    <link href="http://yoursite.com/2018/07/10/%E5%AF%B9%E8%B1%A1%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/07/10/对象深拷贝与浅拷贝/</id>
    <published>2018-07-09T22:58:07.000Z</published>
    <updated>2019-01-22T15:20:27.345Z</updated>
    
    <content type="html"><![CDATA[<p>偶然与道友产生了深浅拷贝的异议，所以赶紧补一补习，需要的你也可以看看</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=552716148&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原<br>对象。<br>举个栗子：假如有两个对象a和b，我想让b对象拥有a对象的属性和方法，然后b对象某些同属性的keyvalue和a不一样，可能会这么写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">name: <span class="string">"hhardyy"</span></div><div class="line">&#125;</div><div class="line">var b = a;</div><div class="line">b.name = <span class="string">"xiaofangkuai"</span>;</div><div class="line">console.log(a.name) //xiaofangkuai</div></pre></td></tr></table></figure></p><p>但是这样之后a对象的name也被改变了，举例浅拷贝一个initObj对象，里面有各种属性和方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var initObj = &#123;</div><div class="line">    a: <span class="string">"hhardyy"</span>,</div><div class="line">    b: &#123;</div><div class="line">        a: <span class="string">"xiaofangkuai"</span></div><div class="line">    &#125;,</div><div class="line">    c: [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>],</div><div class="line">    d: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        alert(<span class="string">"hhardyy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="built_in">clone</span>(obj)&#123;</div><div class="line">    var newObj=&#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</div><div class="line">        newObj[key]=obj[key]</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> newObj;</div><div class="line">&#125;</div><div class="line">var newObj = <span class="built_in">clone</span>(initObj);</div><div class="line">console.log(<span class="string">'拷贝的对象属性方法'</span>)</div><div class="line">console.log(newObj.b);</div><div class="line">console.log(newObj.c);</div><div class="line">console.log(newObj.d);</div><div class="line">newObj.a=<span class="string">"xiaofangkuai"</span>;</div><div class="line">newObj.b.a = <span class="string">"hhardyy"</span>;</div><div class="line">newObj.c = [1, 2, 3];</div><div class="line">newObj.d = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    alert(<span class="string">"hhardyy1"</span>);</div><div class="line">&#125;;</div><div class="line">console.log(<span class="string">'初始的对象属性方法'</span>)</div><div class="line">console.log(initObj.b);</div><div class="line">console.log(initObj.c);</div><div class="line">console.log(initObj.d);</div><div class="line">console.log(<span class="string">'区别是initObj下面的b对象下面a没有被拷贝，也就是说只拷贝了一层'</span>)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/1.JPG" alt="console" title="">                </div>                <div class="image-caption">console</div>            </figure><p>ES6提供了一个新函数用于浅拷贝Object.assign()，可以处理一层的深度拷贝，可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。拷贝的是对象的属性的引用，而不是对象本身。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">文档地址</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.assign(target, ...sources)  //target=目标对象，sources=源对象，返回值等于目标对象</div></pre></td></tr></table></figure></p><p>继续上面的例子，这是一层的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">name: <span class="string">"hhardyy"</span></div><div class="line">&#125;</div><div class="line">var b = Object.assign(&#123;&#125;, a);</div><div class="line">b.name=<span class="string">"xiaofangkuai"</span></div><div class="line">console.log(a.name)//hhardyy,证明a.name没有被改动</div></pre></td></tr></table></figure></p><p>继续上面的例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">name: &#123;</div><div class="line">    <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">     <span class="string">'lastname'</span>:&#123;</div><div class="line">        age:20</div><div class="line">     &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b = Object.assign(&#123;&#125;, a);</div><div class="line">b.name.firstname=<span class="string">"hhardyy"</span></div><div class="line">b.name.lastname.age=19</div><div class="line">console.log(b.name)</div><div class="line">console.log(a.name)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/2.JPG" alt="age出毛病了" title="">                </div>                <div class="image-caption">age出毛病了</div>            </figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>obj1要完全复制obj2的属性方法，同时obj1要是改变不会影响obj2的属性方法，同时满足多层拷贝</p><h4 id="对象只有一层的话，可以用ES6的Object-assign-，例子还是上面那个"><a href="#对象只有一层的话，可以用ES6的Object-assign-，例子还是上面那个" class="headerlink" title="对象只有一层的话，可以用ES6的Object.assign()，例子还是上面那个"></a>对象只有一层的话，可以用ES6的Object.assign()，例子还是上面那个</h4><h4 id="stringify"><a href="#stringify" class="headerlink" title="stringify"></a>stringify</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line">var strA=JSON.stringify(a);</div><div class="line">console.log(<span class="string">'字符串的a对象:'</span>+strA)</div><div class="line">var b =JSON.parse(strA)</div><div class="line">b.name.firstname=<span class="string">"hhardyy"</span></div><div class="line">b.name.lastname.age=19</div><div class="line">console.log(b)</div><div class="line">console.log(a)</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/3.JPG" alt="a对象没有被改到" title="">                </div>                <div class="image-caption">a对象没有被改到</div>            </figure><p>这种深拷贝不用每层递归，也比较简单，但是这种方法也有不少坏处，IE6、7不兼容，兼容的方法也简单，勉强用evel或者去<a href="http://www.json.org/" target="_blank" rel="external">json的官网</a>下载json类下面<br>的json2.js，然后引入,就可以兼容了。同时这种方法会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object。也就是说<br>它会干掉原来对象里头的构造函数，所以有undefined和function会被除掉，只有可以转成JSON格式的对象才可以这样用，像function没办法转成JSON。还是那个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">          console.log(<span class="string">'hhardyy'</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line">var strA=JSON.stringify(a);</div><div class="line">var b =JSON.parse(strA)</div><div class="line">console.log(<span class="string">"console.log(typeof a.func):"</span>+typeof a.func)</div><div class="line">console.log(<span class="string">"console.log(typeof b.func):"</span>+typeof b.func)</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/4.JPG" alt="b.func被干掉了" title="">                </div>                <div class="image-caption">b.func被干掉了</div>            </figure><p>stringify的缺点就是：无法实现对函数、RegExp等特殊对象的克隆，会抛弃对象的construct，所有的构造函数会指Object，有循环引用，会报错</p><h4 id="递归拷贝"><a href="#递归拷贝" class="headerlink" title="递归拷贝"></a>递归拷贝</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">          console.log(<span class="string">'hhardyy'</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var b=&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">function</span> deepClone(objA, objB) &#123;    </div><div class="line">  var obj = objB || &#123;&#125;;    </div><div class="line">  <span class="keyword">for</span> (var i <span class="keyword">in</span> objA) &#123;        </div><div class="line">    var prop = objA[i];        // 避免相互引用对象导致死循环</div><div class="line">    <span class="keyword">if</span>(prop === obj) &#123;            </div><div class="line">      <span class="built_in">continue</span>;</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (typeof prop === <span class="string">'object'</span>) &#123;</div><div class="line">      obj[i] = (prop.constructor === Array) ? [] : &#123;&#125;;            </div><div class="line">      arguments.callee(prop, obj[i]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      obj[i] = prop;</div><div class="line">    &#125;</div><div class="line">  &#125;    </div><div class="line">  <span class="built_in">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">deepClone(a, b);</div><div class="line">console.log(a);</div><div class="line">console.log(b);</div></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/deepcopy/5.JPG" alt="b.func被干掉了" title="">                </div>                <div class="image-caption">b.func被干掉了</div>            </figure><h4 id="JQ的-extend"><a href="#JQ的-extend" class="headerlink" title="JQ的$.extend"></a>JQ的$.extend</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var $ = require(<span class="string">'jquery'</span>);</div><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">          console.log(<span class="string">'hhardyy'</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line">var b = $.extend(<span class="literal">true</span>, &#123;&#125;, a);</div></pre></td></tr></table></figure><h4 id="函数库lodash的-cloneDeep"><a href="#函数库lodash的-cloneDeep" class="headerlink" title="函数库lodash的_.cloneDeep"></a>函数库lodash的_.cloneDeep</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var _ = require(<span class="string">'lodash'</span>);</div><div class="line">var $ = require(<span class="string">'jquery'</span>);</div><div class="line">var a = &#123;</div><div class="line">    name: &#123;</div><div class="line">        <span class="string">'firstname'</span>:<span class="string">'xiao'</span>,</div><div class="line">        <span class="string">'lastname'</span>:&#123;</div><div class="line">            age:20</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="function"><span class="title">func</span></span>()&#123;</div><div class="line">          console.log(<span class="string">'hhardyy'</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div><div class="line">var b = _.cloneDeep(a);</div></pre></td></tr></table></figure><p>这个用起来简单，而且性能也不错</p><h3 id="封装一个对象拷贝的方法"><a href="#封装一个对象拷贝的方法" class="headerlink" title="封装一个对象拷贝的方法"></a>封装一个对象拷贝的方法</h3><p>假如obj2要拷贝obj1里面的属性和方法可以用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> HexTend(obj1,obj2)&#123;</div><div class="line">    <span class="keyword">for</span>(var attr <span class="keyword">in</span> obj1)&#123;</div><div class="line">        obj2[attr]=obj1[attr];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> obj2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也可以简单点b={…a}或者Object.assign(b,a),如果非对象参数出现在源对象的位置，那么这些参数都会转成对象，如果无法转成对象，就会跳过。也就是undefined和null不放<br>在第一个参数，就不会报错。其他类型的值比如number、string、boolean不在第一个参数，也不会报错。但是字符串会以数组形式拷贝入目标对象，其他值没效果。</p><blockquote><p>注意：Object.assign方法实行的是浅拷贝，如果源对象某个属性的值是对象，则目标对象拷贝到的是这个对象的引用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然与道友产生了深浅拷贝的异议，所以赶紧补一补习，需要的你也可以看看&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=552716148&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="深拷贝与浅拷贝" scheme="http://yoursite.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="stringify" scheme="http://yoursite.com/tags/stringify/"/>
    
      <category term="ES6-Object.assign()" scheme="http://yoursite.com/tags/ES6-Object-assign/"/>
    
      <category term="递归拷贝" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="JQ的$.extend" scheme="http://yoursite.com/tags/JQ%E7%9A%84-extend/"/>
    
      <category term="函数库lodash的_.cloneDeep" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E5%BA%93lodash%E7%9A%84-cloneDeep/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的艺术</title>
    <link href="http://yoursite.com/2018/07/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>http://yoursite.com/2018/07/08/面向对象的艺术/</id>
    <published>2018-07-08T04:58:07.000Z</published>
    <updated>2019-01-18T08:33:38.897Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象的艺术，都是艺术，全是艺术，全是爆炸~</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=415792563&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>面向对象是一种思想，是基于面向过程而言的，就是说面向对象是将功能等通过对象来实现，把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是以功能划分问题,<br>把属性和方法写在一起，作为一个相互依存的整体——对象，面向对象有三大特征：封装性、继承性、多态性。就像去一家咖啡店，你只需要和服务员说你要什么样的咖啡，然后只需要等服务员<br>把咖啡拿上来喝掉就可以了，不需要去关注咖啡怎么做，这里服务员就是对象（不是那种对象，是另一种对象），你面向她，拿到你喜欢的咖啡，她也不需要知道你是怎么把咖啡喝完的。顺带<br>提一下面向过程，面向过程就是根据需要分析出解决问题所需要的步骤，顺序执行，其程序结构是按功能划分为若干个基本模块，这些模块形成一个树状结构。各模块之间的关系尽可能简单,<br>在功能上相对独立,每一模块内部均是由顺序、选择和循环三种基本结构组成,其模块化实现的具体方法是使用子程序。程序流程在写程序时就已决定,同样还是刚才的服务员，面向过程就<br>是你和她说要喝什么咖啡，然后浪漫的一起从调料，磨咖啡豆，煮咖啡等等等，然后你张嘴，喝一口，闭嘴，咽下去。。。</p></blockquote><h3 id="面向对象的神器"><a href="#面向对象的神器" class="headerlink" title="面向对象的神器"></a>面向对象的神器</h3><p>之前和一些道友谈论面向对象的过程中得到了一张很厉害的图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/faceobject/1.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>系统对象，诸如Array()，Date()这类系统自带的对象<br>一般程序员在讨论说没有对象的时候，总有人说new一个就有了，这里我new一个系统自带的数组对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var arr = new Array();</div></pre></td></tr></table></figure></p><p>对象new出来之后就可以使用它里头的函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr.push();  </div><div class="line">arr.sort();</div></pre></td></tr></table></figure></p><p>对象的组成是由肤白+貌美+大长腿。。。错了错了。是由属性和方法构成的</p><h3 id="对象的构成"><a href="#对象的构成" class="headerlink" title="对象的构成"></a>对象的构成</h3><p>诶。。。由于对象是undefined，所以我构造一个对象出来，并且调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var girlFriend=new Girlfriend();    //构造对象</div><div class="line">console.log(<span class="string">"年龄"</span>+girlFriend.age);    //打印对象的年龄</div><div class="line">console.log(<span class="string">"性别"</span>+girlFriend.gender);    //打印对象的性别</div><div class="line">girlFriend.can();     //调用对象的can方法</div><div class="line">girlFriend.canNot();     //调用对象的canNot方法</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/faceobject/2.png" alt="console" title="">                </div>                <div class="image-caption">console</div>            </figure><p>构造的方法很简单，对象的方法我用vue的methods的写法，把Girlfriend.prototype当成vue的methods，因为我觉得相对于它通常的写法略酷一些。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Girlfriend</span></span>()&#123;      //对象的构造函数</div><div class="line">this.age=18;           //对象的属性</div><div class="line">this.gender=<span class="string">"female"</span>;       </div><div class="line">&#125;</div><div class="line">Girlfriend.prototype=&#123;      //对象的方法</div><div class="line"><span class="function"><span class="title">can</span></span>()&#123;</div><div class="line">    console.log(<span class="string">"可以拿来面向"</span>)</div><div class="line">&#125;,</div><div class="line"><span class="function"><span class="title">canNot</span></span>()&#123;</div><div class="line">console.log(<span class="string">"不可以打"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="工厂方式"><a href="#工厂方式" class="headerlink" title="工厂方式"></a>工厂方式</h3><p>知道什么是当当当当吗。。。。。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> createPerson(name)&#123;</div><div class="line">//1.原料</div><div class="line">var obj = new Object();</div><div class="line">//2.加工</div><div class="line">obj.name = name;</div><div class="line">obj.showName = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">console.log( this.name );</div><div class="line">&#125;;</div><div class="line">//3.出场</div><div class="line"><span class="built_in">return</span> obj;</div><div class="line">&#125;</div><div class="line">var p1 = createPerson(<span class="string">'HHardyy'</span>);</div><div class="line">p1.showName();</div><div class="line">var p2 = createPerson(<span class="string">'Hardy'</span>);</div><div class="line">p2.showName();</div></pre></td></tr></table></figure></p><p>但是请记住这里的p1.showName()不等于p2.showName()，即使是传入同一个参数，因为p1.showName()==p2.showName()，它是拿双方的地址来对比的，就像java中一样，但是java中可以用xxx1.equals(xxx2)来对比它们的内容是否相等。</p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>去改写对象下面公用的方法或者属性,让公用的方法或者属性在内存中存在一份 ( 可以提高性能 )，原型 就相当于写html页面时，CSS中的class，普通方法相当于CSS中的style，例如我在系统的数组对象添加一个求和方法count<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var arr1 = [1,2,3,4];</div><div class="line">var arr2 = [2,2,2,2];</div><div class="line">Array.prototype.count = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">var result = 0;</div><div class="line"><span class="keyword">for</span>(var i=0;i&lt;this.length;i++)&#123;</div><div class="line">result += this[i];</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> result;</div><div class="line">&#125;;</div><div class="line">console.log( arr1.count() );  //10</div><div class="line">console.log( arr2.count() );  //8</div></pre></td></tr></table></figure></p><p>原形下面不止可以是方法，也可以添加属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array.prototype.number=5201314</div></pre></td></tr></table></figure></p><h3 id="工厂方式之原型"><a href="#工厂方式之原型" class="headerlink" title="工厂方式之原型"></a>工厂方式之原型</h3><p>当new去调用一个函数 : 这个时候函数中的this指向创建出来的对象,而且函数的的返回值直接就是this(隐式返回)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Object(name)&#123;</div><div class="line">this.name = name;</div><div class="line">&#125;</div><div class="line">Object.prototype.showName = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">console.log( this.name );</div><div class="line">&#125;;</div><div class="line">var p1 = new Object(<span class="string">'HHardyy'</span>);</div><div class="line">var p2 = new Object(<span class="string">'小方块'</span>);</div><div class="line">alert( p1.showName == p2.showName );  //<span class="literal">true</span></div></pre></td></tr></table></figure></p><p>在JS源码中，系统对象也是基于原型的程序，所以尽量不要去修改或者添加系统对象下面的方法和属性，不然可能导致部分原本js的部分功能改变</p><h3 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h3><p>基本数据类型都有自己对应的包装对象，如String，Number，Boolean ，基本类型会找到对应的包装对象类型，然后包装对象把所有的属性和方法给了基本类型，然后包装对象消失<br>如果在String下面添加number类型的数据，会输出undefined<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var str = <span class="string">'HHardyy'</span>;</div><div class="line">String.prototype.lastValue = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line"><span class="built_in">return</span> this.charAt(this.length-1);</div><div class="line">&#125;;</div><div class="line">alert( str.lastValue() );  //y</div></pre></td></tr></table></figure></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>提到面向对象就肯定会有原型链<em>proto</em>，原型链是实例对象与原型之间的连接，它的最外层是Object.prototype，比如我在最外层添加一个love属性，那么这个属性可以在任何构造出来<br>的对象中调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">HHardyy</span></span>()&#123;</div><div class="line">    this.say=<span class="string">"666"</span>;</div><div class="line">&#125;</div><div class="line">Object.prototype.love = <span class="string">"鸡翅"</span>;</div><div class="line">var h = new HHardyy();</div><div class="line">alert(h.love);   //鸡翅</div></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/faceobject/3.png" alt="原型链手残图" title="">                </div>                <div class="image-caption">原型链手残图</div>            </figure><p>诶，。。。应该能看懂</p><h3 id="hasOwnProperty-constructor-instanceof-toString"><a href="#hasOwnProperty-constructor-instanceof-toString" class="headerlink" title="hasOwnProperty,constructor,instanceof,toString"></a>hasOwnProperty,constructor,instanceof,toString</h3><p>1、hasOwnProperty:看是不是对象自身下面的属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log( h.hasOwnProperty(<span class="string">"say"</span>))</div></pre></td></tr></table></figure></p><p>2、in：in运算符和hasOwnProperty不同，只要存在在原型上或者对象上就返回true<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'HHardyy'</span> <span class="keyword">in</span> Object;</div></pre></td></tr></table></figure></p><p>3、constructor:查看对象的构造函数<br>4、instanceof:对象与构造函数在原型链上是否有关系<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(h instanceof Array)</div></pre></td></tr></table></figure></p><p>5、toString():系统对象下面自带的 , 自己写的对象都是通过原型链找object下面的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log( Object.prototype.toString.call(h) == <span class="string">'[object Array]'</span> )</div></pre></td></tr></table></figure></p><p>6、Object.keys:ES5的Object.keys方法可以返回对象上的所有可枚举属性(只有对象上的，从原型上继承的没有)</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的概念：子类不影响父类，子类可以继承父类的一些功能 ( 代码复用 )，继承分成属性继承和方法继承。继承的类型分成拷贝继承，原型继承和类式继承<br>拷贝继承:  通用型的，有new或无new的时候都可以<br>类式继承:  new构造函数<br>原型继承:  无new的对象</p><p>属性的继承 : 调用父类的构造函数 call<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj1 = new Object1(<span class="string">'HHardyy'</span>);</div><div class="line"><span class="keyword">function</span> Object1(name)&#123;   //父类</div><div class="line">this.name = name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Object2(name,sex)&#123;  //子类</div><div class="line">Object1.call(this,name);</div><div class="line">this.sex = sex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>方法的继承：for in也就是拷贝继承 (jquery也是采用拷贝继承extend),原理就是遍历Object1之后赋给Object2,也可以封装成一个extend方法，在需要用的时候只需要传入2个对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> extend(obj1,obj2)&#123;</div><div class="line"><span class="keyword">for</span>(var attr <span class="keyword">in</span> obj2)&#123;</div><div class="line">obj1[attr] = obj2[attr];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>写好了这个extend方法，可以用来写自定义事件，比如各种弹框、拖拽什么的，先给对象设置默认参数，然后再做个参数传递，然后如果有用户输入参数，则该参数覆盖本身设置的默认参数，达到自定义效果。<br><a href="https://codepen.io/HHardyy/pen/eKqKqV" target="_blank" rel="external">codepen上做的一个小demo</a></p><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><p>原型继承的几种方式<br>一、原型链继承<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Object1</span></span>()&#123; this.name=<span class="string">"Object1"</span>; &#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Object2</span></span>()&#123;</div><div class="line">    this.age=<span class="string">"2"</span>; //Object2继承了Object1,通过原型，形成_proto_</div><div class="line">&#125;</div><div class="line">    Object2.prototype=new Object1();</div></pre></td></tr></table></figure></p><p>二、构造函数继承（对象冒充继承<br>为了解决引用共享和超类型无法传参的问题，我们采用一种叫借用构造函数的技术，或者成为对象冒充(伪造对象、经典继承)的技术来解决这两种问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Object1(age)&#123;</div><div class="line">    this.name=[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>]</div><div class="line">    this.age=age;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Object2(age)&#123;</div><div class="line">    Object1.call(this,age); //对象冒充，给超类型传参</div><div class="line">&#125;</div><div class="line">    var o2 = new Object2(20);</div><div class="line">    console.log(o2.age);//20</div><div class="line">    console.log(o2.name);//[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>]</div><div class="line">    o2.name.push(<span class="string">'HHardyy'</span>); //添加的新数据，只给 o2</div><div class="line">    console.log(o2.name)//[<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'HHardyy'</span>]</div></pre></td></tr></table></figure></p><p>三、组合继承（原型链继承+构造函数继承）<br>原型链+借用构造函数=组合继承。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Object1(age) &#123;</div><div class="line">    this.name = [<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>]</div><div class="line">    this.age = age;</div><div class="line">&#125;</div><div class="line">Object1.prototype.run = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> this.name + this.age;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">function</span> Object2(age) &#123;</div><div class="line">    Object1.call(this, age); //对象冒充</div><div class="line">&#125;</div><div class="line">Object2.prototype = new Object1(); //原型链继承</div><div class="line">    var o2 = new Object2(100);</div><div class="line">    console.log(o2.run());</div></pre></td></tr></table></figure></p><p>四、原型式继承<br>借助原型并基于已有的对象创建新对象，同时还不必因此创建自定义类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Object1(o) &#123; //传递一个字面量函数</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">F</span></span>() &#123;&#125; //创建一个构造函数</div><div class="line">    F.prototype = o; //把字面量函数赋值给构造函数的原型</div><div class="line">    <span class="built_in">return</span> new F(); //最终返回出实例化的构造函数</div><div class="line">&#125;</div><div class="line">var box = &#123; //字面量对象</div><div class="line">    name : <span class="string">'zhangsan'</span>,</div><div class="line">    arr : [<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>,<span class="string">'zhaoliu'</span>]</div><div class="line">&#125;;</div><div class="line">    var box1 = Object1(box); //传递</div><div class="line">    console.log(box1.name);</div><div class="line">    box1.name = <span class="string">'Jack'</span>;</div><div class="line">    console.log(box1.name);</div><div class="line">    console.log(box1.arr);</div><div class="line">    box1.arr.push(<span class="string">'parent'</span>);</div><div class="line">    console.log(box1.arr);</div><div class="line">    var box2 = Object1(box); //传递</div><div class="line">    console.log(box2.name);</div><div class="line">    console.log(box2.arr); //引用类型共享了</div></pre></td></tr></table></figure></p><p>五、寄生组合式继承<br>寄生组合式继承解决了两次调用的问题，组合式继承就会有两次调用的情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> object(o) &#123;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>() &#123;&#125;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="built_in">return</span> new F();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> inheritPrototype(subType, superType) &#123;</div><div class="line">    var prototype = object(superType.prototype);  //创建对象</div><div class="line">    prototype.constructor = subType;              //增强对象</div><div class="line">    subType.prototype = prototype;                //指定对象</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>原型式继承其实就是说构造函数和子构造函数，或者说类和子类之间(js中不存在类),唯一的继承传递方式是通过原型，而不是像其他语言直接通过extends(ES6的语法糖出现了extends)<br>，所以需要手写prototype。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var Object1 = &#123; name : <span class="string">'HHardyy'</span> &#125;;</div><div class="line">var Object2 = cloneObj(Object1);</div><div class="line">console.log(Object2.name);</div><div class="line"></div><div class="line"><span class="keyword">function</span> cloneObj(obj)&#123;</div><div class="line">var F = <span class="function"><span class="title">function</span></span>()&#123;&#125;;</div><div class="line">F.prototype = obj;</div><div class="line"><span class="built_in">return</span> new F(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h4><p>在js中没有类的概念，所以将js中的构造函数当成类，要做属性和方法继承的时候，要分开继承<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 父类 </div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Object1</span></span>() &#123;  this.name = <span class="string">'HHardyy'</span>; &#125;</div><div class="line">Object1.prototype.showName = <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">     alert( this.name ); </div><div class="line">&#125;;</div><div class="line">// 子类</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Object2</span></span>() &#123;&#125;;</div><div class="line">// 将父类创建出来的对象赋值给子类的原型,就是类式继承</div><div class="line">    Object2.prototype = new Object1(); </div><div class="line">    var o2 = new Object2();</div><div class="line">    o2.showName()//HHardyy</div></pre></td></tr></table></figure></p><p>上面这就是一句话继承，这时候把o2.constructor打印出来，发现其实是有问题的，它把Object1给打印了出来<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/faceobject/4.png" alt="Object1" title="">                </div>                <div class="image-caption">Object1</div>            </figure><br>原因是直接把newObject1()赋值给Object2.prototype，它就会把他原先自动生产的还有我们自己添加的原型下面的属性都覆盖掉了，所以把construtor指向给修改了，因此还需要修正con<br>structor指向Object2.prototype.constructor=Object2，其实这么改了以后虽然表面正常了，但还是有问题的，假如Object1的name是个数组[1,2]的话，声明出来的对象.name也不是<br>同一个对象，这时候可以构建一个空对象H()继承Object1的prototype,然后Object2再继承H()的prototype，就可以解决问题了。</p><h3 id="点表示法与中括号表示法"><a href="#点表示法与中括号表示法" class="headerlink" title="点表示法与中括号表示法"></a>点表示法与中括号表示法</h3><p>一般来说，访问对象属性时使用的都是点表示法，这也是很多面向对象语言中通用的语法，不过，在javascript也可以使用方括号表示法来访问对象的属性， 在使用方括号语法时，应该将要访问的属性以字符串的形式放在括号中，就像这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(person[<span class="string">"name"</span>]); //hhardyy</div><div class="line">alert(person.name); //hhardyy</div></pre></td></tr></table></figure></p><p>从功能上看，这两种访问对象属性的方法没有任何区别。但是方括号语法的主要优点是可以通过变量来访问属性，就像这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var prototypeName=<span class="string">"name"</span>;</div><div class="line">alert(person[prototypeName]);//hhardyy</div></pre></td></tr></table></figure></p><p>如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或者保留字，也可以使用方括号表示法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person[<span class="string">"first name"</span>]=<span class="string">"hhardyy"</span></div></pre></td></tr></table></figure></p><p>由于first name中包含一个空格，所以不能使用点表示法来访问它。然而属性名中是可以包含非字母非数字的，这时候就可以使用方括号表示法来访问它们。通常，除非必须使用变量来访问属性，否则建议使用点表示法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象的艺术，都是艺术，全是艺术，全是爆炸~&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=415792563&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="原型" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="stringify" scheme="http://yoursite.com/tags/stringify/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="hasOwnProperty" scheme="http://yoursite.com/tags/hasOwnProperty/"/>
    
      <category term="constructor" scheme="http://yoursite.com/tags/constructor/"/>
    
      <category term="instanceof" scheme="http://yoursite.com/tags/instanceof/"/>
    
      <category term="toString" scheme="http://yoursite.com/tags/toString/"/>
    
      <category term="原型继承" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/"/>
    
      <category term="类式继承" scheme="http://yoursite.com/tags/%E7%B1%BB%E5%BC%8F%E7%BB%A7%E6%89%BF/"/>
    
      <category term="浅拷贝与深拷贝" scheme="http://yoursite.com/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
</feed>
