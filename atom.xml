<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小方块 - hhardyy.com</title>
  
  <subtitle>复杂的坑+归其原理+了解实现规则===解决？解决成功：加油解决成功;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-03-07T03:08:27.374Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BingZhenhuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MYSQL</title>
    <link href="http://yoursite.com/2021/03/03/MYSQL%E7%A7%92%E6%87%82/"/>
    <id>http://yoursite.com/2021/03/03/MYSQL秒懂/</id>
    <published>2021-03-02T23:39:31.000Z</published>
    <updated>2021-03-07T03:08:27.374Z</updated>
    
    <content type="html"><![CDATA[<p>mysql</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=864711417&auto=0&height=66"></iframe><br><a id="more"></a></p><p><a href="https://pan.baidu.com/s/1ejSUByvvi94e0jb5b4zPrw" target="_blank" rel="noopener">mysql macos: https://pan.baidu.com/s/1ejSUByvvi94e0jb5b4zPrw 密码: 4rl8</a></p><p><a href="https://pan.baidu.com/s/1DrQ0v0GKeLddKL_yegRn5w" target="_blank" rel="noopener">navicat: https://pan.baidu.com/s/1DrQ0v0GKeLddKL_yegRn5w 密码: r8pw</a></p><h3 id="什么是-SQL"><a href="#什么是-SQL" class="headerlink" title="什么是 SQL?"></a>什么是 SQL?</h3><p>Structured Query Language(结构化查询语言), 为了定义操作所有关系型数据库的规则.每一种数据库操作的方式存在不一样的地方, 称为“方言”;</p><h3 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h3><h4 id="DDL-Data-Definition-Language-数据定义语言"><a href="#DDL-Data-Definition-Language-数据定义语言" class="headerlink" title="DDL (Data Definition Language) 数据定义语言"></a>DDL (Data Definition Language) 数据定义语言</h4><p>用来定义数据库对象: 数据库, 表,列等. 关键字:create、drop、alter 等</p><h4 id="DML-Data-Manipulation-Language-数据操作语言"><a href="#DML-Data-Manipulation-Language-数据操作语言" class="headerlink" title="DML (Data Manipulation Language) 数据操作语言"></a>DML (Data Manipulation Language) 数据操作语言</h4><p>用来对数据库中的表的数据进行增删改, 关键字:insert、delete、update 等</p><h4 id="DQL-Data-Query-Language-数据查询语言"><a href="#DQL-Data-Query-Language-数据查询语言" class="headerlink" title="DQL (Data Query Language) 数据查询语言"></a>DQL (Data Query Language) 数据查询语言</h4><p>用来查询数据库中表的记录. 关键字: select、where 等</p><h4 id="DCL-Data-Control-Language-数据控制语言"><a href="#DCL-Data-Control-Language-数据控制语言" class="headerlink" title="DCL (Data Control Language) 数据控制语言"></a>DCL (Data Control Language) 数据控制语言</h4><p>用来定义数据库的访问权限和安全级别, 以及创建用户. 关键字: grant、revoke 等<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mysql-base1/1.jpeg" alt="“image”" title>                </div>                <div class="image-caption">“image”</div>            </figure></p><h3 id="超基础-mysql-操作"><a href="#超基础-mysql-操作" class="headerlink" title="超基础 mysql 操作"></a>超基础 mysql 操作</h3><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>配置好 mysql 环境变量之后直接 sql, 如果没配置好就要进入安装 mysql 的目录下去敲</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql [-h主机名  -p端口] -u用户名 -p密码</span><br></pre></td></tr></table></figure><h4 id="常见简单-curd"><a href="#常见简单-curd" class="headerlink" title="常见简单 curd"></a>常见简单 curd</h4><p>连接 sql 数据库之后, 命令行会变成 mysql&gt; 这样的形式, 然后就可以直接敲 sql 了,注意命令的最后要加上; 或者/g</p><h5 id="查看当前连接下的所有数据库"><a href="#查看当前连接下的所有数据库" class="headerlink" title="查看当前连接下的所有数据库"></a>查看当前连接下的所有数据库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h5 id="选择指定的库"><a href="#选择指定的库" class="headerlink" title="选择指定的库"></a>选择指定的库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 库名</span><br></pre></td></tr></table></figure><h5 id="查看当前库的所有表"><a href="#查看当前库的所有表" class="headerlink" title="查看当前库的所有表"></a>查看当前库的所有表</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h5 id="查看其他库的所有表"><a href="#查看其他库的所有表" class="headerlink" title="查看其他库的所有表"></a>查看其他库的所有表</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables from 库名;</span><br></pre></td></tr></table></figure><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 表名 (</span><br><span class="line">  字段名  字段类型,</span><br><span class="line">  字段名  字段类型</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into `tb_user` (name, age) values (<span class="string">'hardy'</span>, 19);</span><br></pre></td></tr></table></figure><h5 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mysql-base1/0.png" alt="得到表结构" title>                </div>                <div class="image-caption">得到表结构</div>            </figure><h5 id="查看服务器的版本"><a href="#查看服务器的版本" class="headerlink" title="查看服务器的版本"></a>查看服务器的版本</h5><ol><li>登陆到 mysql 服务端</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure><ol start="2"><li>没登陆到 mysql 服务端</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version   ||   mysql -V</span><br></pre></td></tr></table></figure><h5 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 100%98 as 结果</span><br><span class="line">select name as 名字, age as 年龄 from tb_user</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mysql-base1/2.png" alt="select .. as  别名" title>                </div>                <div class="image-caption">select .. as  别名</div>            </figure><p>有点 js 里面 import xxx as ooo from ‘xxoo’的那种味道了, 目的其实就是为了重名的情况可以使用别名.</p><h5 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h5><p>假如要查询表里面都有哪些年龄段的小方块<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mysql-base1/3.png" alt="所有年龄段" title>                </div>                <div class="image-caption">所有年龄段</div>            </figure><br>可以看到查出来两个三岁的, 但是实际上 3 岁的只需要看到一个就好了, 所以就可以这么去重</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select DISTINCT age from tb_user</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/mysql-base1/4.png" alt="所有年龄段" title>                </div>                <div class="image-caption">所有年龄段</div>            </figure><h5 id="号的作用"><a href="#号的作用" class="headerlink" title="+ 号的作用"></a>+ 号的作用</h5><blockquote><p>java 中的+号:<br>1、运算符: 两个操作数都是数值型<br>2、连接符: 只要有一个操作数为字符串</p></blockquote><blockquote><p>mysql 中的+号:<br>仅仅只有一个功能: 运算符<br>demo: select 100 + 90;则是查询 190, 然后别名是 100+90</p></blockquote><p>⚠️ 注意: 如果其中一方为字符型(如: select ‘100’ + 90), 则会试图将字符型转换成数值型, 如果转换成功, 则继续做加法运算, 也就是(select 100 + 90); 如果转换失败(如: select ‘hardy’ + 90), 则字符数值转换成 0, 也就是(select 0 + 90);</p><h5 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(name, age) as result   // 别名: result   结果: 小方块3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=864711417&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 2021</title>
    <link href="http://yoursite.com/2021/02/22/ECMAScript-2021/"/>
    <id>http://yoursite.com/2021/02/22/ECMAScript-2021/</id>
    <published>2021-02-21T20:49:41.000Z</published>
    <updated>2021-02-21T21:48:04.950Z</updated>
    
    <content type="html"><![CDATA[<p>也就是 ES12</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27676908&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>String.prototype.replaceAll</li><li>Promise.any</li><li>逻辑操作符和赋值表达式</li><li>数值分隔符</li><li>Intl.ListFormat</li><li>Intl.DateTimeFormat 的 dateStyle 和 timeStyle 选项</li></ul><h3 id="String-prototype-replaceAll"><a href="#String-prototype-replaceAll" class="headerlink" title="String.prototype.replaceAll"></a>String.prototype.replaceAll</h3><p>前端 or node 玩家通常会遇到一些需求, 匹配更换掉字符串中的一些字段, 如果仅替换一个字符串中某模式（pattern）的首个实例, 直接 str.replace(reg, ‘xx’); 但是如果需要匹配符合规则的所有项, 唯一的方式就是使用全局匹配 g;</p><p>拟议的方法 replaceAll() 会返回一个新字符串,该字符串中用一个替换项替换了原字符串中所有匹配了某模式的部分。模式可以是一个字符串或一个正则表达式,而替换项可以是一个字符串或一个应用于每个匹配项的函数。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/es2021/1.png" alt="test''" title>                </div>                <div class="image-caption">test''</div>            </figure></p><h3 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a>Promise.any</h3><p>ES2021 将引入 Promise.any() 方法,如果 promise 列表或数组中首个 resolve 的 promise(尽管某个 promise 的 reject 早于另一个 promise 的 resolve, Promise.any() 仍将返回那个首先 resolve 的 promise), ,这样就会短路并返回一个值。如果所有 promise 都被 reject ,该方法则将抛出一个聚合的错误信息 （AggregateError: All promises were rejected）。</p><p>⚠️ 和 Promise.race()的区别是 之处在于,Promise.race()在某个 promise 率先 resolve 或 reject 后都会短路。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">"p1"</span>);</span><br><span class="line">  &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">"p2"</span>);</span><br><span class="line">  &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">"p3"</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.any([p1, p2, p3]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// p3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="逻辑操作符和赋值表达式"><a href="#逻辑操作符和赋值表达式" class="headerlink" title="逻辑操作符和赋值表达式"></a>逻辑操作符和赋值表达式</h3><p>在新提案里，将有能力结合逻辑操作符和赋值表达式。&amp;&amp;、 || 和 ?? 的一些 demo</p><h4 id="amp-amp-逻辑赋值操作符"><a href="#amp-amp-逻辑赋值操作符" class="headerlink" title="&amp;&amp; 逻辑赋值操作符"></a>&amp;&amp; 逻辑赋值操作符</h4><p>该操作符用来在仅当左侧（译注：原文为 LHS，即 Left-hand Side）变量为真值（truthy）时，才将右侧（RHS）变量赋值给左侧变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">2</span>;</span><br><span class="line">num1 &amp;&amp;= num2; <span class="comment">// 或者num1 &amp;&amp; (num1 = num2) if(num1) num1 = num2</span></span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="逻辑赋值操作符"><a href="#逻辑赋值操作符" class="headerlink" title="|| 逻辑赋值操作符"></a>|| 逻辑赋值操作符</h4><p>该操作符用来在仅当左侧变量为虚值（falsy）时，才将右侧变量赋值给左侧变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">2</span>;</span><br><span class="line">num1 ||= num2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="逻辑赋值操作符-1"><a href="#逻辑赋值操作符-1" class="headerlink" title="?? 逻辑赋值操作符"></a>?? 逻辑赋值操作符</h4><p>ES2020 已经引入了空值合并操作符（Nullish Coalescing operator，即 ??），该操作符亦可与赋值表达式结合。在仅当左侧变量为 undefined 或 null 时，该操作符才将右侧变量赋值给左侧变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">2</span>;</span><br><span class="line">num1 ??= num2;</span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="数值分隔符"><a href="#数值分隔符" class="headerlink" title="数值分隔符"></a>数值分隔符</h3><p>数字分隔符（Numeric Separators）的引入将通过使用 _（下划线）符号在数字分组间提供一个隔离以便于阅读数值。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">100</span>_000;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 100000</span></span><br></pre></td></tr></table></figure><h3 id="Intl-ListFormat"><a href="#Intl-ListFormat" class="headerlink" title="Intl.ListFormat"></a>Intl.ListFormat</h3><p>ListFormat 对象的构造方法有两个参数，皆为可选。首个参数是一个语言标识（locale），而第二个参数是一个包含了 style 和 type 两个属性的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Intl</span>.ListFormat([locales[, options]])</span><br></pre></td></tr></table></figure><p>Intl.ListFormat 有一个叫做 format() 的方法，接受一个数组作为参数，并因 locale 和选项而异以相应的方式格式化该参数数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">"Pen"</span>, <span class="string">"Pencil"</span>, <span class="string">"Paper"</span>];</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Intl</span>.ListFormat(<span class="string">"en"</span>, &#123; <span class="attr">style</span>: <span class="string">"short"</span>, <span class="attr">type</span>: <span class="string">"conjunction"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.format(arr));</span><br><span class="line"></span><br><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Intl</span>.ListFormat(<span class="string">"en"</span>, &#123; <span class="attr">style</span>: <span class="string">"long"</span>, <span class="attr">type</span>: <span class="string">"conjunction"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.format(arr));</span><br><span class="line"></span><br><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Intl</span>.ListFormat(<span class="string">"en"</span>, &#123; <span class="attr">style</span>: <span class="string">"narrow"</span>, <span class="attr">type</span>: <span class="string">"conjunction"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.format(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入意大利语标识</span></span><br><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Intl</span>.ListFormat(<span class="string">"it"</span>, &#123; <span class="attr">style</span>: <span class="string">"short"</span>, <span class="attr">type</span>: <span class="string">"conjunction"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.format(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入德语标识</span></span><br><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Intl</span>.ListFormat(<span class="string">"de"</span>, &#123; <span class="attr">style</span>: <span class="string">"long"</span>, <span class="attr">type</span>: <span class="string">"conjunction"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.format(arr));</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/es2021/2.png" alt="test''" title>                </div>                <div class="image-caption">test''</div>            </figure><h3 id="Intl-DateTimeFormat-的-dateStyle-和-timeStyle-选项"><a href="#Intl-DateTimeFormat-的-dateStyle-和-timeStyle-选项" class="headerlink" title="Intl.DateTimeFormat 的 dateStyle 和 timeStyle 选项"></a>Intl.DateTimeFormat 的 dateStyle 和 timeStyle 选项</h3><p>Intl.DateTimeFormat 对象是一个支持语言敏感日期和时间格式化的构造器。拟议的 dateStyle 和 timeStyle 选项可被用于获取一个 locale 特有的日期和给定长度的时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 短格式的时间</span></span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">"en"</span>, &#123; <span class="attr">timeStyle</span>: <span class="string">"short"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.format(<span class="built_in">Date</span>.now()));</span><br><span class="line"><span class="comment">// 11:27 PM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中等格式的时间</span></span><br><span class="line">o = <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">"en"</span>, &#123; <span class="attr">timeStyle</span>: <span class="string">"medium"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.format(<span class="built_in">Date</span>.now()));</span><br><span class="line"><span class="comment">// 11:27:57 PM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 长格式的时间</span></span><br><span class="line">o = <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">"en"</span>, &#123; <span class="attr">timeStyle</span>: <span class="string">"long"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.format(<span class="built_in">Date</span>.now()));</span><br><span class="line"><span class="comment">// 11:27:57 PM GMT+11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短格式的日期</span></span><br><span class="line">o = <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">"en"</span>, &#123; <span class="attr">dateStyle</span>: <span class="string">"short"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.format(<span class="built_in">Date</span>.now()));</span><br><span class="line"><span class="comment">// 10/6/20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中等格式的日期</span></span><br><span class="line">o = <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">"en"</span>, &#123; <span class="attr">dateStyle</span>: <span class="string">"medium"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.format(<span class="built_in">Date</span>.now()));</span><br><span class="line"><span class="comment">// Oct 6, 2020</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 长格式的日期</span></span><br><span class="line">o = <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">"en"</span>, &#123; <span class="attr">dateStyle</span>: <span class="string">"long"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.format(<span class="built_in">Date</span>.now()));</span><br><span class="line"><span class="comment">// October 6, 2020</span></span><br></pre></td></tr></table></figure><p>dateStyle 和 timeStyle 选项共用并结合不同语言标识的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> abc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 英语</span></span><br><span class="line">abc = <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">"en"</span>, &#123; <span class="attr">timeStyle</span>: <span class="string">"short"</span>, <span class="attr">dateStyle</span>: <span class="string">"long"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(abc.format(<span class="built_in">Date</span>.now()));</span><br><span class="line"><span class="comment">// October 6, 2020 at 11:40 PM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 意大利语</span></span><br><span class="line">abc = <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">"it"</span>, &#123; <span class="attr">timeStyle</span>: <span class="string">"short"</span>, <span class="attr">dateStyle</span>: <span class="string">"long"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(abc.format(<span class="built_in">Date</span>.now()));</span><br><span class="line"><span class="comment">// 6 ottobre 2020 23:40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 德语</span></span><br><span class="line">abc = <span class="keyword">new</span> <span class="built_in">Intl</span>.DateTimeFormat(<span class="string">"de"</span>, &#123; <span class="attr">timeStyle</span>: <span class="string">"short"</span>, <span class="attr">dateStyle</span>: <span class="string">"long"</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(abc.format(<span class="built_in">Date</span>.now()));</span><br><span class="line"><span class="comment">// 6. Oktober 2020 um 23:40</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;也就是 ES12&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=27676908&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="ECMASCRIPT" scheme="http://yoursite.com/tags/ECMASCRIPT/"/>
    
      <category term="逻辑操作" scheme="http://yoursite.com/tags/%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C/"/>
    
      <category term="es2021" scheme="http://yoursite.com/tags/es2021/"/>
    
      <category term="replaceAll" scheme="http://yoursite.com/tags/replaceAll/"/>
    
      <category term="Promise.any" scheme="http://yoursite.com/tags/Promise-any/"/>
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
      <category term="数值分隔符" scheme="http://yoursite.com/tags/%E6%95%B0%E5%80%BC%E5%88%86%E9%9A%94%E7%AC%A6/"/>
    
      <category term="Intl.ListFormat" scheme="http://yoursite.com/tags/Intl-ListFormat/"/>
    
      <category term="Intl.DateTimeFormat 的 dateStyle 和 timeStyle" scheme="http://yoursite.com/tags/Intl-DateTimeFormat-%E7%9A%84-dateStyle-%E5%92%8C-timeStyle/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 2020</title>
    <link href="http://yoursite.com/2021/02/22/ECMAScript-2020/"/>
    <id>http://yoursite.com/2021/02/22/ECMAScript-2020/</id>
    <published>2021-02-21T19:24:58.000Z</published>
    <updated>2021-02-21T21:43:57.551Z</updated>
    
    <content type="html"><![CDATA[<p>也就是 ES11, 补充 article</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1448906633&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>Optional Chaining 可选链式调用</li><li>Nullish Coalescing 空值合并</li><li>Private Fields 私有字段</li><li>Static Fields 静态字段</li><li>Top Level Await 顶级 Await</li><li>Promise.allSettled 方法</li><li>Dynamic Import 动态引入</li><li>MatchAll 匹配所有项</li><li>globalThis 全局对象</li><li>BigInt</li></ul><h3 id="Optional-Chaining-可选链式调用"><a href="#Optional-Chaining-可选链式调用" class="headerlink" title="Optional Chaining 可选链式调用"></a>Optional Chaining 可选链式调用</h3><p>几乎所有前端开发者都曾经遇到过这样的问题<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/es2020/1.png" alt="访问一个对象中不存在的属性下的不存在的属性''" title>                </div>                <div class="image-caption">访问一个对象中不存在的属性下的不存在的属性''</div>            </figure><br>但是我们只需要知道存不存在, 而不需要直接报错, 这时候可以使用可选链式调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(persons.person2?.name); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr?.[<span class="number">1</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(fn?.()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="Nullish-Coalescing-空值合并"><a href="#Nullish-Coalescing-空值合并" class="headerlink" title="Nullish Coalescing 空值合并"></a>Nullish Coalescing 空值合并</h3><p>为变量提供回退值,逻辑操作符 || 还是必须的。它适用于很多情况,但不能应用在一些特殊的场景。例如,初始值是布尔值或数字的情况。举例说明,我们要把数字赋值给一个变量,当变量的初始值不是数字时,就默认其为 666</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">const</span> newNum = num || <span class="number">666</span>; <span class="comment">// newNum = 111</span></span><br></pre></td></tr></table></figure><p>假如 num 是 0 就导致了左边 num 为假, newNum = 666<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/es2020/22.png" alt="test''" title>                </div>                <div class="image-caption">test''</div>            </figure><br>所以即便 num 是数字 0, 最后 newNum 也是 666; 并不是我们需要的效果, 那么我们可以这么写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> newNum = num ?? <span class="number">666</span>; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/es2020/2.png" alt="test''" title>                </div>                <div class="image-caption">test''</div>            </figure><h3 id="Private-Fields-私有字段"><a href="#Private-Fields-私有字段" class="headerlink" title="Private Fields 私有字段"></a>Private Fields 私有字段</h3><p>许多具有 classes 的编程语言允许定义类作为公共的,比如 java, c++,受保护的或私有的属性。Public 属性可以从类的外部或者子类访问,protected 属性只能被子类访问,private 属性只能被类内部访问。JavaScript 从 ES6 开始支持类语法,但直到现在才引入了私有字段。要定义私有属性,必须在其前面加上散列符号#。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name = <span class="string">"hardy"</span>;</span><br><span class="line">  #age = 18;</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    return this.#age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">// hardy</span></span><br><span class="line"><span class="built_in">console</span>.log(p.getAge()); <span class="comment">// 18</span></span><br><span class="line"><span class="comment">// console.log(p.#age)   SyntaxError: Private field '#age' must be declared in an enclosing class</span></span><br></pre></td></tr></table></figure><p>console.log(p.#age)会报错是因为从外部访问了 Person 的私有属性 age, 所以 SyntaxError: Private field ‘#age’ must be declared in an enclosing class</p><h3 id="Static-Fields-静态字段"><a href="#Static-Fields-静态字段" class="headerlink" title="Static Fields 静态字段"></a>Static Fields 静态字段</h3><p>假如声明了 class Person, 然后试图直接访问没有实例化的 Person 的 getAge 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(Person.getAge())  Person.getAge is not a function</span></span><br></pre></td></tr></table></figure><p>用上 static 关键字之后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> getAge() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.getAge()); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>由此得到: 类方法可以被 static 关键词声明然后从外部调用。</p><h3 id="Top-Level-Await-顶级-Await"><a href="#Top-Level-Await-顶级-Await" class="headerlink" title="Top Level Await 顶级 Await"></a>Top Level Await 顶级 Await</h3><p>大多数想要采用同步的方式书写异步代码的前端玩家, 说到 await 就会想到 async, 因为如果想要使用 await 函数必须用 async 关键字定义, 就像这样:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(url);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么在全局作用域中去等待某些结果就可能要使用立即调用的函数表达式（IIFE）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(url);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>但引入了 顶级 Await 后，不需要再把代码包裹在一个 async 函数中了, 而是可以直接这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> fetch(url);</span><br></pre></td></tr></table></figure><p>这个特性对于解决模块依赖或当初始源无法使用而需要备用源的时候是非常有用的.比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">module</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'module url'</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> () &#123;</span><br><span class="line">  <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'module url1'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-allSettled-方法"><a href="#Promise-allSettled-方法" class="headerlink" title="Promise.allSettled 方法"></a>Promise.allSettled 方法</h3><p>等待多个 promise 返回结果时，我们通常使用 Promise.all([p1, p2])。那么保不准有些请求失败之后抛错, 然后我们希望的是某个请求失败不影响其他请求正常返回。针对这种情况 ES11 引入了 Promise.allSettled.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="built_in">Promise</span>.reject(<span class="string">"not word"</span>);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="built_in">Promise</span>.resolve(<span class="string">"i word"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [UnhandledPromiseRejection: This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). The promise rejected with the reason "not word".] &#123;</span></span><br><span class="line"><span class="comment">//   code: 'ERR_UNHANDLED_REJECTION'</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>由普通 Promise.all 改成 Promise.allSettled</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.allSettled([p1, p2, p3]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; status: 'fulfilled', value: 'hello' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; status: 'rejected', reason: 'not word' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; status: 'fulfilled', value: 'i word' &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h3 id="Dynamic-Import-动态引入"><a href="#Dynamic-Import-动态引入" class="headerlink" title="Dynamic Import 动态引入"></a>Dynamic Import 动态引入</h3><p>你也许在 webpack 的模块绑定中已经使用过动态引入。但对于该特性的原生支持已经到来(尤大的新框架 vite 也是利用了 import 时会跑异步的特性直接加载运行时资源文件, 省略了 compiler 的过程)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  getName () &#123; <span class="built_in">console</span>.log(<span class="string">'hardy) &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// js2.js</span></span><br><span class="line"><span class="string">import('</span>js1.js<span class="string">').then(Person =&gt; &#123;</span></span><br><span class="line"><span class="string">    Person.getName()</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="MatchAll-匹配所有项"><a href="#MatchAll-匹配所有项" class="headerlink" title="MatchAll 匹配所有项"></a>MatchAll 匹配所有项</h3><p>想要查找字符串中所有正则表达式的匹配项和它们的位置，MatchAll 非常有用。<br>forEach single match demo….(省略)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = <span class="string">"pear, apple, banana, apple, orange, apple"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> fruits.matchAll(<span class="regexp">/apple/g</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(match);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   'apple',</span></span><br><span class="line"><span class="comment">//   index: 6,</span></span><br><span class="line"><span class="comment">//   input: 'pear, apple, banana, apple, orange, apple',</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   'apple',</span></span><br><span class="line"><span class="comment">//   index: 21,</span></span><br><span class="line"><span class="comment">//   input: 'pear, apple, banana, apple, orange, apple',</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   'apple',</span></span><br><span class="line"><span class="comment">//   index: 36,</span></span><br><span class="line"><span class="comment">//   input: 'pear, apple, banana, apple, orange, apple',</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>⚠️ 需要注意的是 fruits.matchAll 的正则需要完整匹配也就是 g, 否则就会 TypeError: String.prototype.matchAll called with a non-global RegExp argument</p><h3 id="globalThis-全局对象"><a href="#globalThis-全局对象" class="headerlink" title="globalThis 全局对象"></a>globalThis 全局对象</h3><p>为了在 node 和 window 中可以找到统一的全局对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window下</span></span><br><span class="line"><span class="built_in">window</span> === globalThis; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// node环境</span></span><br><span class="line">global === globalThis;</span><br></pre></td></tr></table></figure><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p>JavaScript 中能够精确表达的最大数字是 2^53 - 1。而 BigInt 可以用来创建更大的数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> theBiggerNumber = <span class="number">9007199254740991n</span>;</span><br><span class="line"><span class="keyword">const</span> evenBiggerNumber = BigInt(<span class="number">9007199254740991</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;也就是 ES11, 补充 article&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1448906633&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="ECMASCRIPT" scheme="http://yoursite.com/tags/ECMASCRIPT/"/>
    
      <category term="es2020" scheme="http://yoursite.com/tags/es2020/"/>
    
      <category term="static" scheme="http://yoursite.com/tags/static/"/>
    
      <category term="逻辑操作" scheme="http://yoursite.com/tags/%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C/"/>
    
      <category term="私有字段" scheme="http://yoursite.com/tags/%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5/"/>
    
      <category term="await" scheme="http://yoursite.com/tags/await/"/>
    
      <category term="Promise.allSettled" scheme="http://yoursite.com/tags/Promise-allSettled/"/>
    
      <category term="Import" scheme="http://yoursite.com/tags/Import/"/>
    
      <category term="matchAll" scheme="http://yoursite.com/tags/matchAll/"/>
    
      <category term="globalThis" scheme="http://yoursite.com/tags/globalThis/"/>
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
      <category term="BigInt" scheme="http://yoursite.com/tags/BigInt/"/>
    
  </entry>
  
  <entry>
    <title>java秒入门</title>
    <link href="http://yoursite.com/2021/02/12/java%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2021/02/12/java基础/</id>
    <published>2021-02-12T05:53:49.000Z</published>
    <updated>2021-02-28T08:30:44.440Z</updated>
    
    <content type="html"><![CDATA[<p>复习了一波 java</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=478507889&auto=0&height=66"></iframe><br><a id="more"></a></p><p><a href="https://docs.oracle.com/en/" target="_blank" rel="noopener">oracle 官网: https://docs.oracle.com/en/</a></p><p><a href="https://docs.oracle.com/en/java/javase/" target="_blank" rel="noopener">选择 JDK 版本进入: https://docs.oracle.com/en/java/javase/</a></p><p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/index.html" target="_blank" rel="noopener">java 官网 API: https://docs.oracle.com/en/java/javase/11/docs/api/index.html</a></p><h3 id="八种数据类型"><a href="#八种数据类型" class="headerlink" title="八种数据类型"></a>八种数据类型</h3><p>1、byte: 1 个字节 (-2^7~2^7-1 )<br>2、short: 2 个字节 (-2^15~2^15-1)<br>3、int: 4 个字节 (-2^31~2^31-1)<br>4、long: 8 个字节 (-2^63~2^63-1)<br>5、float: 4 个字节 (3.4<em>10^(-38) ~ 3.4</em>10^(+38)) (float 占 4 个字节, 为什么比 long 表示的范围大? 因为虽然 long 占 8 个字节, 但是按整数的规则计算的, float 虽然占 4 个字节, 但是是按小数的规则计算的, 所以 float 表示的范围要比 long 大)<br>6、double: 8 个字节 (1.7<em>10^(-308) ~ 1.7</em>10(308))<br>7、char: 2 个字节 (0~2^16-1)<br>8、boolean: 1 个字节 (true || false)</p><h3 id="计算机存储数据的形式"><a href="#计算机存储数据的形式" class="headerlink" title="计算机存储数据的形式"></a>计算机存储数据的形式</h3><p>计算机中最小的存储单元是<span style="color: #FF7DC7">字节</span>(Byte, 通常用 B 表示), 每个字节包含 8 个<span style="color: #FF7DC7">位</span>(bit, 又叫“比特位” 通常用 b 表示, 值为 0 或者 1)</p><table><thead><tr><th style="text-align:center">单位</th><th style="text-align:center">换算</th></tr></thead><tbody><tr><td style="text-align:center">1B(字节)</td><td style="text-align:center">8bit</td></tr><tr><td style="text-align:center">1KB</td><td style="text-align:center">1024B</td></tr><tr><td style="text-align:center">1MB</td><td style="text-align:center">1024KB</td></tr><tr><td style="text-align:center">1GB</td><td style="text-align:center">1024MB</td></tr><tr><td style="text-align:center">1TB</td><td style="text-align:center">1024GB</td></tr></tbody></table><blockquote><p>所以通常我们获取浏览器当前本地缓存容量剩余可以这么求:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.localStorage) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"浏览器不支持localstorage"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> <span class="built_in">window</span>.localStorage) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">window</span>.localStorage.hasOwnProperty(item)) &#123;</span><br><span class="line">        size += <span class="built_in">window</span>.localStorage.getItem(item).length;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`当前localstorage的剩余容量为<span class="subst">$&#123;(size <span class="regexp">/ 1024).toFixed(2)&#125;KB`);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;)();</span></span></span></span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>不同类型的数据之间可能会进行运算, 而这些数据取值范围不同, 存储方式不同, 直接进行运算可能会造成数据损失, 所以需要将一种类型转换成另外一种类型再进行运算</p><h4 id="1、自动-隐式-类型转换"><a href="#1、自动-隐式-类型转换" class="headerlink" title="1、自动(隐式)类型转换"></a>1、自动(隐式)类型转换</h4><p>小类型转大类型, 自动提升为大类型, 运算结果是大类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据类型的范围从小到大如下:</span><br><span class="line"><span class="keyword">byte</span>, <span class="keyword">short</span>, <span class="keyword">char</span> -&gt;  <span class="keyword">int</span>(默认的整形) -&gt; <span class="keyword">long</span> -&gt; <span class="keyword">float</span> -&gt; <span class="keyword">double</span>(默认的浮点型)</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>型不参与比较, 它的值只有<span class="keyword">true</span>和<span class="keyword">float</span>两个</span><br></pre></td></tr></table></figure><h4 id="2、强制-显式-类型转换"><a href="#2、强制-显式-类型转换" class="headerlink" title="2、强制(显式)类型转换"></a>2、强制(显式)类型转换</h4><p>手动将大类型转换成小类型, 运算结果是小类型, 转换格式: 小类型 变量名 = (小类型)大类型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标类型 变量名 = (目标类型) 要转换的值</span><br><span class="line">⚠️注意: 强制类型转换在使用的时候可能会出现丢失精度的问题</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/java-base/1.png" alt="一般的类型转换''" title>                </div>                <div class="image-caption">一般的类型转换''</div>            </figure><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><h4 id="什么是方法重载"><a href="#什么是方法重载" class="headerlink" title="什么是方法重载"></a>什么是方法重载</h4><p>在同一个类中的多个方法, 它们方法名相同, 参数列表不同, 这样的情况称为方法重载. 方法重载与返回值类型无关</p><h5 id="参数列表不同"><a href="#参数列表不同" class="headerlink" title="参数列表不同:"></a>参数列表不同:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、参数的个数不同</span><br><span class="line"><span class="number">2</span>、对应位置的参数类型不同</span><br></pre></td></tr></table></figure><h5 id="方法签名"><a href="#方法签名" class="headerlink" title="方法签名"></a>方法签名</h5><p>方法名 + 参数列表</p><h4 id="为什么需要方法重载"><a href="#为什么需要方法重载" class="headerlink" title="为什么需要方法重载"></a>为什么需要方法重载</h4><p>当实现的功能相同, 但具体的实现方式不同, 我们可以通过定义名称相同, 参数(条件)不同的方法, 来更好的识别和管理类中的方法.</p><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><p>在内存中为数组开辟连续空间并为每个元素赋值的过程</p><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>计算机的重要组件, 用于程序运行中临时存储数据</p><h4 id="连续空间"><a href="#连续空间" class="headerlink" title="连续空间"></a>连续空间</h4><p>数组元素在内存中的存放位置是连续的</p><h3 id="程序的内存分配"><a href="#程序的内存分配" class="headerlink" title="程序的内存分配"></a>程序的内存分配</h3><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>存储可运行的 class 文件, 包含方法, 静态成员, 常量等</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>方法运行时使用的内存,特点是“后进先出”, 即最先进入栈区的方法最后出栈, 比如 main 方法</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>存储 new 出来的数组或者对象</p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>JVM 在调用操作系统功能时使用, 与开发无关</p><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><p>CPU 使用, 与开发无关</p><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>变量 arr 存储的是数组在堆内存中的地址值, 而不是数组元素的值, 变量 arr 通过内存地址引用堆内存中的数组, 所以数组是引用类型</p><h3 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h3><p>final: “最终”的意思; 在 Java 中是一个关键字, 可以用来修饰类, 成员变量, 成员方法<br>1、修饰的类: 不能被继承(没有子类), 但是可以继承其他类<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/java-base/2.png" alt="demo''" title>                </div>                <div class="image-caption">demo''</div>            </figure><br>2、修饰的方法: 不能被重写(和 abstract 冲突, 因为 abstract 修饰的类是抽象类, 要求必须重写), System, String 这些关键字其实就是被 final 修饰的, 所以不能重写<br>3、修饰的变量: 是一个常量, 值只能设置一次; 如果修饰的是一个引用的地址, 那么地址不能改动而属性可以改</p><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><p>用于修饰类的成员, 被修饰的成员变量 = 类变量, 被修饰的成员方法 = 类方法; 然后可以直接类名.xxx 直接调用, 所以通常随意改变 static 修饰的类成员变量或者类方法是有风险的, 所以可以使用 final 关键字对其进行修饰, 使之成为一个不可修改的常量;</p><h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><p>用于描述类具有什么功能, 但是不给出具体实现, 类要遵从接口描述的统一规则进行定义, 所以, 接口是对外提供的一组规则、标准</p><blockquote><p>举例: 插座(接口) =&gt; 插头(具体实现根据插座是几个孔的规则)</p></blockquote><h4 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h4><p>定义接口关键字 interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>类和接口是实现关系, 用 implements 表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>⚠️ 在声明接口的时候成员方法如果不写方法体, 会默认加上 public abstract</p><p>demo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Working</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;  <span class="comment">// 没写方法体. 默认会加上public abstract</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正常来说是这样的</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时接口中有抽象方法, 在 work 的实现类就要实现这个抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Work</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"努力工作"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️ 还需要注意的点是, 接口不能实例化,但是可以实例化实现的子类, 这种写法也叫多态</p><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>接口中没有成员变量, 只有公有的, 静态的常量; 原因是接口中所有的变量都默认有一组修饰符, 这是系统默认写的, 如果你写了系统就不写, 如果你不写系统就默认写上, 而 final 的作用可以看上面部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 常量名 = 常量值</span><br></pre></td></tr></table></figure><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><p>JDK7 以前, 接口中只有公有的抽象方法, 因为接口中的方法系统都会默认加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回类型 方法名()</span><br></pre></td></tr></table></figure><p>JDK8 以后, 可以拥有默认方法和静态方法;<br>默认方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回类型 方法名 () &#123;&#125;</span><br></pre></td></tr></table></figure><p>静态方法:<br>直接写就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> 返回类型 方法名() &#123;&#125;</span><br></pre></td></tr></table></figure><p>JDK9 以后, 可以有私有方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> 返回类型 方法名 () &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="接口中构造方法"><a href="#接口中构造方法" class="headerlink" title="接口中构造方法"></a>接口中构造方法</h4><p>由于接口不能实例化, 也没有需要初始化的成员变量. 所以接口没有构造方法;</p><h3 id="Java-中的-API"><a href="#Java-中的-API" class="headerlink" title="Java 中的 API"></a>Java 中的 API</h3><h4 id="java-中组件的层次结构"><a href="#java-中组件的层次结构" class="headerlink" title="java 中组件的层次结构"></a>java 中组件的层次结构</h4><p>模块(module) =&gt; 包(package) =&gt; 类或接口(class / interface)<br>模块: 在包的基础上又进行了一层封装, 是包的容器</p><h4 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h4><p>类层次结构最顶层的基类, 所有类都直接或间接的继承自 Object 类, 所以, 所有的类都是一个 Object(对象), 继承自 java.base;</p><h4 id="常用到的类"><a href="#常用到的类" class="headerlink" title="常用到的类"></a>常用到的类</h4><p>Object, Scanner, String, StringBuilder, StringBuffer, Date, Calendar</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h4><p>简称集, 是用来存储多个元素的容器</p><h4 id="集合和数组的区别"><a href="#集合和数组的区别" class="headerlink" title="集合和数组的区别"></a>集合和数组的区别</h4><ul><li>元素类型<br>集合: 存储引用类型数据(存储基本类型时自动装箱)<br>数组: 可以存储基本类型和引用类型的数据</li><li>元素个数<br>集合: 元素个数不固定, 可任意扩容<br>数组: 固定, 不能改变容量</li><li>集合的好处<br>可以不受容器大小限制(写 js 爽的同学用起来也爽), 可以随时添加, 删除元素, 提供了大量操作元素的方法(判断,获取等等, 类似: StringBuilder 和 StringBuffer)</li></ul><h4 id="集合体系"><a href="#集合体系" class="headerlink" title="集合体系"></a>集合体系</h4><h5 id="单例集合-Collection"><a href="#单例集合-Collection" class="headerlink" title="单例集合(Collection)"></a>单例集合(Collection)</h5><ul><li>List: ArrayList<br>可重复, 有序(存取顺序相同)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">// 增加元素</span></span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">    System.out.print(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Set: HashSet<br>不可重复, 无序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Student&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br></pre></td></tr></table></figure><p>写一个 demo, 首先声明一个学生累<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/java-base/3.png" alt="Class Student" title>                </div>                <div class="image-caption">Class Student</div>            </figure><br>然后声明 5 个学生, 用 set 去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;Student&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"唐三"</span>, <span class="number">15</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"戴沐白"</span>, <span class="number">16</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"马红俊"</span>, <span class="number">17</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">"戴沐白"</span>, <span class="number">16</span>);</span><br><span class="line">        Student s5 = <span class="keyword">new</span> Student(<span class="string">"马红俊"</span>, <span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        set.add(s1);</span><br><span class="line">        set.add(s2);</span><br><span class="line">        set.add(s3);</span><br><span class="line">        set.add(s4);</span><br><span class="line">        set.add(s5);</span><br><span class="line"></span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="为什么用了-Set-没有去重"><a href="#为什么用了-Set-没有去重" class="headerlink" title="为什么用了 Set 没有去重?"></a>为什么用了 Set 没有去重?</h6><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/java-base/4.png" alt="你会发现无序了," title="但是还没有去重''">                </div>                <div class="image-caption">但是还没有去重''</div>            </figure><p>实际上已经去重完成了, 因为 Set 集合保证元素的唯一性依赖 equals()和 hashCode()两个方法, 我们没有在 student 中重写这两个方法, 默认就会使用 Object 类中的 equals(), Object 类下的 equals()方法默认比较的是内存地址, 5 个 studen 都是 new 出来的, 所以指向的内存地址不一样(这个去掉 toString 方法就可以打出来了)<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/java-base/5.png" alt="toString方法注释掉之后打印每个student指向内存地址''" title>                </div>                <div class="image-caption">toString方法注释掉之后打印每个student指向内存地址''</div>            </figure></p><ul><li>解决方案: 在 Student 类中重写 equals()和 hashCode</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Student student = (Student) o;</span><br><span class="line">    <span class="keyword">return</span> age == student.age &amp;&amp;</span><br><span class="line">            Objects.equals(name, student.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候再打印就是去重之后的了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set集合： [Student&#123;name=<span class="string">'戴沐白'</span>, age=<span class="number">16</span>&#125;, Student&#123;name=<span class="string">'马红俊'</span>, age=<span class="number">17</span>&#125;, Student&#123;name=<span class="string">'唐三'</span>, age=<span class="number">15</span>&#125;]</span><br></pre></td></tr></table></figure><h5 id="双例集合-Map-key-value"><a href="#双例集合-Map-key-value" class="headerlink" title="双例集合(Map: key, value)"></a>双例集合(Map: key, value)</h5><ul><li>Map: HashMap<br>双例集合, 元素由键值对构成, key 不可重复, value 可以重复</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;T1, T2&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>写一个 demo, 还是用上面的 Student 类创建学生<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/java-base/6.png" alt="map" title="demo''">                </div>                <div class="image-caption">demo''</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/java-base/7.png" alt="如果key值重复," title="则key对应最后一次赋值的value''">                </div>                <div class="image-caption">则key对应最后一次赋值的value''</div>            </figure><br>⚠️ 双例集合无法直接遍历, 只能先获取所有 key 的集合(keySet), 再根据 key 遍历出 value (迭代器,增强 for )<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/java-base/8.png" alt="遍历map''" title>                </div>                <div class="image-caption">遍历map''</div>            </figure></p><h5 id="增强-for-循环"><a href="#增强-for-循环" class="headerlink" title="增强 for 循环"></a>增强 for 循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object obj:list) &#123;</span><br><span class="line">  Integer ii = (Integer)obj;</span><br><span class="line">  System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️ 增强 for 循环的底层依赖的是迭代器(Iterator), 可以理解成增强 for 就是迭代器的简写形式</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h4 id="为什么需要迭代器"><a href="#为什么需要迭代器" class="headerlink" title="为什么需要迭代器?"></a>为什么需要迭代器?</h4><p>对过程的重复, 称为迭代. 迭代器是遍历 Collection(单例子)集合的通用方式, 可以在对集合遍历的同时进行添加, 删除等操作.</p><h4 id="迭代器的常用方法"><a href="#迭代器的常用方法" class="headerlink" title="迭代器的常用方法"></a>迭代器的常用方法</h4><ul><li>next(): 返回迭代的下一个元素对象</li><li>hasNext(): 如果仍有下一个元素, 返回 true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator it = list.iterator()</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">  String s = (String)it.next();</span><br><span class="line">  System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>即泛指任意类型, 又叫参数化类型, 对具体类型的使用起到辅助作用, 类似于方法的参数</p><h4 id="集合类型的解释"><a href="#集合类型的解释" class="headerlink" title="集合类型的解释"></a>集合类型的解释</h4><p>表示该集合中存放指定类型的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>好处: 类型安全, 避免了类型转化</p><h3 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h3><p>针对集合进行操作的工具类<br>成员方法:</p><ul><li>sort(List<t>)<br>根据元素的自然顺序, 将指定列表按升序排序</t></li><li>max(Collection<t>)<br>返回集合的最大元素</t></li><li>reverse(List<t>)<br>反转 List 集合元素</t></li><li><p>shuffle(List<t>)<br>使用默认的随机源随机置换指定的列表, 也就是可以将数组进行随机排列</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">      list.add(<span class="number">1</span>);</span><br><span class="line">      list.add(<span class="number">2</span>);</span><br><span class="line">      list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">      Collections.sort(list);</span><br><span class="line">      System.out.println(list);  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">      System.out.println(Collections.max(list));</span><br><span class="line"></span><br><span class="line">      Collections.reverse(list);</span><br><span class="line">      System.out.println(list);</span><br><span class="line"></span><br><span class="line">      Collections.shuffle(list);</span><br><span class="line">      System.out.println(list);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// [3, 2, 1]</span></span><br><span class="line"><span class="comment">// [3, 1, 2]</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; 还有更多的方法, 在 java.utils 下面可以找到</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### java 中的异常, 顶层父类(Throwable)</span><br><span class="line">- 子类 (Error 报错)</span><br><span class="line">- 子类 (Exception 异常)</span><br><span class="line">处理方式</span><br><span class="line">- 方式一, 捕获, 自己处理</span><br><span class="line">```java</span><br><span class="line">try&#123;</span><br><span class="line">  // TODOS...</span><br><span class="line">&#125; catch(Exception e) &#123;</span><br><span class="line">  // TODOS...</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  // 写在这里的代码正常情况下一定会执行, 一般是用来释放资源</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方式二, throw new Error(…)</li><li>JVM 的默认处理方式: 在控制台打印异常信息, 并终止程序;</li></ul><h3 id="什么是-IO-流"><a href="#什么是-IO-流" class="headerlink" title="什么是 IO 流"></a>什么是 IO 流</h3><p>I/O, 即输入输出, IO 流指的是数据像连绵的流体一样进行传输</p><h3 id="IO-流能做什么"><a href="#IO-流能做什么" class="headerlink" title="IO 流能做什么"></a>IO 流能做什么</h3><p>在本地磁盘和网络上操作数据</p><h3 id="IO-流的分类"><a href="#IO-流的分类" class="headerlink" title="IO 流的分类"></a>IO 流的分类</h3><ul><li>按数据流向(输入流, 输出流)</li><li>按操作方式<br>1、字节流</li><li>InputStream: 字节输入流顶层抽象类(FileInputStream(普通的字节输入流), BufferedInputStream(高效字节输入流))</li><li>OutputStream: 字节输出流顶层抽象类(FileOutputStream(普通字节输出流), BufferOutputStream(高效字节输出流))<br>2、字符流</li><li>Reader: 字符输入流的顶层抽象类(FileReader(普通字符输入流, BufferedReader(高效字符输入流, 也叫字符缓冲输入流)))</li><li><p>Writer: 字符输出流的顶层抽象类(FileWrite(普通字符输出流), BufferedWriter(高效字符输出流, 也叫字符缓冲输出流))</p><blockquote><p>File 类</p></blockquote></li></ul><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射?"></a>什么是反射?</h4><p>在程序运行过程中分析类的一种能力</p><h4 id="反射能做什么"><a href="#反射能做什么" class="headerlink" title="反射能做什么?"></a>反射能做什么?</h4><ul><li>分析类<br>1、加载并初始化一个类<br>2、查看类的所有属性和方法</li><li>查看并使用对象<br>1、查看一个对象的所有属性和方法<br>2、使用对象的任意属性和方法<blockquote><p>反射的引用场景: 构建通用的工具</p></blockquote></li></ul><p>demo: 通过反射的方式创建: Student 类型的对象<br>创建一个 Student 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span> <span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student1</span> <span class="params">(String name)</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student1</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个 ConstructorDemos</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Hardy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2/28/21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorDemos</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、 获取Student类的字节码文件</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.study.demos.stringDemos.Student1"</span>);</span><br><span class="line">        <span class="comment">// 2、根据获取到的字节码文件对象，获取指定的构造器对象</span></span><br><span class="line">        <span class="comment">// 2。1 获取公共的无参构造</span></span><br><span class="line">        Constructor con1 = clazz.getConstructor();  <span class="comment">// 没有参数直接写就好了， 因为有异常， 可以直接抛出， NoSuchMethodException（可能瞎传了参数就会报错）</span></span><br><span class="line">        <span class="comment">// 2.2 获取公共的带参构造</span></span><br><span class="line">        Constructor con2 = clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 2.3 获取私有的带参构造</span></span><br><span class="line">        <span class="comment">//  Constructor con3 = clazz.getConstructor(int.class);</span></span><br><span class="line">        <span class="comment">// 会报错， Exception in thread "main" java.lang.NoSuchMethodException: com.study.demos.stringDemos.Student1.&lt;init&gt;(int)， 因为getConstructor只能获取公共的构造</span></span><br><span class="line">        <span class="comment">// 2.4 所以要用获取私有构造函数的方法</span></span><br><span class="line">        Constructor con3 = clazz.getDeclaredConstructor(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(con1);</span><br><span class="line">        System.out.println(con2);</span><br><span class="line">        System.out.println(con3);  <span class="comment">// 这个会报错，</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出:</span></span><br><span class="line">        <span class="comment">// public com.study.demos.stringDemos.Student1()</span></span><br><span class="line">        <span class="comment">// public com.study.demos.stringDemos.Student1(java.lang.String)</span></span><br><span class="line">        <span class="comment">// private com.study.demos.stringDemos.Student1(int)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个新的学生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Student1 stu = (Student1) con2.newInstance(<span class="string">"Hardy"</span>);</span><br><span class="line">System.out.println(con2.getName());</span><br><span class="line">System.out.println(stu);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// com.study.demos.stringDemos.Student1</span></span><br><span class="line"><span class="comment">// com.study.demos.stringDemos.Student1@6e0be858</span></span><br></pre></td></tr></table></figure><h4 id="调用类成员的方法"><a href="#调用类成员的方法" class="headerlink" title="调用类成员的方法"></a>调用类成员的方法</h4><p>给学生类增加两个公共方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"调用了空参方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span> <span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"调用了带参方法： "</span> + arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodPri1</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"调用了空参私有方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodPri2</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = a+b;</span><br><span class="line">    System.out.println(<span class="string">"调用了私有的带参方法"</span>+a+<span class="string">"+"</span>+b+<span class="string">"="</span>+ count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 demo 中去调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射的构造创建一个学生类</span></span><br><span class="line">Student1 stu = (Student1) con2.newInstance(<span class="string">"Hardy"</span>);</span><br><span class="line"><span class="comment">// 1、声明公共方法</span></span><br><span class="line">Method method1 = clazz.getMethod(<span class="string">"method1"</span>);</span><br><span class="line">Method method2 = clazz.getMethod(<span class="string">"method2"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、声明私有方法</span></span><br><span class="line">Method methodPri1 = clazz.getDeclaredMethod(<span class="string">"methodPri1"</span>);</span><br><span class="line">Method methodPri2 = clazz.getDeclaredMethod(<span class="string">"methodPri2"</span>, <span class="keyword">int</span><span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、调用公共方法</span></span><br><span class="line">method1.invoke(stu);</span><br><span class="line">method2.invoke(stu, <span class="string">"hardy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、调用私有方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 到这你以为可以像上面一样直接跑就可以跑出来了吗， 其实事实上会报错</span></span><br><span class="line"><span class="comment">// 报错信息： Exception in thread "main" java.lang.IllegalAccessException: Class com.study.demos.stringDemos.ConstructorDemos can not access a member of class com.study.demos.stringDemos.Student1 with modifiers "private"</span></span><br><span class="line"><span class="comment">//at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)</span></span><br><span class="line"><span class="comment">// 因为是私有方法， 所以在调用方法之前需要开启暴力反射, 也就是setAccessible（）  true开启， false关闭</span></span><br><span class="line">methodPri1.setAccessible(<span class="keyword">true</span>); <span class="comment">// 开启暴力反射</span></span><br><span class="line">methodPri1.invoke(stu);</span><br><span class="line">methodPri2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">methodPri2.invoke(stu, <span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 调用了空参方法</span></span><br><span class="line"><span class="comment">// 调用了带参方法： hardy</span></span><br><span class="line"><span class="comment">// 调用了空参私有方法</span></span><br><span class="line"><span class="comment">// 调用了私有的带参方法1+2=3</span></span><br></pre></td></tr></table></figure><p>获取完单个方法之后, 来批量获取一下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = clazz.getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method: methods) &#123;</span><br><span class="line">    System.out.println(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void com.study.demos.stringDemos.Student1.method1()</span><br><span class="line">public void com.study.demos.stringDemos.Student1.method2(java.lang.String)</span><br><span class="line">public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class="line">public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class="line">public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class="line">public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class="line">public java.lang.String java.lang.Object.toString()</span><br><span class="line">public native int java.lang.Object.hashCode()</span><br><span class="line">public final native java.lang.Class java.lang.Object.getClass()</span><br><span class="line">public final native void java.lang.Object.notify()</span><br><span class="line">public final native void java.lang.Object.notifyAll()</span><br></pre></td></tr></table></figure><p>因为所有的类都直接或者间接继承于 Object, 所以会将 Object 上的一些方法也获取到了, 如果只需要获取 Student 下的方法, 用 getDeclearMethods</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method: methods) &#123;</span><br><span class="line">    System.out.println(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void com.study.demos.stringDemos.Student1.methodPri2(i nt,int)</span><br><span class="line">public void com.study.demos.stringDemos.Student1.method2(java.lang.String)</span><br><span class="line">private void com.study.demos.stringDemos.Student1.methodPri1()</span><br><span class="line">public void com.study.demos.stringDemos.Student1.method1()</span><br></pre></td></tr></table></figure><blockquote><p>获取成员变量是 Field, Fileds</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习了一波 java&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=478507889&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="localStorage" scheme="http://yoursite.com/tags/localStorage/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="Set" scheme="http://yoursite.com/tags/Set/"/>
    
      <category term="集合" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>vite秒开揭秘</title>
    <link href="http://yoursite.com/2020/07/19/vite%E7%A7%92%E5%BC%80%E6%8F%AD%E7%A7%98/"/>
    <id>http://yoursite.com/2020/07/19/vite秒开揭秘/</id>
    <published>2020-07-18T20:03:48.000Z</published>
    <updated>2020-07-18T20:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>尤雨溪直播介绍vue3的时候，说到了他正在做的一个新东西，名叫vite。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1453143575&auto=0&height=66"></iframe><br><a id="more"></a></p><p>已经有几个月没有写博客了，疫情期间沉迷游戏，虽然也不忘记学习但还是多少有些罪恶感，接下来应该会恢复之前的状态，跑步，学习，看书。</p><p>开武魂，直入主题。。。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vite/0.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="vite是什么"><a href="#vite是什么" class="headerlink" title="vite是什么"></a>vite是什么</h2><p>vite: 一个基于 Vue3 单文件组件的非打包开发服务器</p><p>作者在直播中是这么说的：“Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢。针对生产环境则可以把同一份代码用 rollup 打包。虽然现在还比较粗糙，但这个方向我觉得是有潜力的，做得好可以彻底解决改一行代码等半天热更新的问题。“<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vite/01.jpg" alt="vue3 beta直播" title>                </div>                <div class="image-caption">vue3 beta直播</div>            </figure><br>优点就是：<br><br>Lightning fast cold server start<br><br>Instant hot module replacement (HMR)<br><br>True on-demand compilation<br><br>请阅读并背诵文档<a href="https://github.com/vitejs/vite" target="_blank" rel="noopener">https://github.com/vitejs/vite</a></p><h2 id="如何使用vite"><a href="#如何使用vite" class="headerlink" title="如何使用vite"></a>如何使用vite</h2><p>1、全局安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install create-vite-app -g</span><br></pre></td></tr></table></figure></p><p>2、创建vite项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create-vite-app demo  |  npm init vite demo(非全局)</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>3、运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev (生产环境基于Rollup)</span><br></pre></td></tr></table></figure></p><p>一个vite项目就建好了，默认跑在3000端口<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vite/1.png" alt 运行效果"" title>                </div>                <div class="image-caption">"运行效果"</div>            </figure></p><h2 id="简单解释一波"><a href="#简单解释一波" class="headerlink" title="简单解释一波"></a>简单解释一波</h2><p>在命令行可以看到这么一句话<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vite/2.png" alt 优化依赖"" title>                </div>                <div class="image-caption">"优化依赖"</div>            </figure><br>它会在node_modules下生成一个目录叫.vite_opt_cache，这个文件是做优化用的，第一次运行的时候编译的会有点慢，然后在后面再npm run dev的时候就是毫秒级的（通常玩vue的时候每次npm run dev或者npm run serve的时候都需要进行compiler，将vue等原文件进行编译，然后等compiler进度到100%才跑起来）；vite项目也支持热更， 原因是它不需要compiler，而是将vue文件直接加载，（可以看到在vite项目跑起来的时候的network），然后在后端去处理，也就是一层本地服务，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vite/4.png" alt network"" title>                </div>                <div class="image-caption">"network"</div>            </figure><br>尝试写一个点击增加的demo<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;count：&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button @click="handleClick"&gt;add&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import &#123;reactive, toRefs&#125; from 'vue';</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'App',</span></span><br><span class="line"><span class="regexp">  setup()&#123;</span></span><br><span class="line"><span class="regexp">    const state = reactive(&#123;count:0&#125;)</span></span><br><span class="line"><span class="regexp">    const handleClick = () =&gt; &#123; state.count++ &#125;    </span></span><br><span class="line"><span class="regexp">    return &#123; ...toRefs(state), handleClick &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>这时候刷新一下然后查看network发现import {reactive, toRefs} from ‘vue’变成了import {reactive, toRefs} from ‘@modules/vue.js’，但是其他import的资源并没有变，而它将我们写的代码变成一个对象，然后再导出，说明vue文件在后端被解析了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vite/5.png" alt main.js"" title>                </div>                <div class="image-caption">"main.js"</div>            </figure><br>将写的demo代码变成了一个对象<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vite/5.1.png" alt 写的demo"" title>                </div>                <div class="image-caption">"写的demo"</div>            </figure><br>再看看index.html里面对于js的引入<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vite/6.png" alt="network''" title>                </div>                <div class="image-caption">network''</div>            </figure><br>它是直接引入的main.js文件而且type是module，也就是以es module的方式进行引入，采用了原生es6的模块，而es module每次进行import的时候都会默认发送一个请求，这时候再通过node服务去做资源处理然后直接返回，所以项目整体没有看到需要配置webpack的地方，也实现了免编译。</p><h2 id="为什么import的vue资源变成了-modules"><a href="#为什么import的vue资源变成了-modules" class="headerlink" title="为什么import的vue资源变成了/@modules?"></a>为什么import的vue资源变成了/@modules?</h2><p>因为服务一启动，就会加载main.js，而main.js又import了vue,浏览器不支持这种方式，会报这样的错误<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">TypeError</span>: Failed to resolve <span class="built_in">module</span> specifier <span class="string">"vue"</span>. Relative references must start <span class="keyword">with</span> either <span class="string">"/"</span>, <span class="string">"./"</span>, or <span class="string">"../"</span>.</span><br></pre></td></tr></table></figure></p><p>为了在加载资源的时候不会报错，所以需要加上/@modules前缀（也可以加上/@abc或者/@xiaofangkuai或者/@hardy等）进行模块重写</p><h2 id="为什么-modules之后资源就可用了？"><a href="#为什么-modules之后资源就可用了？" class="headerlink" title="为什么/@modules之后资源就可用了？"></a>为什么/@modules之后资源就可用了？</h2><p>因为在vite运行之后，node服务会根据静态服务执行的目录去获取.js文件也就是main.js进行重写，再将重写后的内容返回，可以在vite源码的node部分看到这一段<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vite/8.jpg" alt="rewrite''" title>                </div>                <div class="image-caption">rewrite''</div>            </figure><br>返回的重写内容里面如果有import xx from ‘/@modules/aaa’，则会继续发一个aaa的请求，所以重写之后会对带有@modules前缀（加载第三方模块）的请求进行处理，也就是根据前缀去node_modules里头读取对应的真实的资源（运行时）然后把读取出来的结果以.js的类型返回</p><p>另外附上一个比较简单版的vite，可以直接拖下来看，它在这里<a href="https://github.com/HHardyy/vite-demo" target="_blank" rel="noopener">‘https://github.com/HHardyy/vite-demo’</a></p><p>这一波通宵我感觉我的青春又回来了~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尤雨溪直播介绍vue3的时候，说到了他正在做的一个新东西，名叫vite。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1453143575&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="vite" scheme="http://yoursite.com/tags/vite/"/>
    
      <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>React hooks</title>
    <link href="http://yoursite.com/2020/03/14/React-hooks/"/>
    <id>http://yoursite.com/2020/03/14/React-hooks/</id>
    <published>2020-03-14T12:49:41.000Z</published>
    <updated>2020-03-14T18:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>react hooks</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1424537185&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="什么是React-Hooks"><a href="#什么是React-Hooks" class="headerlink" title="什么是React Hooks"></a>什么是React Hooks</h3><blockquote><p>React Hooks是React 16.7.0-alpha版本推出的新特性，是继 <a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">render-props</a> 和 <a href="https://reactjs.org/docs/higher-order-components.html" target="_blank" rel="noopener">higher-order components</a>之后的第三种状态共享方案，不会产生JSX嵌套地狱问题。这个状态指的是状态逻辑，所以称为状态逻辑复用会更恰当，因为只共享数据处理逻辑，不会共享数据本身。</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1、多个状态不会产生嵌套，写法还是平铺的（renderProps 可以通过 compose 解决，可不但使用略为繁琐，而且因为强制封装一个新对象而增加了实体数量）。<br>2、Hooks 可以引用其他 Hooks。<br>3、更容易将组件的 UI 与状态分离。</p><p>Hook 函数必须以 “use” 命名开头，因为这样才方便 eslint 做检查，防止用 condition 判断包裹 useHook 语句。</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>useState的用法是，需要传入一个状态的默认值，然后函数执行之后会返回两个值，一个是状态值，一个是操作状态值的方法，例如这样：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-hooks/useState.jpg" alt="useState" title>                </div>                <div class="image-caption">useState</div>            </figure><br>但是需要注意useState不能使用在条件判断中，因为useState是顺序执行的关系<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-hooks/ifusestate.jpg" alt="错误用法" title>                </div>                <div class="image-caption">错误用法</div>            </figure></p><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>useEffect用于处理组件中的effect，可以把useEffect Hook视作componentDidMount、componentDidUpdate和componentWillUnmount的组合体。</p><blockquote></blockquote><p>有的时候，我们希望在React更新DOM之后进行一些额外的操作。网络请求、手动更改DOM以及日志记录都是不需要清理的副作用的常见场景。因为运行之后，可以立即被销毁掉。</p><p>useEffect在组件mount时执行，也会在组件更新时执行。因为每次请求数据之后会更新本地的状态，然后组件会更新，useEffect也会再次执行，所以很容易出现无限循环的情况。而我们只想在组件mount时请求数据。</p><p>useEffect有两个参数，第一个参数是执行的function，第二个参数是依赖条件，当依赖变动就执行code，如果是空数组则组件更新之后不会再次执行，而只会在mount之后执行一次。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-hooks/useEffect.jpg" alt="useEffect" title>                </div>                <div class="image-caption">useEffect</div>            </figure></p><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>useMemo主要是用来解决渲染时候的性能问题，在使用Function Component的时候，我们无法使用Class Component的shouldCompnentUpdate这个生命周期，也就是说无法通过组件更新前的条件判断是否需要更新，也不区分mount和update两个状态，也就是每次调用都会执行内部的所有逻辑，会带来非常大的性能损耗。比如父组件的状态更新，子组件的代码都会重新执行一遍， useMemo可以实现和useEffect一样的根据条件判断是否重新执行<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-hooks/useMemo.jpg" alt="useMemo 父子组件传值更新" title>                </div>                <div class="image-caption">useMemo 父子组件传值更新</div>            </figure></p><h3 id="useReducer-amp-amp-useContext"><a href="#useReducer-amp-amp-useContext" class="headerlink" title="useReducer &amp;&amp; useContext"></a>useReducer &amp;&amp; useContext</h3><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><p>可以提供类似Redux的功能，引入useReducer后，useReducer接受一个reducer函数作为参数，reducer和redux的reducer一样接受两个参数一个是state另一个是action。然后返回一个状态count和 dispath，count是返回状态中的值，而dispatch是一个可以发布事件来更新state的。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-hooks/useReducer.jpg" alt="useReducer" title>                </div>                <div class="image-caption">useReducer</div>            </figure></p><h4 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h4><p>Context API是在应用程序中深入传递数据的方法，而无需手动一个一个在多个父子孙之间传递prop。它还可以是Redux这样的工具的一个很好的替代。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-hooks/useContext.jpg" alt="useContext" title>                </div>                <div class="image-caption">useContext</div>            </figure><br>useContext可以实现全局状态，状态全局化并且可以统一管理 （redux的一部分）<br>useReducer可以实现复杂逻辑部分，action相当于Redux中的reducer<br>我们可以使用createContext、useContext和useReducer来实现一个redux，demo在我的github上[<a href="https://github.com/HHardyy/react-hooks-demo]，src目录下的testReduce就是完整demo" target="_blank" rel="noopener">https://github.com/HHardyy/react-hooks-demo]，src目录下的testReduce就是完整demo</a></p><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><p>玩过react的人都知道ref，它可以用来获取组件实例对象或者是dom对象，而useRef可以用来保存dom，保存事件程序，存储以前的值<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-hooks/useRef.jpg" alt="useRef" title>                </div>                <div class="image-caption">useRef</div>            </figure></p><h3 id="自定义hooks"><a href="#自定义hooks" class="headerlink" title="自定义hooks"></a>自定义hooks</h3><p>自定义Hooks可以让你把组件逻辑抽到可复用的方法里。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-hooks/useSelf.jpg" alt="useSelf" title>                </div>                <div class="image-caption">useSelf</div>            </figure></p><p>连续几晚4点睡觉。。。有点晕，先写这么点，后面有时间再细化，用应该是够用了。</p><p>本章demo地址<a href="https://github.com/HHardyy/react-hooks-demo" target="_blank" rel="noopener">https://github.com/HHardyy/react-hooks-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;react hooks&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1424537185&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="hooks" scheme="http://yoursite.com/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>简单了解前端大文件分片</title>
    <link href="http://yoursite.com/2020/02/04/%E5%89%8D%E7%AB%AF%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87/"/>
    <id>http://yoursite.com/2020/02/04/前端大文件分片/</id>
    <published>2020-02-04T04:03:07.000Z</published>
    <updated>2020-02-04T10:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>假设要把项目做成微服务架构，然后单独做个静态资源服务器。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1384379256&auto=0&height=66"></iframe><br><a id="more"></a></p><p>假如项目要做成微服务架构，像我最近做的一个国际项目，里头的日志，静态资源等需要抽离成独立的服务。。。巴拉巴拉省略一万字。</p><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>假如把静态资源单独做成一个微服务， 可以选择搭建一个HDFS 。。。具体步骤（省略很多字）</p><h4 id="文件服务hdfs"><a href="#文件服务hdfs" class="headerlink" title="文件服务hdfs"></a>文件服务hdfs</h4><p>HDFS（Hadoop Distributed File System），作为Google File System（GFS）的实现，是Hadoop项目的核心子项目，是分布式计算中数据存储管理的基础，是基于流数据模式访问和处理超大文件的需求而开发的，可以运行于廉价的商用服务器上。它所具有的高容错、高可靠性、高可扩展性、高获得性、高吞吐率等特征为海量数据提供了不怕故障的存储，为超大数据集（Large Data Set）的应用处理带来了很多便利。</p><h5 id="适用、不适用的场景"><a href="#适用、不适用的场景" class="headerlink" title="适用、不适用的场景"></a>适用、不适用的场景</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">高容错性、可构建在廉价机器上</span><br><span class="line">适合批处理</span><br><span class="line">适合大数据处理</span><br><span class="line">流式文件访问</span><br></pre></td></tr></table></figure><h5 id="HDFS局限"><a href="#HDFS局限" class="headerlink" title="HDFS局限"></a>HDFS局限</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不支持低延迟访问</span><br><span class="line">不适合小文件存储</span><br><span class="line">不支持并发写入</span><br><span class="line">不支持修改</span><br></pre></td></tr></table></figure><h3 id="为什么要将文件分片"><a href="#为什么要将文件分片" class="headerlink" title="为什么要将文件分片"></a>为什么要将文件分片</h3><p>1、为了充分利用网络带宽，加快上传速度<br>2、避免断网，页面关闭等引起的文件上传失败导致文件丢失，需要重新上传</p><h3 id="分片上传原理"><a href="#分片上传原理" class="headerlink" title="分片上传原理"></a>分片上传原理</h3><p>将一个文件切割为一系列特定大小的小数据片，然后将这些小数据片分别上传到服务端，全部上传完后再由服务端将这些小数据片合并成为一个完整的资源。在上传的过程中即使遭受一些不确定因素影响导致上传中断，在恢复之后将继续该文件上次上传的进度继续上传，也就是断点续传。</p><p>举个栗子：<br>直接上传<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">传一个100M的文件，开始上传...0%..2%...99%...(断网) =&gt; 上传失败</span><br><span class="line">然后再传一次，开始上传...0%..2%...99%...(某些原因造成页面关闭) =&gt; 上传失败</span><br><span class="line">重新上传一次，开始上传...0%...</span><br></pre></td></tr></table></figure></p><p>分片<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100M的文件，每个数据片大小5M，分20片上传</span><br><span class="line">开始上传...第一片...第二片...（断网）...第三片...(页面关闭)...第四片...（传完20片重组成文件）上传成功</span><br></pre></td></tr></table></figure></p><p>后端：实现分片上传的前提是需要服务器记录某文件的上传进度，根据该文件的唯一标识判读是否是同一个文件，可以利用文件内容根据（修改时间+文件名称+最后修改时间）求MD5码，如果上传的文件过大，求MD5码也是个稍微漫长的过程，所以对于太大的文件，只能针对其中某一段数据进行MD5，加上其他的鉴权得到唯一的key。</p><p>前端：将文件按照按照一定大小进行分片，一般每片大小在5M左右，可以同时发起多个请求，但一次同时请求的连接数不宜过多，否则服务器负载过重。可以利用H5强大的File Api，通过File对象的slice方法切出文件的一部分，切出的数据片是Blob。</p><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><p>1、选择文件<br>2、根据（修改时间+文件名称+最后修改时间）计算MD5，以此来实现断点续传及秒传的功能，所以要等MD5计算完毕之后，再开始文件上传的操作。</p><blockquote><p>可以在这里做文件效验进度</p></blockquote><p>3、通过文件的MD5查询文件是否已经存在<br>4、检查并上传MD5</p><blockquote><p>可以在这里做文件上传进度</p></blockquote><p>5、上传完所有分片之后通知服务器进行合并 </p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>实现分片上传的方式有很多种:<br>百度的分片上传组件：<a href="http://fex.baidu.com/webuploader/" target="_blank" rel="noopener">WebUploader</a><br>vue-simple-uploader: vue-simple-uploader是基于 simple-uploader.js 封装的vue上传插件。使用之前瞄一眼<a href="https://github.com/simple-uploader/vue-uploader/blob/master/README_zh-CN.md" target="_blank" rel="noopener">vue-simple-uploader官方文档</a>， <a href="https://github.com/simple-uploader/Uploader/blob/develop/README_zh-CN.md" target="_blank" rel="noopener">simple-uploader.js官方文档</a>…以及其他的花里胡哨</p><h3 id="使用vue-simple-uploader"><a href="#使用vue-simple-uploader" class="headerlink" title="使用vue-simple-uploader"></a>使用vue-simple-uploader</h3><p>vue-simple-uploader的使用方法很简单,基本上就是配置参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-simple-uploader</span><br></pre></td></tr></table></figure></p><p>main.js或者其他导入的地方<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vueSimpleUploader <span class="keyword">from</span> <span class="string">'vue-simple-uploader'</span>;</span><br><span class="line">Vue.use(vueSimpleUploader);</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><p>专门写个.vue文件来装它，叫upload-vue-simple-uploader.vue<br>template部分<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uploader</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">"options"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:file-status-text</span>=<span class="string">"statusText"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">file-complete</span>=<span class="string">"fileComplete"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">complete</span>=<span class="string">"complete"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"uploader-example"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uploader-unsupport</span>&gt;</span><span class="tag">&lt;/<span class="name">uploader-unsupport</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uploader-drop</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>请将文件拖拽到这里，或者<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">uploader-btn</span>&gt;</span>请选择文件<span class="tag">&lt;/<span class="name">uploader-btn</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">uploader-btn</span> <span class="attr">:attrs</span>=<span class="string">"attrs"</span>&gt;</span>请选择图片<span class="tag">&lt;/<span class="name">uploader-btn</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">uploader-btn</span> <span class="attr">:directory</span>=<span class="string">"true"</span>&gt;</span>请选择目录<span class="tag">&lt;/<span class="name">uploader-btn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">uploader-drop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uploader-list</span>&gt;</span><span class="tag">&lt;/<span class="name">uploader-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">uploader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>js部分，options，attrs,statusText等都是它的配置项，可以翻看它的文档进行配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        target: <span class="string">'http://127.0.0.1:3000/upload'</span>,   <span class="comment">//上传地址</span></span><br><span class="line">        chunkSize: <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>,               <span class="comment">//分片大小</span></span><br><span class="line">        testChunks: <span class="literal">false</span>, <span class="comment">// 是否开启服务器分片校验(秒传)</span></span><br><span class="line">        maxChunkRetries: <span class="number">3</span>,  <span class="comment">//最大自动失败重试上传次数</span></span><br><span class="line">        checkChunkUploadedByResponse: <span class="function"><span class="keyword">function</span> (<span class="params">chunk, message</span>) </span>&#123;<span class="comment">// 服务器分片校验，断点续传基础</span></span><br><span class="line">            <span class="keyword">let</span> objMessage = <span class="built_in">JSON</span>.parse(message);</span><br><span class="line">            <span class="keyword">if</span> (objMessage.skipUpload) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (objMessage.uploaded || []).indexOf(chunk.offset + <span class="number">1</span>) &gt;= <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            Authorization: <span class="string">"Bearer "</span> + <span class="string">"your accessToken"</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        <span class="comment">//接受的文件类型，形如['.png', '.jpg', '.jpeg', '.gif', '.bmp'...]</span></span><br><span class="line">        accept: <span class="string">'image/*'</span>  </span><br><span class="line">      &#125;,</span><br><span class="line">      statusText: &#123;                       <span class="comment">//对应的状态说明</span></span><br><span class="line">        success: <span class="string">'上传成功'</span>,</span><br><span class="line">        error: <span class="string">'上传出错了'</span>,</span><br><span class="line">        uploading: <span class="string">'正在上传'</span>,</span><br><span class="line">        paused: <span class="string">'暂停中'</span>,</span><br><span class="line">        waiting: <span class="string">'等待中'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    complete () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'上传完成 complete'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    fileComplete () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'文件上传完成 complete'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><p>style<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.uploader-example</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">880px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">40px</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.uploader-example</span> <span class="selector-class">.uploader-btn</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.uploader-example</span> <span class="selector-class">.uploader-list</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">440px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用的时候直接import然后在components里头注册然后直接在页面上用，当然这只是方便快捷简单粗暴的demo<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UploadVueSimpleUploader <span class="keyword">from</span> <span class="string">'@/components/upload-vue-simple-uploader'</span></span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/upload/1.png" alt="使用效果" title>                </div>                <div class="image-caption">使用效果</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/upload/2.png" alt="上传一个mp3文件" title>                </div>                <div class="image-caption">上传一个mp3文件</div>            </figure><p>上传一个我比较喜欢的千与千寻《神隐》的10M大小的mp3文件，发现它上传成功了，然后发了两次请求，因为设置的分片大小是5M所以会发两次请求<br>然后此时后端接收到的数据是这个样子的，然后后端再把它重组就成了文件<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/upload/3.png" alt="后端接收到" title>                </div>                <div class="image-caption">后端接收到</div>            </figure></p><h3 id="原生的方式"><a href="#原生的方式" class="headerlink" title="原生的方式"></a>原生的方式</h3><p>原生的方式比上面那个方式稍微复杂一些,但是比较可控,首先是有DOM,当然都是比较随意的布局，好看可以用ElementUI或者自己写写样式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install spark-md5</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">change</span>=<span class="string">"fileChange"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"process-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"style"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>校验进度：&#123;&#123;checkProcessStyle&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"process-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"style1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>上传进度：&#123;&#123;uploadProcessStyle&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> SparkMD5 = <span class="built_in">require</span>(<span class="string">'spark-md5'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      checkProcessStyle: <span class="number">0</span>,</span><br><span class="line">      uploadProcessStyle: <span class="number">0</span>,</span><br><span class="line">      baseUrl: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">      chunkSize: <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">      fileSize: <span class="number">0</span>,</span><br><span class="line">      file: <span class="literal">null</span>,</span><br><span class="line">      hasUploaded: <span class="number">0</span>,</span><br><span class="line">      chunks: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    style () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        width: <span class="keyword">this</span>.checkProcessStyle + <span class="string">'%'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    style1 () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        width: <span class="keyword">this</span>.uploadProcessStyle + <span class="string">'%'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">/* 选择文件 */</span></span><br><span class="line">    fileChange () &#123;</span><br><span class="line">      <span class="keyword">this</span>.file = <span class="keyword">this</span>.$refs.file.files[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.fileSize = <span class="keyword">this</span>.file.size</span><br><span class="line">      <span class="keyword">this</span>.resChange(<span class="keyword">this</span>.file)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> resChange (file) &#123;</span><br><span class="line">      <span class="comment">// 1：按照 修改时间+文件名称+最后修改时间计算MD5</span></span><br><span class="line">      <span class="keyword">let</span> fileMd5Value = <span class="keyword">await</span> <span class="keyword">this</span>.md5File(file)</span><br><span class="line">      <span class="comment">// 2：校验文件的MD5</span></span><br><span class="line">      <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.checkFileMD5(file.name, fileMd5Value)</span><br><span class="line">      <span class="comment">// 如果文件已存在, 就秒传</span></span><br><span class="line">      <span class="keyword">if</span> (result.file) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'文件已存在，秒传'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 显示上传进度</span></span><br><span class="line">      <span class="keyword">this</span>.uploadProcessStyle = <span class="string">'100%'</span></span><br><span class="line">      <span class="comment">// 3：检查并上传MD5</span></span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">this</span>.checkAndUploadChunk(fileMd5Value, result.chunkList)</span><br><span class="line">      <span class="comment">// 4: 通知服务器所有分片已上传完成</span></span><br><span class="line">      <span class="keyword">this</span>.notifyServer(fileMd5Value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/*  1、修改时间 + 文件名称 + 最后修改时间 =&gt; MD5 */</span></span><br><span class="line">    md5File (file) &#123;</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> blobSlice =</span><br><span class="line">          File.prototype.slice ||</span><br><span class="line">          File.prototype.mozSlice ||</span><br><span class="line">          File.prototype.webkitSlice</span><br><span class="line">        <span class="keyword">let</span> currentChunk = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> _spark = <span class="keyword">new</span> SparkMD5.ArrayBuffer()</span><br><span class="line">        <span class="keyword">let</span> _fileReader = <span class="keyword">new</span> FileReader() <span class="comment">// H5强大的File Api</span></span><br><span class="line">        <span class="keyword">let</span> _chunks = <span class="number">100</span></span><br><span class="line">        <span class="keyword">let</span> _chunkSize = file.size / <span class="number">100</span></span><br><span class="line">        _this.chunks = _chunks</span><br><span class="line">        _this.chunkSize = _chunkSize</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 读文件 */</span></span><br><span class="line">        _fileReader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'read chunk nr'</span>, currentChunk + <span class="number">1</span>, <span class="string">'of'</span>, _chunks)</span><br><span class="line">          _spark.append(e.target.result)</span><br><span class="line">          currentChunk++</span><br><span class="line">          <span class="keyword">if</span> (currentChunk &lt; _chunks) &#123;</span><br><span class="line">            loadNext()</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> curr = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'上传完成'</span>)</span><br><span class="line">            <span class="keyword">let</span> result = _spark.end()</span><br><span class="line">            resolve(result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 出错 */</span></span><br><span class="line">        _fileReader.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.warn(<span class="string">'something wrong!!!!'</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadNext</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> start = currentChunk * _chunkSize</span><br><span class="line">          <span class="keyword">let</span> end =</span><br><span class="line">            start + _chunkSize &gt;= file.size ? file.size : start + _chunkSize</span><br><span class="line">          _fileReader.readAsArrayBuffer(blobSlice.call(file, start, end))</span><br><span class="line">          _this.checkProcessStyle = currentChunk + <span class="number">1</span> + <span class="string">'%'</span></span><br><span class="line">        &#125;</span><br><span class="line">        loadNext()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/*  2、校验文件的MD5 */</span></span><br><span class="line">    checkFileMD5 (fileName, fileMd5Value) &#123;</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">`<span class="subst">$&#123;_this.baseUrl&#125;</span>/check/file?fileName=<span class="subst">$&#123;fileName&#125;</span>&amp;fileMd5Value=<span class="subst">$&#123;fileMd5Value&#125;</span>`</span></span><br><span class="line">        _this._$.getJSON(url, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">          resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* 3.1、上传chunk */</span></span><br><span class="line">    <span class="keyword">async</span> checkAndUploadChunk (fileMd5Value, chunkList) &#123;</span><br><span class="line">      <span class="keyword">this</span>.chunks = <span class="built_in">Math</span>.ceil(<span class="keyword">this</span>.fileSize / <span class="keyword">this</span>.chunkSize)</span><br><span class="line">      <span class="keyword">this</span>.hasUploaded = chunkList.length</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.chunks; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> exit = chunkList.indexOf(i + <span class="string">''</span>) &gt; <span class="number">-1</span></span><br><span class="line">        <span class="comment">// 如果已经存在, 则不用再上传当前块</span></span><br><span class="line">        <span class="keyword">if</span> (!exit) &#123;</span><br><span class="line">          <span class="keyword">let</span> index = <span class="keyword">await</span> <span class="keyword">this</span>.upload(i, fileMd5Value, <span class="keyword">this</span>.chunks)</span><br><span class="line">          <span class="keyword">this</span>.hasUploaded = <span class="keyword">this</span>.hasUploaded + <span class="number">1</span></span><br><span class="line">          <span class="keyword">let</span> radio = <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.hasUploaded / <span class="keyword">this</span>.chunks) * <span class="number">100</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(radio, <span class="string">':radio'</span>)</span><br><span class="line">          <span class="keyword">this</span>.uploadProcessStyle = radio + <span class="string">'%'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* 3.2上传chunk2 */</span></span><br><span class="line">    upload (i, fileMd5Value, chunks) &#123;</span><br><span class="line">      <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> end =</span><br><span class="line">          (i + <span class="number">1</span>) * _this.chunkSize &gt;= _this.file.size</span><br><span class="line">            ? _this.file.size</span><br><span class="line">            : (i + <span class="number">1</span>) * _this.chunkSize</span><br><span class="line">        <span class="keyword">let</span> _formData = <span class="keyword">new</span> FormData() <span class="comment">// 构造表单</span></span><br><span class="line">        _formData.append(<span class="string">'data'</span>, _this.file.slice(i * _this.chunkSize, end)) <span class="comment">// 切出文件的一部分</span></span><br><span class="line">        _formData.append(<span class="string">'total'</span>, _this.chunks) <span class="comment">// 总片数</span></span><br><span class="line">        _formData.append(<span class="string">'index'</span>, i) <span class="comment">// 当前是第几片</span></span><br><span class="line">        _formData.append(<span class="string">'fileMd5Value'</span>, fileMd5Value)</span><br><span class="line">        _this._$.ajax(&#123;</span><br><span class="line">          url: <span class="string">`<span class="subst">$&#123;_this.baseUrl&#125;</span>/upload`</span>,</span><br><span class="line">          type: <span class="string">'POST'</span>,</span><br><span class="line">          data: _formData,</span><br><span class="line">          <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">          processData: <span class="literal">false</span>,</span><br><span class="line">          contentType: <span class="literal">false</span>,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            resolve(data.desc)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* 4、通知服务器所有分片上传完成 */</span></span><br><span class="line">    notifyServer (fileMd5Value) &#123;</span><br><span class="line">      <span class="keyword">let</span> url = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.baseUrl&#125;</span>/merge?md5=<span class="subst">$&#123;fileMd5Value&#125;</span>&amp;fileName=<span class="subst">$&#123;<span class="keyword">this</span>.file.name&#125;</span>&amp;size=<span class="subst">$&#123;<span class="keyword">this</span>.file.size&#125;</span>`</span></span><br><span class="line">      <span class="keyword">this</span>._$.getJSON(url, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'上传成功'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>style lang=”stylus”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.process-wrap &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  p &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">  .progress &#123;</span><br><span class="line">    background: #c5c8ce;</span><br><span class="line">    height: 20px;</span><br><span class="line">    position: relative;</span><br><span class="line">    span &#123;</span><br><span class="line">      display: block;</span><br><span class="line">      background: #19be6b;</span><br><span class="line">      height: 100%;</span><br><span class="line">      width: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/HHardyy/vue-upload" target="_blank" rel="noopener">github上的源码地址：https://github.com/HHardyy/vue-upload</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设要把项目做成微服务架构，然后单独做个静态资源服务器。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1384379256&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="分片" scheme="http://yoursite.com/tags/%E5%88%86%E7%89%87/"/>
    
      <category term="静态资源" scheme="http://yoursite.com/tags/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    
      <category term="upload" scheme="http://yoursite.com/tags/upload/"/>
    
      <category term="文件服务" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="HDFS" scheme="http://yoursite.com/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>新型肺炎疫情最新动态和患者同行查询工具</title>
    <link href="http://yoursite.com/2020/01/30/%E5%AE%9E%E6%97%B6%E6%9B%B4%E6%96%B0%EF%BC%9A%E6%96%B0%E5%9E%8B%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85%E6%9C%80%E6%96%B0%E5%8A%A8%E6%80%81/"/>
    <id>http://yoursite.com/2020/01/30/实时更新：新型肺炎疫情最新动态/</id>
    <published>2020-01-30T12:13:02.000Z</published>
    <updated>2020-02-04T04:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>疫情严峻，请您尽量不要聚会，避免出入公共场所<br><a id="more"></a></p><h3 id="实时情况"><a href="#实时情况" class="headerlink" title="实时情况"></a>实时情况</h3><iframe width="100%" height="650px" overflow:hidden frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="true" src="https://news.qq.com/zt2020/page/feiyan.htm"></iframe><h3 id="新型冠状病毒感染的肺炎确诊患者同行程查询工具"><a href="#新型冠状病毒感染的肺炎确诊患者同行程查询工具" class="headerlink" title="新型冠状病毒感染的肺炎确诊患者同行程查询工具"></a>新型冠状病毒感染的肺炎确诊患者同行程查询工具</h3><iframe width="100%" height="650px" overflow:hidden frameborder="no" border="0" marginwidth="0" marginheight="0" allowtransparency="true" src="http://2019ncov.nosugartech.com/"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;疫情严峻，请您尽量不要聚会，避免出入公共场所&lt;br&gt;
    
    </summary>
    
    
      <category term="新型肺炎疫情最新动态" scheme="http://yoursite.com/tags/%E6%96%B0%E5%9E%8B%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85%E6%9C%80%E6%96%B0%E5%8A%A8%E6%80%81/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Stimulsoft in web</title>
    <link href="http://yoursite.com/2020/01/08/%E5%B8%A6%E4%BD%A0%E5%85%A5%E9%97%A8Stimulsoft%E6%8A%A5%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/01/08/带你入门Stimulsoft报表/</id>
    <published>2020-01-07T16:11:47.000Z</published>
    <updated>2020-01-22T06:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发一些web应用或者后台管理系统的时候，可能会遇到做报表的需求，同时支持在线设计。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=426341675&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>Stimulsoft是什么？         为您的应用程序添加高性能报表和分析功能！（Stimulsoft的官网是这么介绍的）</p></blockquote><p>直接上手，我这里是用cli create了一个绿色纯天然无污染的vue demo，当然h5,react,ng以及…所有web应用中的用法应该都是大同小异</p><h3 id="加载资源"><a href="#加载资源" class="headerlink" title="加载资源"></a>加载资源</h3><p>通常来说，我们在web中使用外部资源，或者第三方工具库的时候都要先加载资源，所以先把Stimulsoft需要的资源先引入(这几个类库资源还是比较大，为了避免加载时间可以选择cdn加速，或者按需，或者你希望的姿势进行加载，只要顺序在使用里面对象属性之前即可)<br>这里是直接在public目录下新建的2个资源文件夹<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/stimulsoft/1.png" alt="资源结构" title>                </div>                <div class="image-caption">资源结构</div>            </figure><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- css资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./reportcss/stimulsoft.designer.office2013.whiteblue.css"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./reportcss/stimulsoft.viewer.office2013.whiteblue.css"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./reportjs/stimulsoft.reports.pack.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./reportjs/stimulsoft.reports.maps.pack.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./reportjs/stimulsoft.viewer.pack.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./reportjs/stimulsoft.designer.pack.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>设置key，如果拿到授权之后就可以有key，有了key使用报表就没有默认水印<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stimulsoft.Base.StiLicense.key = <span class="string">'获取授权的key'</span></span><br></pre></td></tr></table></figure></p><p>设置报表的语言，语言包在<a href>这个demo的public文件夹下的localization</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stimulsoft.Base.Localization.StiLocalization.setLocalizationFile(<span class="string">'./localization/zh-CHS.xml'</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><h3 id="viewer配置"><a href="#viewer配置" class="headerlink" title="viewer配置"></a>viewer配置</h3><p>页面上写一个容器，也就是报表的容器,创建完容器之后再写下面的js<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"viewer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>实例化报表的可选项，比如工具栏toobar，工具栏上需要有什么，比如我需要显示设计按钮，可以在这个页面点开设计页<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//实例化报表的可选项</span></span><br><span class="line"> <span class="keyword">const</span> options = <span class="keyword">new</span> Stimulsoft.Viewer.StiViewerOptions()</span><br><span class="line"> <span class="comment">//显示设计按钮，设置false或者不写则隐藏</span></span><br><span class="line"> options.toolbar.showDesignButton = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//demo里面的options配置</span></span><br><span class="line">options.appearance.scrollbarsMode = <span class="literal">false</span></span><br><span class="line">options.toolbar.showDesignButton = <span class="literal">true</span></span><br><span class="line">options.toolbar.printDestination = Stimulsoft.Viewer.StiPrintDestination.Direct</span><br><span class="line">options.appearance.htmlRenderMode = Stimulsoft.Report.Export.StiHtmlExportMode.Table</span><br></pre></td></tr></table></figure></p><p><a href="https://admin.stimulsoft.com/documentation/classreference-js/classes/stimulsoft.viewer.stivieweroptions.html" target="_blank" rel="noopener">关于options的配置说明在这里，根据需要配就好了</a></p><h4 id="使用报表模板"><a href="#使用报表模板" class="headerlink" title="使用报表模板"></a>使用报表模板</h4><blockquote><p>就是打开这个页面的时候，如果想加载已经有的报表模板，直接可以加载进来，因为同样的报表模板可以应用在不同的场景;</p></blockquote><p>实例化一个预览对象viewer，将上面创建的可选项对象options传入预览的报表,然后实例化一个空报表对象，用这个空报表对象去加载引入的报表模板（报表模板实际是一个可以序列化的json对象，但是默认是.mrt文件。所以可以选择loadFile,也可以load，具体取决于你自己的保存格式，后面会介绍如何生成这个模板json，可以直接发给后端帮你保存，我是把它裁剪成json代码段然后保存成一个json文件，每个json文件对应一个模板）<a href="https://admin.stimulsoft.com/documentation/classreference-js/classes/stimulsoft.report.stireport.html" target="_blank" rel="noopener">说明可以看这里</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> viewer = <span class="keyword">new</span> Stimulsoft.Viewer.StiViewer(options, <span class="string">'StiViewer'</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">let</span> report = <span class="keyword">new</span> Stimulsoft.Report.StiReport()</span><br><span class="line">report.load(<span class="string">'json格式的代码'</span>)    <span class="comment">//举例这段json直接从后端接口返回，直接给这里赋值即可</span></span><br></pre></td></tr></table></figure></p><h4 id="加载数据源"><a href="#加载数据源" class="headerlink" title="加载数据源"></a>加载数据源</h4><blockquote><p>加载数据源的目的是为了在设计报表的时候可以通过赋值的数据源拖拽设计想要的报表格式,如果数据源不同，模板上的动态数据将展示不出来;</p></blockquote><p>实例化一个数据源，然后往里面传入数据，数据结构可以根据需要自定义,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">name:<span class="string">'小方块'</span>,</span><br><span class="line">age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> strDataSorce = <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line"><span class="keyword">let</span> dataSet = <span class="keyword">new</span> Stimulsoft.System.Data.DataSet(<span class="string">'hardy'</span>)    <span class="comment">//数据源名称</span></span><br><span class="line">dataSet.readJson(strDataSorce)</span><br></pre></td></tr></table></figure></p><blockquote><p>注册数据源</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">report.regData(<span class="string">'hardy'</span>, <span class="string">'hardy'</span>, dataSet)</span><br></pre></td></tr></table></figure><blockquote><p>刷新数据源字典</p></blockquote><p>刷新之后才能在数据源的菜单看到新数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">report.dictionary.synchronize()  </span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><blockquote><p>创建完毕之后把它渲染到一个dom就好了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">viewer.report = report</span><br><span class="line">viewer.renderHtml(<span class="string">'viewer'</span>)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/stimulsoft/viewer.png" alt="运行效果" title>                </div>                <div class="image-caption">运行效果</div>            </figure><p>viewer上面有很多toobar相对应的事件处理函数，具体<a href="https://admin.stimulsoft.com/documentation/classreference-js/classes/stimulsoft.viewer.stiviewer.html" target="_blank" rel="noopener">可以看这里</a>，然后找到自己需要的。<br>刚才在上面开启了设计按钮，那么点击设计按钮的时候会触发viewer上面的onDesignReport方法，如果不需要直接开启设计功能则把options.toolbar.showDesignButton = true去掉或者改成=false，如果需要这个功能就再创建一个容器用来渲染设计功能的界面。就像这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入设计面板</span></span><br><span class="line">viewer.onDesignReport = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (designer == <span class="literal">null</span>) &#123;                 <span class="comment">//这里可以声明一个设计和预览两个方法都能访问到的desight初始化null值，避免对象重复实例化</span></span><br><span class="line">    _createDesightModel(e.report)       <span class="comment">//_createDesightModel和单独做设计功能一样，只是渲染的容器改成相对应的容器就好了        </span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="desight配置"><a href="#desight配置" class="headerlink" title="desight配置"></a>desight配置</h3><p>创建一个容器<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"desight"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="实例化一个报表对象"><a href="#实例化一个报表对象" class="headerlink" title="实例化一个报表对象"></a>实例化一个报表对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> report = <span class="keyword">new</span> Stimulsoft.Report.StiReport()</span><br></pre></td></tr></table></figure><h4 id="加载模板"><a href="#加载模板" class="headerlink" title="加载模板"></a>加载模板</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">report.load(<span class="string">'你的jsonfile模板'</span>)</span><br></pre></td></tr></table></figure><h4 id="加载数据源-为了在设计的时候可以拖拽数据源到相应的比如二维码，条码，产品码等或者组合成快递面单上面，直接设计成一个模板，供多处使用"><a href="#加载数据源-为了在设计的时候可以拖拽数据源到相应的比如二维码，条码，产品码等或者组合成快递面单上面，直接设计成一个模板，供多处使用" class="headerlink" title="加载数据源,为了在设计的时候可以拖拽数据源到相应的比如二维码，条码，产品码等或者组合成快递面单上面，直接设计成一个模板，供多处使用"></a>加载数据源,为了在设计的时候可以拖拽数据源到相应的比如二维码，条码，产品码等或者组合成快递面单上面，直接设计成一个模板，供多处使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">name:<span class="string">'小方块'</span>,</span><br><span class="line">age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> strDataSorce = <span class="built_in">JSON</span>.stringify(data)                      <span class="comment">//实例化一个数据源</span></span><br><span class="line"><span class="keyword">var</span> dataSet = <span class="keyword">new</span> Stimulsoft.System.Data.DataSet(<span class="string">'hardy'</span>)    <span class="comment">//设置数据源</span></span><br><span class="line">dataSet.readJson(strDataSorce)                               <span class="comment">//给数据源赋值</span></span><br><span class="line">report.regData(<span class="string">'hardy'</span>, <span class="string">'hardy'</span>, dataSet)                    <span class="comment">//注册数据源</span></span><br><span class="line">report.dictionary.synchronize()                              <span class="comment">//更新字典</span></span><br></pre></td></tr></table></figure><h4 id="设计模板相关配置"><a href="#设计模板相关配置" class="headerlink" title="设计模板相关配置"></a>设计模板相关配置</h4><p>实例化可选项，关于设计模板的可选项可以在<a href="https://admin.stimulsoft.com/documentation/classreference-js/classes/stimulsoft.designer.stidesigneroptions.html" target="_blank" rel="noopener">这里查看</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = <span class="keyword">new</span> Stimulsoft.Designer.StiDesignerOptions()</span><br><span class="line"></span><br><span class="line"><span class="comment">//我的demo中配置</span></span><br><span class="line">options.appearance.fullScreenMode = <span class="literal">true</span>      <span class="comment">//是否全屏</span></span><br><span class="line">options.toolbar.showFileMenuExit = <span class="literal">true</span>       <span class="comment">//显示文件菜单的退出</span></span><br><span class="line">options.toolbar.showFileMenuClose = <span class="literal">false</span>     <span class="comment">//不显示关闭按钮</span></span><br><span class="line">options.toolbar.showFileMenuSaveAs = <span class="literal">true</span>     <span class="comment">//文件菜单显示另存为</span></span><br></pre></td></tr></table></figure></p><p>实例化一个设计模版对象，将配置的可选项传入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> designer = <span class="keyword">new</span> Stimulsoft.Designer.StiDesigner(options, <span class="string">'StiDesigner'</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p><h4 id="保存和另存为"><a href="#保存和另存为" class="headerlink" title="保存和另存为"></a>保存和另存为</h4><blockquote><p>设计和预览不同，设计之后你可能需要保存，或者另存为新的文件 </p></blockquote><p>designer原型上自带了很多操作函数，具体可以<a href="https://admin.stimulsoft.com/documentation/classreference-js/classes/stimulsoft.designer.stidesigner.html" target="_blank" rel="noopener">查看这里</a>,通过designer直接调用即可，比如保存和另存为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存     点文件菜单的保存触发</span></span><br><span class="line">designer.onSaveReport = <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> jsonReport = args.report.saveToJsonString()     <span class="comment">//拿到当前设计的这个模板的jsonfile</span></span><br><span class="line">    <span class="comment">//拿到之后你可以自定义要怎么做,可以发送到后端去保存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另存为    点文件菜单的另存为触发,同时触发一个可以重命名文件进行下载的窗口</span></span><br><span class="line">designer.onSaveAsReport = <span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> jsonReport = args.report.saveToJsonString()     <span class="comment">//拿到当前设计的这个模板的jsonfile</span></span><br><span class="line"><span class="comment">//和保存一样可以做喜欢做的事</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出       点文件菜单的退出触发</span></span><br><span class="line">designer.onExit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//做喜欢的事</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>渲染报表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">designer.report = report</span><br><span class="line">designer.renderHtml(<span class="string">'desight'</span>)</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/stimulsoft/desight1.png" alt="运行效果1" title>                </div>                <div class="image-caption">运行效果1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/stimulsoft/desight2.png" alt="运行效果2" title>                </div>                <div class="image-caption">运行效果2</div>            </figure><p>如果要将jsonfile下载至本地的话，可以使用这样的downloadJjsonFile方法,downloadJjsonFile(要下载的代码片段，下载的文件命名，下载的文件类别),这个方法需要依赖一个a标签，写在页面上哪里都行，只是要使用它的download方法</p><blockquote><p>这里的type指的是Content-Type,根据这个可以规定下载的文件类型,例如下载json,type就是‘application/json’,<a href="https://www.runoob.com/http/http-content-type.html" target="_blank" rel="noopener">Content-Type对照表：</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> downloadJjsonFile = <span class="function">(<span class="params">ctx,name,type</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> _a = <span class="built_in">document</span>.querySelector(<span class="string">'#a'</span>);</span><br><span class="line"><span class="keyword">let</span> _file = <span class="keyword">new</span> Blob([ctx],&#123; type &#125;);</span><br><span class="line">_a.href = URL.createObjectURL(file);</span><br><span class="line">_a.download = name;</span><br><span class="line">_a.dispatchEvent(<span class="keyword">new</span> MouseEvent(<span class="string">'click'</span>, &#123;<span class="string">'bubbles'</span>: <span class="literal">false</span>, <span class="string">'cancelable'</span>: <span class="literal">true</span>&#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** html */</span></span><br><span class="line">&lt;a id=<span class="string">"a"</span>&gt;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>** 触发这个方法，传入参数就可以将代码片段下载成一个文件了 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&lt;button οnclick="downloadJjsonFile('hwllo word', 'downloadJjsonFile.json', 'application/</span>json<span class="string">')"&gt;Test Download&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/HHardyy/Stimulsoft-in-web" target="_blank" rel="noopener">写这篇文章的时候简单写的demo：https://github.com/HHardyy/Stimulsoft-in-web</a></p><p>2020第一篇，最近比较忙，框架升级，轮子维护&amp;&amp;开发，最近在搞web异常监控，就是针对web做的代码监控，回头看看能不能写一个，2019年比较幸运，入职6个月试用期，然后1个月提前转正，然后感谢大家把优秀员工的名额给了我，然后19年学的东西全在码云的提交记录了，等有时间再整理一下，20年给自己定了新的flag，继续奔跑吧年轻人！！！睡是什么，我不知道！！！！。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在开发一些web应用或者后台管理系统的时候，可能会遇到做报表的需求，同时支持在线设计。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=426341675&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Stimulsoft" scheme="http://yoursite.com/tags/Stimulsoft/"/>
    
      <category term="office" scheme="http://yoursite.com/tags/office/"/>
    
      <category term="报表" scheme="http://yoursite.com/tags/%E6%8A%A5%E8%A1%A8/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>eslint规范代码</title>
    <link href="http://yoursite.com/2019/11/30/eslint%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/11/30/eslint规范代码/</id>
    <published>2019-11-30T03:30:47.000Z</published>
    <updated>2020-01-13T15:17:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>是该给选手们订一套代码规范套餐了。。。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1371939273&auto=0&height=66"></iframe><br><a id="more"></a></p><p>在团队开发中，每个人的想法不一样，代码规范就不一样，每个人自由发挥的后果就是这个项目越来越走向重构，后面接手的人甚至无从下手。我自己也比较喜欢业务与plugins分开，plugins里面必须0业务。。。。。。跑偏了。。</p><h3 id="局部安装-应用到当前项目"><a href="#局部安装-应用到当前项目" class="headerlink" title="局部安装(应用到当前项目)"></a>局部安装(应用到当前项目)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install eslint --save-dev</span><br></pre></td></tr></table></figure><h3 id="全局安装（应用到所有项目）"><a href="#全局安装（应用到所有项目）" class="headerlink" title="全局安装（应用到所有项目）"></a>全局安装（应用到所有项目）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g eslint</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用 .eslintrc文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>举例使用ele团队的规范<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint-config-elemefe eslint</span><br></pre></td></tr></table></figure></p><p>然后在.eslintrc中加上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"extends"</span>: <span class="string">"elemefe"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.npmjs.com/package/eslint-config-elemefe" target="_blank" rel="noopener">饿了么团队的eslint规范</a></p><h3 id="IDE-配置"><a href="#IDE-配置" class="headerlink" title="IDE 配置"></a>IDE 配置</h3><p>使用facebook的都在用的默认编辑器vscode，然后安装ESLint插件（在商店搜索安装即可），也可以装上根据eslint自动格式化的插件vetur，prettier等，然后在settings.json用户配置中自由设置（下面是我自己的）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"vetur.format.defaultFormatter.js"</span>: <span class="string">"prettier-eslint"</span>,</span><br><span class="line">  <span class="string">"vetur.format.defaultFormatter.html"</span>: <span class="string">"js-beautify-html"</span>,</span><br><span class="line">  <span class="string">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"wrap_attributes"</span>: <span class="string">"force-aligned"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"editor.detectIndentation"</span>: <span class="literal">true</span>,   <span class="comment">// vscode默认启用了根据文件类型自动设置tabsize的选项</span></span><br><span class="line">  <span class="string">"editor.tabSize"</span>: <span class="number">2</span>,  <span class="comment">// 重新设定tabsize</span></span><br><span class="line">  <span class="comment">// "editor.formatOnSave": true,  // 保存时自动格式化 --vscode编辑器自带自动格式化会与设置的eslint规范有所冲突导致eslint报错</span></span><br><span class="line">  <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>, <span class="comment">//保存时使用eslint规范自动格式化</span></span><br><span class="line">  <span class="string">"workbench.iconTheme"</span>: <span class="string">"vscode-great-icons"</span>,</span><br><span class="line">  <span class="string">"eslint.enable"</span>: <span class="literal">true</span>,     <span class="comment">//true打开eslint语法检查，false关闭</span></span><br><span class="line">  <span class="string">"eslint.validate"</span>: [       <span class="comment">//eslint支持项自定义</span></span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">      <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"language"</span>: <span class="string">"react"</span>,</span><br><span class="line">      <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"language"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">      <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="string">"language"</span>: <span class="string">"typescript"</span>,</span><br><span class="line">       <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配好之后就能感受到写代码实时红线提示，当然再狠一点可以做一下git提交的验证，eslint检查不通过不允许提交,eslint的玩法有超多种，比较急一会要去接手一下一个离职选手的锅，先简单记录一下~，</p><h3 id="错误级别"><a href="#错误级别" class="headerlink" title="错误级别"></a>错误级别</h3><p>“off” or 0 - 关闭(禁用)规则<br>“warn” or 1 - 将规则视为一个警告（并不会导致检查不通过）<br>“error” or 2 - 将规则视为一个错误 (退出码为1，检查不通过) </p><h3 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">Possible Errors 可能的错误或逻辑错误 </span><br><span class="line">no-cond-assign 禁止条件表达式中出现模棱两可的赋值操作符 </span><br><span class="line">no-<span class="built_in">console</span> 禁用<span class="built_in">console</span> </span><br><span class="line">no-constant-condition 禁止在条件中使用常量表达式 </span><br><span class="line">no-<span class="keyword">debugger</span> 禁用 <span class="keyword">debugger</span> </span><br><span class="line">no-dupe-args 禁止 <span class="function"><span class="keyword">function</span> 定义中出现重名参数 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">dupe</span>-<span class="title">keys</span> 禁止对象字面量中出现重复的 <span class="title">key</span> </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">duplicate</span>-<span class="title">case</span> 禁止出现重复的 <span class="title">case</span> 标签 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">empty</span> 禁止出现空语句块 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">ex</span>-<span class="title">assign</span> 禁止对 <span class="title">catch</span> 子句的参数重新赋值 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">extra</span>-<span class="title">boolean</span>-<span class="title">cast</span> 禁止不必要的布尔转换 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">extra</span>-<span class="title">parens</span> 禁止不必要的括号 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">extra</span>-<span class="title">semi</span> 禁止不必要的分号 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">func</span>-<span class="title">assign</span> 禁止对 <span class="title">function</span> 声明重新赋值 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">inner</span>-<span class="title">declarations</span> 禁止在嵌套的块中出现变量声明或 <span class="title">function</span> 声明 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">irregular</span>-<span class="title">whitespace</span> 禁止在字符串和注释之外不规则的空白 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">obj</span>-<span class="title">calls</span> 禁止把全局对象作为函数调用 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">sparse</span>-<span class="title">arrays</span> 禁用稀疏数组 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">prototype</span>-<span class="title">builtins</span> 禁止直接使用<span class="title">Object</span>.<span class="title">prototypes</span> 的内置属性 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">unexpected</span>-<span class="title">multiline</span> 禁止出现令人困惑的多行表达式 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">unreachable</span> 禁止在<span class="title">return</span>、<span class="title">throw</span>、<span class="title">continue</span> 和 <span class="title">break</span>语句之后出现不可达代码 </span></span><br><span class="line"><span class="function"><span class="title">use</span>-<span class="title">isnan</span> 要求使用 <span class="title">isNaN</span>(<span class="params"></span>) 检查 <span class="title">NaN</span> </span></span><br><span class="line"><span class="function"><span class="title">valid</span>-<span class="title">typeof</span> 强制 <span class="title">typeof</span> 表达式与有效的字符串进行比较 </span></span><br><span class="line"><span class="function">—– —– </span></span><br><span class="line"><span class="function"><span class="title">Best</span> <span class="title">Practices</span> 最佳实践 </span></span><br><span class="line"><span class="function"><span class="title">array</span>-<span class="title">callback</span>-<span class="title">return</span> 强制数组方法的回调函数中有 <span class="title">return</span> 语句 </span></span><br><span class="line"><span class="function"><span class="title">block</span>-<span class="title">scoped</span>-<span class="title">var</span> 强制把变量的使用限制在其定义的作用域范围内 </span></span><br><span class="line"><span class="function"><span class="title">complexity</span> 指定程序中允许的最大环路复杂度 </span></span><br><span class="line"><span class="function"><span class="title">consistent</span>-<span class="title">return</span> 要求 <span class="title">return</span> 语句要么总是指定返回的值，要么不指定 </span></span><br><span class="line"><span class="function"><span class="title">curly</span> 强制所有控制语句使用一致的括号风格 </span></span><br><span class="line"><span class="function"><span class="title">default</span>-<span class="title">case</span> 要求 <span class="title">switch</span> 语句中有 <span class="title">default</span> 分支 </span></span><br><span class="line"><span class="function"><span class="title">dot</span>-<span class="title">location</span> 强制在点号之前和之后一致的换行 </span></span><br><span class="line"><span class="function"><span class="title">dot</span>-<span class="title">notation</span> 强制在任何允许的时候使用点号 </span></span><br><span class="line"><span class="function"><span class="title">eqeqeq</span> 要求使用 === 和 !== </span></span><br><span class="line"><span class="function"><span class="title">guard</span>-<span class="title">for</span>-<span class="title">in</span> 要求 <span class="title">for</span>-<span class="title">in</span> 循环中有一个 <span class="title">if</span> 语句 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">alert</span> 禁用 <span class="title">alert</span>、<span class="title">confirm</span> 和 <span class="title">prompt</span> </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">case</span>-<span class="title">declarations</span> 不允许在 <span class="title">case</span> 子句中使用词法声明 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">else</span>-<span class="title">return</span> 禁止 <span class="title">if</span> 语句中有 <span class="title">return</span> 之后有 <span class="title">else</span> </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">empty</span>-<span class="title">function</span> 禁止出现空函数 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">eq</span>-<span class="title">null</span> 禁止在没有类型检查操作符的情况下与 <span class="title">null</span> 进行比较 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">eval</span> 禁用 <span class="title">eval</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">extra</span>-<span class="title">bind</span> 禁止不必要的 .<span class="title">bind</span>(<span class="params"></span>) 调用 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">fallthrough</span> 禁止 <span class="title">case</span> 语句落空 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">floating</span>-<span class="title">decimal</span> 禁止数字字面量中使用前导和末尾小数点 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">implicit</span>-<span class="title">coercion</span> 禁止使用短符号进行类型转换 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">implicit</span>-<span class="title">globals</span> 禁止在全局范围内使用 <span class="title">var</span> 和命名的 <span class="title">function</span> 声明 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">invalid</span>-<span class="title">this</span>: 禁止 <span class="title">this</span> 关键字出现在类和类对象之外 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">lone</span>-<span class="title">blocks</span> 禁用不必要的嵌套块 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">loop</span>-<span class="title">func</span> 禁止在循环中出现 <span class="title">function</span> 声明和表达式 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">magic</span>-<span class="title">numbers</span> 禁用魔术数字 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">multi</span>-<span class="title">spaces</span> 禁止使用多个空格 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">multi</span>-<span class="title">str</span> 禁止使用多行字符串 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">new</span> 禁止在非赋值或条件语句中使用 <span class="title">new</span> 操作符 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">new</span>-<span class="title">func</span> 禁止对 <span class="title">Function</span> 对象使用 <span class="title">new</span> 操作符 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">new</span>-<span class="title">wrappers</span> 禁止对 <span class="title">String</span>，<span class="title">Number</span> 和 <span class="title">Boolean</span> 使用 <span class="title">new</span> 操作符 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">param</span>-<span class="title">reassign</span> 不允许对 <span class="title">function</span> 的参数进行重新赋值 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">redeclare</span> 禁止使用 <span class="title">var</span> 多次声明同一变量 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">return</span>-<span class="title">assign</span> 禁止在 <span class="title">return</span> 语句中使用赋值语句 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">script</span>-<span class="title">url</span> 禁止使用 <span class="title">javascript</span>: <span class="title">url</span> </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">self</span>-<span class="title">assign</span> 禁止自我赋值 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">self</span>-<span class="title">compare</span> 禁止自身比较 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">sequences</span> 禁用逗号操作符 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">unmodified</span>-<span class="title">loop</span>-<span class="title">condition</span> 禁用一成不变的循环条件 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">unused</span>-<span class="title">expressions</span> 禁止出现未使用过的表达式 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">useless</span>-<span class="title">call</span> 禁止不必要的 .<span class="title">call</span>(<span class="params"></span>) 和 .<span class="title">apply</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">useless</span>-<span class="title">concat</span> 禁止不必要的字符串字面量或模板字面量的连接 </span></span><br><span class="line"><span class="function"><span class="title">vars</span>-<span class="title">on</span>-<span class="title">top</span> 要求所有的 <span class="title">var</span> 声明出现在它们所在的作用域顶部 </span></span><br><span class="line"><span class="function">—– —– </span></span><br><span class="line"><span class="function"><span class="title">Strict</span> <span class="title">Mode</span> 使用严格模式和严格模式指 </span></span><br><span class="line"><span class="function"><span class="title">strict</span> 要求或禁止使用严格模式指令 </span></span><br><span class="line"><span class="function">—– —– </span></span><br><span class="line"><span class="function"><span class="title">Variables</span> 变量声明 </span></span><br><span class="line"><span class="function"><span class="title">init</span>-<span class="title">declarations</span> 要求或禁止 <span class="title">var</span> 声明中的初始化 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">catch</span>-<span class="title">shadow</span> 不允许 <span class="title">catch</span> 子句的参数与外层作用域中的变量同名 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">restricted</span>-<span class="title">globals</span> 禁用特定的全局变量 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">shadow</span> 禁止 <span class="title">var</span> 声明 与外层作用域的变量同名 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">undef</span> 禁用未声明的变量，除非它们在 /<span class="title">global</span> / 注释中被提到 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">undef</span>-<span class="title">init</span> 禁止将变量初始化为 <span class="title">undefined</span> </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">unused</span>-<span class="title">vars</span> 禁止出现未使用过的变量 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">use</span>-<span class="title">before</span>-<span class="title">define</span> 不允许在变量定义之前使用它们 </span></span><br><span class="line"><span class="function">—– —– </span></span><br><span class="line"><span class="function"><span class="title">Nodejs</span> <span class="title">and</span> <span class="title">CommonJS</span> <span class="title">Node</span>.<span class="title">js</span>,<span class="title">CommonJS</span> </span></span><br><span class="line"><span class="function"><span class="title">global</span>-<span class="title">require</span> 要求 <span class="title">require</span>(<span class="params"></span>) 出现在顶层模块作用域中 </span></span><br><span class="line"><span class="function"><span class="title">handle</span>-<span class="title">callback</span>-<span class="title">err</span> 要求回调函数中有容错处理 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">mixed</span>-<span class="title">requires</span> 禁止混合常规 <span class="title">var</span> 声明和 <span class="title">require</span> 调用 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">new</span>-<span class="title">require</span> 禁止调用 <span class="title">require</span> 时使用 <span class="title">new</span> 操作符 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">path</span>-<span class="title">concat</span> 禁止对 <span class="title">dirname</span> 和 <span class="title">filename</span>进行字符串连接 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">restricted</span>-<span class="title">modules</span> 禁用指定的通过 <span class="title">require</span> 加载的模块 </span></span><br><span class="line"><span class="function">—– —– </span></span><br><span class="line"><span class="function"><span class="title">Stylistic</span> <span class="title">Issues</span> 风格指南 </span></span><br><span class="line"><span class="function"><span class="title">array</span>-<span class="title">bracket</span>-<span class="title">spacing</span> 强制数组方括号中使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">block</span>-<span class="title">spacing</span> 强制在单行代码块中使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">brace</span>-<span class="title">style</span> 强制在代码块中使用一致的大括号风格 </span></span><br><span class="line"><span class="function"><span class="title">camelcase</span> 强制使用骆驼拼写法命名约定 </span></span><br><span class="line"><span class="function"><span class="title">comma</span>-<span class="title">spacing</span> 强制在逗号前后使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">comma</span>-<span class="title">style</span> 强制使用一致的逗号风格 </span></span><br><span class="line"><span class="function"><span class="title">computed</span>-<span class="title">property</span>-<span class="title">spacing</span> 强制在计算的属性的方括号中使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">eol</span>-<span class="title">last</span> 强制文件末尾至少保留一行空行 </span></span><br><span class="line"><span class="function"><span class="title">func</span>-<span class="title">names</span> 强制使用命名的 <span class="title">function</span> 表达式 </span></span><br><span class="line"><span class="function"><span class="title">func</span>-<span class="title">style</span> 强制一致地使用函数声明或函数表达式 </span></span><br><span class="line"><span class="function"><span class="title">indent</span> 强制使用一致的缩进 </span></span><br><span class="line"><span class="function"><span class="title">jsx</span>-<span class="title">quotes</span> 强制在 <span class="title">JSX</span> 属性中一致地使用双引号或单引号 </span></span><br><span class="line"><span class="function"><span class="title">key</span>-<span class="title">spacing</span> 强制在对象字面量的属性中键和值之间使用一致的间距 </span></span><br><span class="line"><span class="function"><span class="title">keyword</span>-<span class="title">spacing</span> 强制在关键字前后使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">linebreak</span>-<span class="title">style</span> 强制使用一致的换行风格 </span></span><br><span class="line"><span class="function"><span class="title">lines</span>-<span class="title">around</span>-<span class="title">comment</span> 要求在注释周围有空行 </span></span><br><span class="line"><span class="function"><span class="title">max</span>-<span class="title">depth</span> 强制可嵌套的块的最大深度 </span></span><br><span class="line"><span class="function"><span class="title">max</span>-<span class="title">len</span> 强制一行的最大长度 </span></span><br><span class="line"><span class="function"><span class="title">max</span>-<span class="title">lines</span> 强制最大行数 </span></span><br><span class="line"><span class="function"><span class="title">max</span>-<span class="title">nested</span>-<span class="title">callbacks</span> 强制回调函数最大嵌套深度 </span></span><br><span class="line"><span class="function"><span class="title">max</span>-<span class="title">params</span> 强制 <span class="title">function</span> 定义中最多允许的参数数量 </span></span><br><span class="line"><span class="function"><span class="title">max</span>-<span class="title">statements</span> 强制 <span class="title">function</span> 块最多允许的的语句数量 </span></span><br><span class="line"><span class="function"><span class="title">max</span>-<span class="title">statements</span>-<span class="title">per</span>-<span class="title">line</span> 强制每一行中所允许的最大语句数量 </span></span><br><span class="line"><span class="function"><span class="title">new</span>-<span class="title">cap</span> 要求构造函数首字母大写 </span></span><br><span class="line"><span class="function"><span class="title">new</span>-<span class="title">parens</span> 要求调用无参构造函数时有圆括号 </span></span><br><span class="line"><span class="function"><span class="title">newline</span>-<span class="title">after</span>-<span class="title">var</span> 要求或禁止 <span class="title">var</span> 声明语句后有一行空行 </span></span><br><span class="line"><span class="function"><span class="title">newline</span>-<span class="title">before</span>-<span class="title">return</span> 要求 <span class="title">return</span> 语句之前有一空行 </span></span><br><span class="line"><span class="function"><span class="title">newline</span>-<span class="title">per</span>-<span class="title">chained</span>-<span class="title">call</span> 要求方法链中每个调用都有一个换行符 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">array</span>-<span class="title">constructor</span> 禁止使用 <span class="title">Array</span> 构造函数 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">continue</span> 禁用 <span class="title">continue</span> 语句 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">inline</span>-<span class="title">comments</span> 禁止在代码行后使用内联注释 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">lonely</span>-<span class="title">if</span> 禁止 <span class="title">if</span> 作为唯一的语句出现在 <span class="title">else</span> 语句中 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">mixed</span>-<span class="title">spaces</span>-<span class="title">and</span>-<span class="title">tabs</span> 不允许空格和 <span class="title">tab</span> 混合缩进 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">multiple</span>-<span class="title">empty</span>-<span class="title">lines</span> 不允许多个空行 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">negated</span>-<span class="title">condition</span> 不允许否定的表达式 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">plusplus</span> 禁止使用一元操作符 ++ 和 – </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">spaced</span>-<span class="title">func</span> 禁止 <span class="title">function</span> 标识符和括号之间出现空格 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">ternary</span> 不允许使用三元操作符 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">trailing</span>-<span class="title">spaces</span> 禁用行尾空格 </span></span><br><span class="line"><span class="function"><span class="title">no</span>-<span class="title">whitespace</span>-<span class="title">before</span>-<span class="title">property</span> 禁止属性前有空白 </span></span><br><span class="line"><span class="function"><span class="title">object</span>-<span class="title">curly</span>-<span class="title">newline</span> 强制花括号内换行符的一致性 </span></span><br><span class="line"><span class="function"><span class="title">object</span>-<span class="title">curly</span>-<span class="title">spacing</span> 强制在花括号中使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">object</span>-<span class="title">property</span>-<span class="title">newline</span> 强制将对象的属性放在不同的行上 </span></span><br><span class="line"><span class="function"><span class="title">one</span>-<span class="title">var</span> 强制函数中的变量要么一起声明要么分开声明 </span></span><br><span class="line"><span class="function"><span class="title">one</span>-<span class="title">var</span>-<span class="title">declaration</span>-<span class="title">per</span>-<span class="title">line</span> 要求或禁止在 <span class="title">var</span> 声明周围换行 </span></span><br><span class="line"><span class="function"><span class="title">operator</span>-<span class="title">assignment</span> 要求或禁止在可能的情况下要求使用简化的赋值操作符 </span></span><br><span class="line"><span class="function"><span class="title">operator</span>-<span class="title">linebreak</span> 强制操作符使用一致的换行符 </span></span><br><span class="line"><span class="function"><span class="title">quote</span>-<span class="title">props</span> 要求对象字面量属性名称用引号括起来 </span></span><br><span class="line"><span class="function"><span class="title">quotes</span> 强制使用一致的反勾号、双引号或单引号 </span></span><br><span class="line"><span class="function"><span class="title">require</span>-<span class="title">jsdoc</span> 要求使用 <span class="title">JSDoc</span> 注释 </span></span><br><span class="line"><span class="function"><span class="title">semi</span> 要求或禁止使用分号而不是 <span class="title">ASI</span> </span></span><br><span class="line"><span class="function"><span class="title">semi</span>-<span class="title">spacing</span> 强制分号之前和之后使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">sort</span>-<span class="title">vars</span> 要求同一个声明块中的变量按顺序排列 </span></span><br><span class="line"><span class="function"><span class="title">space</span>-<span class="title">before</span>-<span class="title">blocks</span> 强制在块之前使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">space</span>-<span class="title">before</span>-<span class="title">function</span>-<span class="title">paren</span> 强制在 <span class="title">function</span>的左括号之前使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">space</span>-<span class="title">in</span>-<span class="title">parens</span> 强制在圆括号内使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">space</span>-<span class="title">infix</span>-<span class="title">ops</span> 要求操作符周围有空格 </span></span><br><span class="line"><span class="function"><span class="title">space</span>-<span class="title">unary</span>-<span class="title">ops</span> 强制在一元操作符前后使用一致的空格 </span></span><br><span class="line"><span class="function"><span class="title">spaced</span>-<span class="title">comment</span> 强制在注释中 // 或 /* 使用一致的空格</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是该给选手们订一套代码规范套餐了。。。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1371939273&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="eslint" scheme="http://yoursite.com/tags/eslint/"/>
    
      <category term="代码规范" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>vue3基本玩法</title>
    <link href="http://yoursite.com/2019/11/16/vue3%E5%9F%BA%E6%9C%AC%E7%8E%A9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/11/16/vue3基本玩法/</id>
    <published>2019-11-16T07:40:56.000Z</published>
    <updated>2020-01-13T15:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>尤大大在5号凌晨公布了尚处于Pre-Alpha状态的Vue3源码。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1399664349&auto=0&height=66"></iframe><br><a id="more"></a></p><p>Vue3主要的架构改进、优化和新功能均已完成，剩下的主要任务是完成一些Vue2现有功能的移植。稳定版的具体发布时间尚未提及，不过根据Vue在GitHub repo公开展示的Roadmap，后面应该还会发布Alpha（计划于 Q4 发布）、Beta等版本，所以至少要等到2020年才有可能发布3.0稳定版。</p><p>尤雨溪在去年发表的”Vue 3.0 Updates”主题演讲中曾强调过 Vue3包含的五个关键变化：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue3/update.png" alt="update" title>                </div>                <div class="image-caption">update</div>            </figure> </p><p><a href="https://github.com/vuejs/composition-api" target="_blank" rel="noopener">vue-function-api: https://github.com/vuejs/composition-api</a><br><a href="https://github.com/vuejs/composition-api" target="_blank" rel="noopener">composition-api: https://github.com/vuejs/composition-api</a><br><a href="https://github.com/vuejs/vue-next" target="_blank" rel="noopener">vue-next: https://github.com/vuejs/vue-next</a></p><p>vue3相对于之前的版本在目录结构上有很大的改变，主要的代码都在packages中<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue3/file.png" alt update"" title>                </div>                <div class="image-caption">"update"</div>            </figure> </p><h2 id="packages目录结构"><a href="#packages目录结构" class="headerlink" title="packages目录结构"></a>packages目录结构</h2><p>1、compiler-core：核心编译器<br>2、compiler-dom：基于compiler-core封装对于浏览器的编译<br>3、reactivity：响应式<br>4、runtime-core:运行时的核心<br>5、runtime-dom:基于runtime-core编译浏览器支持<br>6、runtime-test:测试<br>7、vue：整合compiler和runtime</p><p>vue3和vue2最大的改变就是数据响应的改变<br>2.0的核心是Object.defineProperty<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue3/objectdefine.png" alt object.defineproperty"" title>                </div>                <div class="image-caption">"Object.defineProperty"</div>            </figure><br>3.0使用了proxy代理的模式<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue3/proxy.png" alt proxy"" title>                </div>                <div class="image-caption">"proxy"</div>            </figure><br>3.0的响应式和2.0的区别<br>2.0会默认递归，2.0数组改变length无效，2.0对象不存在的属性不拦截</p><h3 id="尝试一个3-0"><a href="#尝试一个3-0" class="headerlink" title="尝试一个3.0"></a>尝试一个3.0</h3><p>运行npm run dev，之后在vue目录下生成一个dist目录，里头有个vue.global.js，这个js就是3.0预览版的源代码<br>接着不用cli尝试一个3.0的程序<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue3/3.0html.png" alt vue.global.js"" title>                </div>                <div class="image-caption">"src vue.global.js"</div>            </figure></p><h2 id="3-0-API"><a href="#3-0-API" class="headerlink" title="3.0 API"></a>3.0 API</h2><h3 id="cli下使用3-0"><a href="#cli下使用3-0" class="headerlink" title="cli下使用3.0"></a>cli下使用3.0</h3><p>先装一下新版本的cli<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure></p><p>然后装一下composition-api(新的特性大都在这个包里面)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install @vue/composition-api --save</span><br><span class="line"># OR</span><br><span class="line">yarn add @vue/composition-api</span><br></pre></td></tr></table></figure></p><p>装完composition-api之后要像使用vuex或者vue-router一样Vue.use一下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueCompositionApi <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueCompositionApi)</span><br></pre></td></tr></table></figure></p><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p>vue3中专门为组件提供的新属性，Composition API的统一入口。setup函数会在beforeCreate 之后、created之前执行，不过在3.0中没有beforeCreate和created了</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>定义当前组件允许外界传递过来的参数名称：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//home.vue</span></span><br><span class="line">&lt;HelloWorld msg=<span class="string">"Welcome to Your Vue.js App"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//helloword.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;<span class="keyword">this</span> is hello&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;&#125; <span class="keyword">from</span> <span class="string">"@vue/composition-api"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props.msg); </span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>setup函数的第二个形参是一个上下文对象，这个对象相当于2.0时候的this，2.0中通过this.xxx拿到的东西，在3.0中通过context拿，而this是undefined,也就是说setup中无法访问this<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue3/setup.png" alt setup"" title>                </div>                <div class="image-caption">"setup"</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue3/setupconso.png" alt console"" title>                </div>                <div class="image-caption">"console"</div>            </figure></p><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><p>reactive() 函数接收一个普通对象，返回一个响应式的数据对象。<br>等价于vue2.x中的Vue.observable()函数,用来创建响应式对象,像上面写的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">name</span>:<span class="string">'hardy'</span> &#125;)     <span class="comment">//类似于data返回一个响应式对象</span></span><br></pre></td></tr></table></figure></p><p>要在template中使用的话要在setup函数中return<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">setup()&#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive(&#123; <span class="attr">name</span>:<span class="string">'hardy'</span> &#125;)     <span class="comment">//类似于data返回一个响应式对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure></p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>ref()函数用来根据给定的值创建一个响应式的数据对象，ref()函数调用的返回值是一个对象，这个对象上只包含一个.value属性,当把ref()创建出来的响应式数据对象，挂载到reactive()上时，会自动把响应式数据对象展开为原始的值，不需通过.value 就可以直接被访问</p><p>注意：新的 ref 会覆盖旧的 ref</p><h2 id="isRef"><a href="#isRef" class="headerlink" title="isRef"></a>isRef</h2><p>isRef()用来判断某个值是否为ref()创建出来的对象；<br>应用场景：当需要展开某个可能为ref()创建出来的值的时候</p><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><p>toRefs()函数可以将reactive()创建出来的响应式对象，转换为普通的对象，只不过，这个对象上的每个属性节点，都是ref()类型的响应式数据</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>computed() 用来创建计算属性，computed()函数的返回值是一个ref的实例</p><h3 id="只读"><a href="#只读" class="headerlink" title="只读"></a>只读</h3><p>在调用computed()函数期间，传入一个function函数，可以得到一个只读的计算属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newName = computed(<span class="function"><span class="params">()</span>=&gt;</span>name=<span class="string">'小方块'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="可读可写"><a href="#可读可写" class="headerlink" title="可读可写"></a>可读可写</h3><p>在调用 computed() 函数期间，传入一个包含 get 和 set 函数的对象，可以得到一个可读可写的计算属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newName = computed(&#123;</span><br><span class="line"><span class="keyword">get</span>:()=&gt;&#123;&#125;,</span><br><span class="line"><span class="keyword">set</span>:()=&gt;&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>watch() 函数用来监视某些数据项的变化，从而触发某些特定的操作</p><h3 id="监听reactive类型的数据源"><a href="#监听reactive类型的数据源" class="headerlink" title="监听reactive类型的数据源"></a>监听reactive类型的数据源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数据源</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="comment">// 监视 state.count 这个数据节点的变化</span></span><br><span class="line">watch(</span><br><span class="line">  () =&gt; state.count,</span><br><span class="line">  (count, prevCount) =&gt; &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="监视-ref-类型的数据源"><a href="#监视-ref-类型的数据源" class="headerlink" title="监视 ref 类型的数据源"></a>监视 ref 类型的数据源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数据源</span></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 指定要监视的数据源</span></span><br><span class="line">watch(count, (count, prevCount) =&gt; &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监视多个数据源"><a href="#监视多个数据源" class="headerlink" title="监视多个数据源"></a>监视多个数据源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'zs'</span> &#125;)</span><br><span class="line"></span><br><span class="line">watch(</span><br><span class="line">  [<span class="function"><span class="params">()</span> =&gt;</span> state.count, () =&gt; state.name], <span class="comment">// Object.values(toRefs(state)),</span></span><br><span class="line">  ([count, name], [prevCount, prevName]) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(count) <span class="comment">// 新的 count 值</span></span><br><span class="line">    <span class="built_in">console</span>.log(name) <span class="comment">// 新的 name 值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'------------'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(prevCount) <span class="comment">// 旧的 count 值</span></span><br><span class="line">    <span class="built_in">console</span>.log(prevName) <span class="comment">// 新的 name 值</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    lazy: <span class="literal">true</span> <span class="comment">// 在 watch 被创建的时候，不执行回调函数中的代码</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  state.count++</span><br><span class="line">  state.name = <span class="string">'ls'</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="监视多个ref类型的数据源"><a href="#监视多个ref类型的数据源" class="headerlink" title="监视多个ref类型的数据源"></a>监视多个ref类型的数据源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> name = ref(<span class="string">'zs'</span>)</span><br><span class="line"></span><br><span class="line">watch(</span><br><span class="line">  [count, name], <span class="comment">// 需要被监视的多个 ref 数据源</span></span><br><span class="line">  ([count, name], [prevCount, prevName]) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(count)</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'-------------'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(prevCount)</span><br><span class="line">    <span class="built_in">console</span>.log(prevName)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    lazy: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  count.value++</span><br><span class="line">  name.value = <span class="string">'xiaomaolv'</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="清除监视"><a href="#清除监视" class="headerlink" title="清除监视"></a>清除监视</h3><p>在 setup() 函数内创建的 watch 监视，会在当前组件被销毁的时候自动停止。如果想要明确地停止某个监视，可以调用 watch() 函数的返回值即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建监视，并得到 停止函数</span></span><br><span class="line"><span class="keyword">const</span> stop = watch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用停止函数，清除对应的监视</span></span><br><span class="line">stop()</span><br></pre></td></tr></table></figure></p><h3 id="在-watch-中清除无效的异步任务"><a href="#在-watch-中清除无效的异步任务" class="headerlink" title="在 watch 中清除无效的异步任务"></a>在 watch 中清除无效的异步任务</h3><p>有时候，当被 watch 监视的值发生变化时，或 watch 本身被 stop 之后，我们期望能够清除那些无效的异步任务，此时，watch 回调函数中提供了一个 cleanup registrator function 来执行清除的工作。这个清除函数会在如下情况下被调用：</p><blockquote><p>watch 被重复执行了<br>watch 被强制 stop 了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"keywords"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义响应式数据 keywords</span></span><br><span class="line"><span class="keyword">const</span> keywords = ref(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步任务：打印用户输入的关键词</span></span><br><span class="line"><span class="keyword">const</span> asyncPrint = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 延时 1 秒后打印</span></span><br><span class="line">  <span class="keyword">return</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 watch 监听</span></span><br><span class="line">watch(</span><br><span class="line">  keywords,</span><br><span class="line">  (keywords, prevKeywords, onCleanup) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 执行异步任务，并得到关闭异步任务的 timerId</span></span><br><span class="line">    <span class="keyword">const</span> timerId = asyncPrint(keywords)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 watch 监听被重复执行了，则会先清除上次未完成的异步任务</span></span><br><span class="line">    onCleanup(<span class="function"><span class="params">()</span> =&gt;</span> clearTimeout(timerId))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// watch 刚被创建的时候不执行</span></span><br><span class="line">  &#123; <span class="attr">lazy</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 template 中需要的数据 return 出去</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  keywords</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LifeCycle-Hooks"><a href="#LifeCycle-Hooks" class="headerlink" title="LifeCycle Hooks"></a>LifeCycle Hooks</h2><p>新版的生命周期函数，可以按需导入到组件中，且只能在 setup() 函数中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUpdated, onUnmounted &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent = &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'mounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'updated!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'unmounted!'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>vue 2.x 的生命周期函数与新版 Composition API 之间的映射关系:</p><blockquote><p>❌ beforeCreate -&gt; use setup()<br>❌ created -&gt; use setup()<br>beforeMount -&gt; onBeforeMount<br>mounted -&gt; onMounted<br>beforeUpdate -&gt; onBeforeUpdate<br>updated -&gt; onUpdated<br>beforeDestroy -&gt; onBeforeUnmount<br>destroyed -&gt; onUnmounted<br>errorCaptured -&gt; onErrorCaptured</p></blockquote><h2 id="provide-amp-inject"><a href="#provide-amp-inject" class="headerlink" title="provide &amp; inject"></a>provide &amp; inject</h2><p>provide() 和 inject() 可以实现嵌套组件之间的数据传递。这两个函数只能在 setup() 函数中使用。父级组件中使用 provide() 函数向下传递数据；子级组件中使用 inject() 获取上层传递过来的数据。</p><p>provide和react的provide很像，在react中需要全局共享数据，使用redux，单一数据源，传入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;Component1 /&gt;</span><br><span class="line">    &lt;Component2 /&gt;</span><br><span class="line">&lt;<span class="regexp">/Provider&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="共享普通数据"><a href="#共享普通数据" class="headerlink" title="共享普通数据"></a>共享普通数据</h3><p>根组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h1&gt;App 根组件&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;hr /</span>&gt;</span><br><span class="line">    &lt;LevelOne /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> LevelOne <span class="keyword">from</span> <span class="string">'./components/LevelOne'</span></span><br><span class="line"><span class="comment">// 1. 按需导入 provide</span></span><br><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'app'</span>,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="comment">// 2. App 根组件作为父级组件，通过 provide 函数向子级组件共享数据（不限层级）</span></span><br><span class="line">    <span class="comment">//    provide('要共享的数据名称', 被共享的数据)</span></span><br><span class="line">    provide(<span class="string">'globalColor'</span>, <span class="string">'red'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    LevelOne</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>子组件1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- <span class="number">4.</span> 通过属性绑定，为标签设置字体颜色 --&gt;</span><br><span class="line">    &lt;h3 :style=<span class="string">"&#123;color: themeColor&#125;"</span>&gt;Level One&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;hr /</span>&gt;</span><br><span class="line">    &lt;LevelTwo /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> LevelTwo <span class="keyword">from</span> <span class="string">'./LevelTwo'</span></span><br><span class="line"><span class="comment">// 1. 按需导入 inject</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="comment">// 2. 调用 inject 函数时，通过指定的数据名称，获取到父级共享的数据</span></span><br><span class="line">    <span class="keyword">const</span> themeColor = inject(<span class="string">'globalColor'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 把接收到的共享数据 return 给 Template 使用</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      themeColor</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    LevelTwo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>子组件2<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- <span class="number">4.</span> 通过属性绑定，为标签设置字体颜色 --&gt;</span><br><span class="line">    &lt;h5 :style=<span class="string">"&#123;color: themeColor&#125;"</span>&gt;Level Two&lt;<span class="regexp">/h5&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 1. 按需导入 inject</span></span><br><span class="line"><span class="regexp">import &#123; inject &#125; from '@vue/</span>composition-api<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  setup() &#123;</span></span><br><span class="line"><span class="string">    // 2. 调用 inject 函数时，通过指定的数据名称，获取到父级共享的数据</span></span><br><span class="line"><span class="string">    const themeColor = inject('</span>globalColor<span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 3. 把接收到的共享数据 return 给 Template 使用</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      themeColor</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="共享ref响应数据"><a href="#共享ref响应数据" class="headerlink" title="共享ref响应数据"></a>共享ref响应数据</h3><p>如下代码实现了点按钮切换主题颜色的功能，主要修改了根组件中的代码，子组件1和子组件2中的代码不受任何改变：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h1&gt;App 根组件&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;!-- 点击 App.vue 中的按钮，切换子组件中文字的颜色 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="themeColor='red'"&gt;红色&lt;/</span>button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"themeColor='blue'"</span>&gt;蓝色&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="themeColor='orange'"&gt;橘黄色&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;LevelOne /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> LevelOne <span class="keyword">from</span> <span class="string">'./components/LevelOne'</span></span><br><span class="line"><span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'app'</span>,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="comment">// 定义 ref 响应式数据</span></span><br><span class="line">    <span class="keyword">const</span> themeColor = ref(<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 ref 数据通过 provide 提供的子组件使用</span></span><br><span class="line">    provide(<span class="string">'globalColor'</span>, themeColor)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup 中 return 数据供当前组件的 Template 使用</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      themeColor</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    LevelOne</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="template-refs"><a href="#template-refs" class="headerlink" title="template refs"></a>template refs</h2><p>通过 ref() 可以引用页面上的元素或组件。</p><h3 id="元素的引用"><a href="#元素的引用" class="headerlink" title="元素的引用"></a>元素的引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3 ref=<span class="string">"h3Ref"</span>&gt;TemplateRefOne&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import &#123; ref, onMounted &#125; from '@vue/</span>composition-api<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  setup() &#123;</span></span><br><span class="line"><span class="string">    // 创建一个 DOM 引用</span></span><br><span class="line"><span class="string">    const h3Ref = ref(null)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 在 DOM 首次加载完毕之后，才能获取到元素的引用</span></span><br><span class="line"><span class="string">    onMounted(() =&gt; &#123;</span></span><br><span class="line"><span class="string">      // 为 dom 元素设置字体颜色</span></span><br><span class="line"><span class="string">      // h3Ref.value 是原生DOM对象</span></span><br><span class="line"><span class="string">      h3Ref.value.style.color = '</span>red<span class="string">'</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 把创建的引用 return 出去</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      h3Ref</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>组件1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;TemplateRefOne&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;!-- 4. 点击按钮展示子组件的 count 值 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="showNumber"&gt;获取TemplateRefTwo中的count值&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;!-- <span class="number">3.</span> 为组件添加 ref 引用 --&gt;</span><br><span class="line">    &lt;TemplateRefTwo ref=<span class="string">"comRef"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></span><br><span class="line"><span class="keyword">import</span> TemplateRefTwo <span class="keyword">from</span> <span class="string">'./TemplateRefTwo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="comment">// 1. 创建一个组件的 ref 引用</span></span><br><span class="line">    <span class="keyword">const</span> comRef = ref(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 展示子组件中 count 的值</span></span><br><span class="line">    <span class="keyword">const</span> showNumber = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(comRef.value.count)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 把创建的引用 return 出去</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      comRef,</span><br><span class="line">      showNumber</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    TemplateRefTwo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>组件2<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h5&gt;TemplateRefTwo --- &#123;&#123;count&#125;&#125;&lt;<span class="regexp">/h5&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 3. 点击按钮，让 count 值自增 +1 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="count+=1"&gt;+1&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">'@vue/composition-api'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="comment">// 1. 定义响应式的数据</span></span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 把响应式数据 return 给 Template 使用</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="createComponent"><a href="#createComponent" class="headerlink" title="createComponent"></a>createComponent</h2><blockquote><p>这个函数不是必须的，除非你想要完美结合 TypeScript 提供的类型推断来进行项目的开发。</p></blockquote><p>这个函数仅仅提供了类型推断，方便在结合 TypeScript 书写代码时，能为 setup() 中的 props 提供完整的类型推断。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createComponent &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createComponent(&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    foo: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    props.foo <span class="comment">// &lt;- type: string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尤大大在5号凌晨公布了尚处于Pre-Alpha状态的Vue3源码。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1399664349&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="vue3" scheme="http://yoursite.com/tags/vue3/"/>
    
      <category term="vue-next" scheme="http://yoursite.com/tags/vue-next/"/>
    
      <category term="vue-function-api" scheme="http://yoursite.com/tags/vue-function-api/"/>
    
      <category term="vue-compisition-api" scheme="http://yoursite.com/tags/vue-compisition-api/"/>
    
  </entry>
  
  <entry>
    <title>如何简单粗暴生成条码和二维码</title>
    <link href="http://yoursite.com/2019/11/08/%E5%A6%82%E4%BD%95%E7%AE%80%E5%8D%95%E7%B2%97%E6%9A%B4%E7%94%9F%E6%88%90%E6%9D%A1%E7%A0%81%E5%92%8C%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>http://yoursite.com/2019/11/08/如何简单粗暴生成条码和二维码/</id>
    <published>2019-11-08T15:11:58.000Z</published>
    <updated>2020-01-13T15:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一种情况，你的商品需要带上条形码，就像你在超市买可乐会扫一下，或者带个二维码。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=453498650&auto=0&height=66"></iframe><br><a id="more"></a></p><p>今天团队里的一个前端同学遇到了一个问题，就是需要根据接口拿到的数据，生成条形码并且可以点击打印出来（不是console.log的这个打印，是打印条形码的打印机打印出的纸质条码）,因为应用环境是vue，所以举例用vue，因为项目的代码不能外泄，这里用npm包简单写2个一般开发够用的栗子</p><h3 id="条形码"><a href="#条形码" class="headerlink" title="条形码"></a>条形码</h3><p>条形码的长相很普通，比如一般买的书后面带的那个，长相就像这样<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/barqrcode/barcode.png" alt="“barcode”" title>                </div>                <div class="image-caption">“barcode”</div>            </figure><br>实现起来非常简单，安装and使用<br>一、安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save jsbarcode</span><br></pre></td></tr></table></figure></p><p>二、使用<br>vue环境<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">ref</span>=<span class="string">"barcode"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> JSbarcode <span class="keyword">from</span> <span class="string">'jsbarcode'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>._initJsBarcode();</span></span><br><span class="line">    &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">      _initJsBarcode() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> dom = <span class="keyword">this</span>.$refs.barcode;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> options = &#123;</span></span><br><span class="line"><span class="javascript">          width: <span class="number">2</span>,                   <span class="comment">//较细处条形码的宽度</span></span></span><br><span class="line"><span class="javascript">          height: <span class="number">100</span>,                <span class="comment">//条形码的宽度，无高度直接设置项，由位数决定</span></span></span><br><span class="line">          quite: 10,</span><br><span class="line"><span class="javascript">          format: <span class="string">"CODE128"</span>,</span></span><br><span class="line"><span class="javascript">          displayValue: <span class="literal">true</span>,         <span class="comment">//是否在条码下方显示文字</span></span></span><br><span class="line"><span class="javascript">          font:<span class="string">"monospace"</span>,   </span></span><br><span class="line"><span class="javascript">          textAlign:<span class="string">"center"</span>,          <span class="comment">//对齐</span></span></span><br><span class="line"><span class="javascript">          fontSize: <span class="number">12</span>,                <span class="comment">//字体大小</span></span></span><br><span class="line"><span class="javascript">          backgroundColor:<span class="string">""</span>,         <span class="comment">//条码背景色</span></span></span><br><span class="line"><span class="javascript">          lineColor:<span class="string">"#000"</span>            <span class="comment">//条码颜色</span></span></span><br><span class="line">          ....</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> _jsbarcode = JsBarcode(dom, <span class="string">"my name is hardy"</span>, options);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>react 环境<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> JsBarcode  <span class="keyword">from</span> <span class="string">'jsbarcode'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Barcode</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">this</span>._initJsBarcode();</span><br><span class="line">  &#125;</span><br><span class="line">  _initJsBarcode()&#123;</span><br><span class="line">    <span class="keyword">let</span> _jsbarcode = JsBarcode(<span class="keyword">this</span>.barcode, <span class="string">"my name is hardy"</span>, &#123;</span><br><span class="line">      width: <span class="number">2</span>,                   <span class="comment">//较细处条形码的宽度</span></span><br><span class="line">      height: <span class="number">100</span>,                <span class="comment">//条形码的宽度，无高度直接设置项，由位数决定</span></span><br><span class="line">      quite: <span class="number">10</span>,</span><br><span class="line">      format: <span class="string">"CODE128"</span>,</span><br><span class="line">      displayValue: <span class="literal">true</span>,         <span class="comment">//是否在条码下方显示文字</span></span><br><span class="line">      font:<span class="string">"monospace"</span>,   </span><br><span class="line">      textAlign:<span class="string">"center"</span>,          <span class="comment">//对齐</span></span><br><span class="line">      fontSize: <span class="number">12</span>,                <span class="comment">//字体大小</span></span><br><span class="line">      backgroundColor:<span class="string">""</span>,         <span class="comment">//条码背景色</span></span><br><span class="line">      lineColor:<span class="string">"#000"</span>            <span class="comment">//条码颜色</span></span><br><span class="line">      ....</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"barcode-container"</span>&gt;</span><br><span class="line">        &lt;svg</span><br><span class="line">          ref=&#123;(ref) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.barcode = ref;</span><br><span class="line">          &#125;&#125;</span><br><span class="line">       /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Barcode;</span></span><br></pre></td></tr></table></figure></p><p>html 环境<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/JsBarcode.all.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">"svgbarcode"</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvascode"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"imgcode"</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="javascript">        $(<span class="string">"#svgbarcode"</span>).JsBarcode(<span class="string">'显示文案'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">"#canvascode"</span>).JsBarcode(<span class="string">'显示文案'</span>);</span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">        $(<span class="string">"#imgcode"</span>).JsBarcode(<span class="string">"显示文案"</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这是github上它的配置参数<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/barqrcode/barcodeoptions.png" alt="配置参数''" title>                </div>                <div class="image-caption">配置参数''</div>            </figure><br><a href="https://github.com/lindell/JsBarcode" target="_blank" rel="noopener">github地址</a></p><h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><p>二维码和条码的实现方式一样，只不过二维码用的npm包是qrcodejs2<br>同样的步骤<br>一、安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save qrcodejs2</span><br></pre></td></tr></table></figure></p><p>二、使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div ref=<span class="string">"qrcode"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> QRCode <span class="keyword">from</span> <span class="string">'qrcodejs2'</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="keyword">this</span>._qrcode();</span><br><span class="line">    &#125;,</span><br><span class="line">   methods: &#123;</span><br><span class="line">      _qrcode()&#123;</span><br><span class="line">        <span class="keyword">let</span> _qrcode = <span class="keyword">new</span> QRCode(<span class="keyword">this</span>.$refs.qrcode, &#123;</span><br><span class="line">        width: <span class="number">132</span>,</span><br><span class="line">        height: <span class="number">132</span>,</span><br><span class="line">        text: <span class="string">'my name is hardy'</span>,</span><br><span class="line">        colorDark : <span class="string">"#000"</span>,</span><br><span class="line">        colorLight : <span class="string">"#fff"</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/barqrcode/qrcode.png" alt="生成效果''" title>                </div>                <div class="image-caption">生成效果''</div>            </figure><p>生成二维码也可以使用QRCode.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"qrcode"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var qrcode = new QRCode(<span class="string">"test"</span>, &#123;</span><br><span class="line">    text: <span class="string">"https://hhardyy.com/"</span>,    // 设置要生成二维码的链接</span><br><span class="line">    width: 128,</span><br><span class="line">    height: 128,</span><br><span class="line">    colorDark : <span class="string">"#000000"</span>,</span><br><span class="line">    colorLight : <span class="string">"#ffffff"</span>,</span><br><span class="line">    correctLevel : QRCode.CorrectLevel.H</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/davidshimjs/qrcodejs" target="_blank" rel="noopener">github地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一种情况，你的商品需要带上条形码，就像你在超市买可乐会扫一下，或者带个二维码。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=453498650&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="二维码" scheme="http://yoursite.com/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
      <category term="条形码" scheme="http://yoursite.com/tags/%E6%9D%A1%E5%BD%A2%E7%A0%81/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>webpack4.x</title>
    <link href="http://yoursite.com/2019/09/30/webpack4-x/"/>
    <id>http://yoursite.com/2019/09/30/webpack4-x/</id>
    <published>2019-09-30T14:37:59.000Z</published>
    <updated>2020-01-13T15:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>webpack4.x =&gt; vue.config.js但是 !== vue.config.js</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1369794434&auto=0&height=66"></iframe><br><a id="more"></a></p><p>为什么要用webpack，你用的脚手架大部分都是基于这个东西，而这个东西基于nodejs，而nodejs依赖v8引擎，而v8引擎就是v8引擎。</p><blockquote><p>webpack4.x从安装开始</p></blockquote><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -webpack-cli -D</span><br></pre></td></tr></table></figure><p>解释：为什么webpack和webpack-cli需要分开安装，在webpack3中，webpack本身和它的CLI以前都是在同一个包中，但在第4版中已经将两者分开来更好地管理它们。webpack建议装在局部环境，虽然装在全局比较方便，但是当多个项目使用的webpack版本不一样的时候就会出现问题，即使把每个项目的webpack版本都改成一样的，又会导致原本的项目出问题，所以还是建议安装在局部环境，每个项目有独立的webpack。</p><h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><p>production：生产模式，线上的环境<br>development：开发模式，开发环境</p><h3 id="sourcemap"><a href="#sourcemap" class="headerlink" title="sourcemap"></a>sourcemap</h3><p><a href="https://www.webpackjs.com/configuration/devtool/" target="_blank" rel="noopener">官网介绍</a><br>mode  development  ‘cheap-module-eval-souce-map’    提示比较强，打包速度比较快<br>mode production  ‘cheap-module-souce-map’</p><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><p>入口：每个 HTML 页面都有一个入口起点。单页应用(SPA)：一个入口起点，多页应用(MPA)：多个入口起点。<br>单个文件打包：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry:<span class="string">"index.js"</span></span><br></pre></td></tr></table></figure></p><p>多个文件打包成多个：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">   one:<span class="string">'index1.js'</span>,</span><br><span class="line">   two:<span class="string">'index2.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>多个文件打包成单个：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  main:[<span class="string">"index1.js"</span>,<span class="string">"index2.js"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>动态入口：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'index.js'</span></span><br></pre></td></tr></table></figure></p><p>多个动态入口：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve([<span class="string">'index1.js'</span>, <span class="string">'index2.js'</span>]))</span><br></pre></td></tr></table></figure></p><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p>出口：output 位于对象最顶级键(key)，包括了一组选项，指示 webpack 如何去输出、以及在哪里输出你的「bundle、asset 和其他你所打包或使用 webpack 载入的任何内容」。output需要依赖node的path模块来指定当前项目的根目录。<br>单页面应用的输出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line">path:path.resolve(__dirname,<span class="string">'dist'</span>),   <span class="comment">//输出目录</span></span><br><span class="line">filename:<span class="string">'bundle'</span>  <span class="comment">//输出文件名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>多页面输出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line"> filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>[name]是根据入口entry设置的变量来输出对应的文件名<br>配置项大概这么多：<br>filename，输出的文件名，可以自定义一些名称规则<br>path，配置输出文件存放在本地的目录<br>publicPath，配置CDN的路径<br>chunkFilename ，处理异步加载时的命名规则<br>hash、chunkhash和contenthash三者的区别<br>hash是项目级别的，每次构建得出的hash都是相同的，这可能不利于文件的缓存<br>chunkhash是文件级别的，值是变动修改的文件的chunkhash值<br>contenthash是文件级别的，在拆分css文件时记得使用处理css的缓存</p><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p>模块：决定了如何处理项目中的不同类型的模块。防止 webpack 解析那些任何与给定正则表达式相匹配的文件。忽略的文件中不应该含有 import, require, define 的调用，或任何其他导入机制。忽略大型的 library 可以提高构建性能。这个参数还是有挺多的，可以去官网看<br>比如在安装完webpack之后项目目录中肯定多了一个叫node_modules的文件夹，里头有很多模块是不需要打包的，同时要识别jsx文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rules: [&#123;</span><br><span class="line">   test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">   use: <span class="string">'ts-loader'</span>,</span><br><span class="line">   exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>插件：plugins 选项用于以各种方式自定义 webpack 构建过程。webpack 附带了各种内置插件，可以通过 webpack.[plugin-name] 访问这些插件。请查看这个页面获取插件列表和对应文档，但请注意这只是其中一部分，社区中还有许多插件。比如我们做脚手架一定会用到的<a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">html-webpack-plugin</a>,可以去看一下它的Options，就可以根据业务来做脚手架了，使用也简单，install之后引入之后<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    ...options</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><p>开发环境下的一个内置小型本地服务器: 基于nodejs实现的服务器，你也可以自己写一个，就像这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>)</span><br><span class="line"><span class="keyword">const</span> conplier = webpack(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(webpackDevMiddleware(conplier,&#123;&#125;))</span><br><span class="line">app.listen(<span class="number">9090</span>,()=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'at 9090'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>devServer是用来提高开发效率的，它提供了一些配置项，可以用于改变devServer的默认行为，要配置devServer，除了可以在配置文件里通过devServer传入参数，还可以通过命令行传入参数。</p><p>⚠️注意！！！只有在通过devServer启动webpack时，配置文件里的devServer才会生效，因为这些参数所对应的功能都是devServer提供的，webpack本身并不认识devServer的配置项。</p><h4 id="hot"><a href="#hot" class="headerlink" title="hot"></a>hot</h4><p>hot配置是否启用模块的热替换功能，开启之后代码变动会自动刷新页面，做到实时热更新<br>两种配置方法：<br>1、webpack.config.js里头的devServer设置hot为true或者false,需要引入一个热更新插件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">     <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), </span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>2、命令行，在package.json中的script中，比如原本用来启动本地项目的命令后面加上–hot<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"NODE_ENV=development  webpack-dev-server --config  webpack.develop.config.js"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"NODE_ENV=development  webpack-dev-server --config  webpack.develop.config.js --hot"</span></span><br></pre></td></tr></table></figure><h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><p>devServer服务监听的地址，如果想让局域网内的其他用户访问本项目，可以将host配置为本机的IP，通过命令行 –host 0.0.0.0也可以</p><h4 id="port"><a href="#port" class="headerlink" title="port"></a>port</h4><p>端口：如8080,9090</p><h4 id="open"><a href="#open" class="headerlink" title="open"></a>open</h4><p>是否打开默认浏览器，如果配置了open，在run start之后会打开默认浏览器，也可以在命令行  –open</p><h4 id="contentBase"><a href="#contentBase" class="headerlink" title="contentBase"></a>contentBase</h4><p>配置devServer，Http服务器的文件根目录</p><h4 id="proxy配置代理，处理本地跨域，"><a href="#proxy配置代理，处理本地跨域，" class="headerlink" title="proxy配置代理，处理本地跨域，"></a>proxy配置代理，处理本地跨域，</h4><h4 id="pathRewrite"><a href="#pathRewrite" class="headerlink" title="pathRewrite"></a>pathRewrite</h4><p>这个的应用场景是，比如项目里面写了个a.json，突然接口有问题需要换到测试接口b.json，就用这个代理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">open: <span class="literal">true</span>,</span><br><span class="line">port: <span class="number">8090</span>,</span><br><span class="line">hot: <span class="literal">true</span>,</span><br><span class="line">historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">proxy: &#123;</span><br><span class="line"><span class="string">'/react/api'</span>: &#123;</span><br><span class="line">target: <span class="string">'http://hhardyy.com'</span>,</span><br><span class="line">pathRewrite: &#123;</span><br><span class="line"><span class="string">'a.json'</span>: <span class="string">'b.json'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>devServer.historyApiFallback，   解决单页面应用无法跳转的问题，比如Route 的path=/list ,localhost:8080/list打不开</p><h3 id="HotModuleReplacementPlugin"><a href="#HotModuleReplacementPlugin" class="headerlink" title="HotModuleReplacementPlugin"></a>HotModuleReplacementPlugin</h3><p>这个插件css修改了也不会重新渲染刷新整个页面，只是把css即时修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack= <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line">plugins:[</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="两种配置bable的方案"><a href="#两种配置bable的方案" class="headerlink" title="两种配置bable的方案"></a>两种配置bable的方案</h3><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">presets: [[</span><br><span class="line"><span class="string">'@babel/preset-env'</span>,         <span class="comment">//需要在index.js中去import "@babel/polyfill";</span></span><br><span class="line">&#123;</span><br><span class="line"> targets: &#123;</span><br><span class="line">        edge: <span class="string">"17"</span>,</span><br><span class="line">        firefox: <span class="string">"60"</span>,</span><br><span class="line">        chrome: <span class="string">"67"</span>,</span><br><span class="line">       safari: <span class="string">"11.1"</span>,</span><br><span class="line">     &#125;,</span><br><span class="line"> useBuiltIns: <span class="string">'usage'</span>                     <span class="comment">//配置了这个的话，代码里面不用单独引入babel-polifill，它已经自动安装了</span></span><br><span class="line"> &#125;</span><br><span class="line">    ]]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/plugin-transform-runtime"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"absoluteRuntime"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"corejs"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"helpers"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"regenerator"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"useESModules"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="three-shaking"><a href="#three-shaking" class="headerlink" title="three shaking"></a>three shaking</h3><p>顾名思义是摇树的意思：将一些模块中引入不用的方法摇掉，只支持import使用，因为import的底层是静态引入的方式，commonjs是动态引入的方式，开发环境（mode:development）使用three shaking要加上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">optimization:&#123;</span><br><span class="line">    usedExports: <span class="literal">true</span>     <span class="comment">//哪些模块被使用了再做打包 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>package.json加上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"sideEffects"</span>:<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>假如在某个js文件内import “@babel/polly-fill”,那three<br>shaking发现它没有导出模块，在打包的时候会被忽略掉，但是需要使用里头的东西，为了避免打包错误，需要添加这个配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"sideEffects"</span>:[<span class="string">"@babel/polly-fill"</span>]</span><br></pre></td></tr></table></figure></p><p>false的意思是对所有的模块都进行three shaking，没有特殊处理的模块.一般如果在模块中导入了css文件，three shaking会去检测有没有模块导出，所以一般sideEffects会配置[“*.css”]</p><p>在开发环境下three shaking不会去删除没有用到的模块，因为在开发环境需要调试，如果打包上线的话three shaking其实自动就配置好了，甚至都不需要写three shaking配置。</p><h3 id="HMR模块热替换"><a href="#HMR模块热替换" class="headerlink" title="HMR模块热替换"></a>HMR模块热替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin()   <span class="comment">//启用 webpack 内置的 HMR插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">'./print.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//告诉 webpack 接受热替换的模块</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Accepting the updated printMe module!'</span>);</span><br><span class="line">        printMe();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="code-splitting"><a href="#code-splitting" class="headerlink" title="code splitting"></a>code splitting</h4><p>代码分割<br>同步代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">   splitChunks: &#123;</span><br><span class="line">       chunks: <span class="string">'all'</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>异步代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-syntax-dynamic-<span class="keyword">import</span></span><br></pre></td></tr></table></figure></p><p>.babelrc<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins:[<span class="string">"dynamic-import-webpack"</span>]</span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">import</span>(<span class="comment">/*webpackChunkName:"lodash"*/</span><span class="string">'lodash'</span>).then((&#123;</span><br><span class="line"><span class="keyword">default</span>: _</span><br><span class="line">&#125;) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">element.innerHTML = _.join([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], <span class="string">'***'</span>)</span><br><span class="line"><span class="keyword">return</span> element</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getComponent().then(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="webapck分析工具"><a href="#webapck分析工具" class="headerlink" title="webapck分析工具"></a>webapck分析工具</h4><p><a href="github.com/webpack/analyse">git仓库</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--profile --json &gt; stats.json     <span class="comment">//把打包过程的一些解释放到一个json文件里</span></span><br></pre></td></tr></table></figure></p><p>打包分析： <a href="https://webpack.js.org/guides/code-splitting/#bundle-analysis" target="_blank" rel="noopener">https://webpack.js.org/guides/code-splitting/#bundle-analysis</a></p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>在首屏主要代码加载完毕然后释放出网络之后再去加载模态框等其他代码用Prefetching  /  Preloading modules，<br>前端性能优化的时候，缓存其实不是最主要的点，而最主要的点应该是放到代码覆盖率上</p><h4 id="css代码分割"><a href="#css代码分割" class="headerlink" title="css代码分割"></a>css代码分割</h4><p><a href="https://webpack.js.org/plugins/mini-css-extract-plugin/#root" target="_blank" rel="noopener">可以看一下这里</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'[name].js'</span>,</span><br><span class="line">chunkFilename: <span class="string">'[name].chunk.js'</span>,        <span class="comment">//加上这个，然后用上下面的插件</span></span><br><span class="line">path: path.resolve(__dirname, <span class="string">'../dist'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins  : MiniCssExtractPlugin</span><br></pre></td></tr></table></figure></p><p>例如在index.js里面import 1.css和import 2.css,跑起来的时候就会将1.css和2.css合并到main.css里面，<br>只能用在生产环境，因为不支持HMR，用在开发环境的话会影响开发效率。</p><h4 id="css代码压缩"><a href="#css代码压缩" class="headerlink" title="css代码压缩"></a>css代码压缩</h4><p>用optimize-css-assets-webpack-plugin这个插件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure></p><p>使用方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line">optimization: &#123;</span><br><span class="line">minimizer: [<span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>假如要把index.js和index1.js和indexn.js中引用的css文件单独分割到styles文件里面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">optimization:&#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">cacheGroups: &#123;</span><br><span class="line">  styles: &#123;</span><br><span class="line">name: <span class="string">'styles'</span>,</span><br><span class="line">test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">chunks: <span class="string">'all'</span>,</span><br><span class="line">enforce: <span class="literal">true</span>,      <span class="comment">//忽略掉所有默认配置</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>performance:false    //不让提示性能上的问题</p><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>每次webpack打包的文件放到服务器，第二次请求服务器会默认请求缓存<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'[name].[contenthash].js'</span>,</span><br><span class="line">chunkFilename: <span class="string">'[name].[contenthash].js'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这么配置之后如果源代码没有改变，那么打包生成的cantenthash永远不变，根据content产生的hash字符串,老版本webpack如果发现没改变代码但是打包的hash值不一样，这时候需要做额外配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">runtimeChunk: &#123;</span><br><span class="line">name: <span class="string">'runtime'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在用webpack打包的时候，main.js放的是业务逻辑，vendors放的是用的库，比如jquery，然后main.js和vendors其实是有关联的，处理这些关联的内置代码是manifest,默认存在两个文件里面，它在每次打包的时候在旧版有差异，正是这些差异导致在打包的时候虽然没有改动源代码，但是两个文件里面的manifest实际上已经跟着变了。</p><h3 id="shimming的作用"><a href="#shimming的作用" class="headerlink" title="shimming的作用"></a>shimming的作用</h3><p>比如在index.js文件里<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ui &#125; <span class="keyword">from</span> <span class="string">'jquery.ui.js'</span></span><br></pre></td></tr></table></figure></p><p>其中jquery.ui.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">ui</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">'body'</span>).css(<span class="string">'background'</span>,<span class="string">'red'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打包之后会报错说$未定义，因为每个模块只能使用模块内部的代码,那如果有一个库，又想用又不能修改内部的代码，就可以利用webpack自带的api<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> webpack <span class="keyword">from</span> <span class="string">'webpack'</span></span><br><span class="line">plugins:[</span><br><span class="line">    <span class="keyword">new</span> webpack.ProviderPlugin(&#123;</span><br><span class="line">        $:jquery</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>意思就是模块内发现使用$的时候，就自动引入jquery</p><h3 id="模块this"><a href="#模块this" class="headerlink" title="模块this"></a>模块this</h3><p>如果想让加载的模块this指向window而不是自己（默认指向自己）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install imports-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>然后再在test 的.js文件使用loader<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">exclude:<span class="regexp">/node_modules/</span>,</span><br><span class="line">use:[</span><br><span class="line">    &#123;</span><br><span class="line">       loader:<span class="string">'babel-loader'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">       loader:<span class="string">'imports-loader?this=&gt;window'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>如何在webpack打包的过程中使用全局变量<br>分两个环境<br>webpack.prod.js  ＆＆　webpack.dev.js  &amp;&amp; webpack.comm.js(公共配置)<br>1、module.exports = prodConfig<br>2、module.exports = devConfig<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">let</span> commConfig = &#123;</span><br><span class="line">   ...公共webpack配置</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>( env &amp;&amp; env.production === <span class="string">'hardy'</span> )&#123;</span><br><span class="line">       <span class="keyword">return</span> merge(commConfig, prodConfig)</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> merge(commConfig, devConfig)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>env是package.json传入的全局变量，例如package.json里头的打包命令设置为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev"</span>:<span class="string">"webpack-dev-server --config ./build/webpack.comm.js"</span></span><br><span class="line"><span class="string">"build"</span> : <span class="string">"webpack --env.production==='hardy' --config ./build/webpack.comm.js"</span></span><br></pre></td></tr></table></figure></p><h3 id="如何开发一个库"><a href="#如何开发一个库" class="headerlink" title="如何开发一个库"></a>如何开发一个库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'library.js'</span>,</span><br><span class="line">    library:<span class="string">'library'</span>,</span><br><span class="line">    libraryTarget: <span class="string">'umd'</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>libraryTarget: ‘umd’   =&gt;<br>import library from ‘library.js’   ES6<br>const library = require(‘library’)  Common<br>require([‘library’,function()])   AMD<br> library:’library’ =&gt;支持script引入方式  意思就是打包生成的js文件挂载到页面的全局变量中然后直接library.调用里头的方法</p><h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h3><p>可以是字符串，数组，对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">externals: [<span class="string">'lodash'</span>]</span><br></pre></td></tr></table></figure></p><p>防止用户在import 再打包的时候项目中有两个lodash，不过打包之后没有lodash，需要自己引入<br>,就是当lodash被commonjs的方式引入的时候，名字必须是lodash，也就是const lodash = require(‘lodash’),而不能写成const _ = require(‘lodash’)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">    lodash: &#123;</span><br><span class="line">        commonjs:<span class="string">'lodash'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>root的作用是当以script src的方式引入的时候页面上必须注册一个名为_的全局变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">    lodash: &#123;</span><br><span class="line">        root: <span class="string">'_'</span>,      </span><br><span class="line">        commonjs: <span class="string">'lodash'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><p>Progressive Web Application    ===    PWA  =&gt;遇到断网的情况下依然可以访问,用户体验更好<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install workbox-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> workboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">'"workbox-webpack-plugin"'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> workboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">clientsClaim: <span class="literal">true</span>,</span><br><span class="line">skipWaiting: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="ts打包配置"><a href="#ts打包配置" class="headerlink" title="ts打包配置"></a>ts打包配置</h3><p>打包ts文件的时候，需要在项目根目录下创建一个名为tsconfig.json的文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/lodash --save-dev</span><br></pre></td></tr></table></figure></p><h3 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h3><p><a href="https://eslint.org/" target="_blank" rel="noopener">eslint</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure></p><p>检测src下面的代码符不符合规范要求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx eslint src</span><br></pre></td></tr></table></figure></p><p>babel-eslint是较常用的eslint解析器，为了避免团队成员使用不同的编辑器导致的eslint检测区别，可以使用eslint-loader<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-loader --save-dev</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">         &#123;</span><br><span class="line">            test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">            use:[<span class="string">'babel-loader'</span>,eslint-loader]     <span class="comment">//loader执行顺序从后往左</span></span><br><span class="line">         &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加完之后可以在webpack.config.js的devServer加入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overlay: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这样npm run dev的时候一旦出现eslint的问题，就会在浏览器上弹窗出打包遇到的问题</p><h3 id="webpack性能优化"><a href="#webpack性能优化" class="headerlink" title="webpack性能优化"></a>webpack性能优化</h3><p>提升打包速度</p><h4 id="跟上技术的迭代-升级webpack，npm-yarn-node"><a href="#跟上技术的迭代-升级webpack，npm-yarn-node" class="headerlink" title="跟上技术的迭代   升级webpack，npm|yarn|node"></a>跟上技术的迭代   升级webpack，npm|yarn|node</h4><h4 id="尽可能少的模块使用loader"><a href="#尽可能少的模块使用loader" class="headerlink" title="尽可能少的模块使用loader"></a>尽可能少的模块使用loader</h4><p>将this指向window的配置<br>test:/.js$/,<br>exclude:/node_module/,<br>use:[“import-loader?this=&gt;window”]</p><h4 id="Plugin尽可能精简并确保可靠"><a href="#Plugin尽可能精简并确保可靠" class="headerlink" title="Plugin尽可能精简并确保可靠"></a>Plugin尽可能精简并确保可靠</h4><h4 id="插件DellPlugin提高打包速率"><a href="#插件DellPlugin提高打包速率" class="headerlink" title="插件DellPlugin提高打包速率"></a>插件DellPlugin提高打包速率</h4><p>每次打包的时候比如react，react-dom.lodash的代码都是不会变的，所以只在第一次打包的时候去分析，理想的打包状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendors: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>, <span class="string">'lodash'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].dell.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dell'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>单独生成的dell下面的vendors.dell.js这么来用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install add-asset-html-webpack-plugin --save</span><br></pre></td></tr></table></figure></p><p>这个插件是往html里面再去增加静态资源<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AddAssetWebpackPlugin(&#123;</span><br><span class="line">  filepath: path.resolve(__dirname, <span class="string">'../dell/vendors.dell.js'</span>),</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><p>分析打包文件，然后生成打包的映射<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    vendors: [<span class="string">'lodash'</span>],</span><br><span class="line">    react: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>DllPlugin生成映射<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">  name: <span class="string">'[name]'</span>,</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'../dell/[name].manifast.json'</span>),</span><br><span class="line">&#125;),</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string">然后配置AddAssetWebpackPlugin，将它加入到html中</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">new</span> AddAssetWebpackPlugin(&#123;</span><br><span class="line">  filepath: path.resolve(__dirname, <span class="string">'../dell/vendors.dell.js'</span>),</span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> AddAssetWebpackPlugin(&#123;</span><br><span class="line">  filepath: path.resolve(__dirname, <span class="string">'../dell/react.dell.js'</span>),</span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">  manifest: path.resolve(__dirname, <span class="string">'../dell/vendors.manifast.json'</span>),</span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">  manifest: path.resolve(__dirname, <span class="string">'../dell/react.manifast.json'</span>),</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p><p>这么配置之后，它会去dell/vendors.manifast.json中查找第三方模块的映射关系，如果能找到就不去打包，直接从vendors.dell.js引入（从全局变量里面拿),当需要分解的文件太多的时候，为了避免每个都要复制，可以用fs来动态加载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> files = fs.readdirSync(path.resolve(__dirname, <span class="string">'../dell'</span>));</span><br><span class="line"><span class="keyword">const</span> plugins = [</span><br><span class="line">  <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br><span class="line">files.forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/.*\.dell.js/</span>.test(file)) &#123;</span><br><span class="line">    plugins.push(<span class="keyword">new</span> AddAssetWebpackPlugin(&#123;</span><br><span class="line">      filepath: path.resolve(__dirname, <span class="string">'../dell'</span>, file),</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/.*\.manifast.json/</span>.test(file)) &#123;</span><br><span class="line">    plugins.push(<span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: path.resolve(__dirname, <span class="string">'../dell'</span>, file),</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>DellPlugin的打包逻辑就是项目中引入比如jquery,lodash等不会改变的静态资源的时候，就直接根据entry设置的文件名打包到dell目录下然后生成映射，后面每次打包就可以直接去dell目录下加载相关资源，不需要重新打包</p><h4 id="控制包大小"><a href="#控制包大小" class="headerlink" title="控制包大小"></a>控制包大小</h4><h4 id="thread-loader-parallel-webpack-happypack多进程打包（利用node里面的多进程，使用多个cpu）"><a href="#thread-loader-parallel-webpack-happypack多进程打包（利用node里面的多进程，使用多个cpu）" class="headerlink" title="thread-loader,parallel-webpack,happypack多进程打包（利用node里面的多进程，使用多个cpu）"></a>thread-loader,parallel-webpack,happypack多进程打包（利用node里面的多进程，使用多个cpu）</h4><h4 id="合理使用sourceMap"><a href="#合理使用sourceMap" class="headerlink" title="合理使用sourceMap"></a>合理使用sourceMap</h4><h4 id="综合stats分析打包结果"><a href="#综合stats分析打包结果" class="headerlink" title="综合stats分析打包结果"></a>综合stats分析打包结果</h4><h4 id="开发环境内存编译"><a href="#开发环境内存编译" class="headerlink" title="开发环境内存编译"></a>开发环境内存编译</h4><h3 id="打包多页面，"><a href="#打包多页面，" class="headerlink" title="打包多页面，"></a>打包多页面，</h3><p>一般都是单页面，也就是只有一个html的页面，要打包多个页面的时候，在entry里头写两个入口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">   main:<span class="string">'./src/index.js'</span>,</span><br><span class="line">   list:<span class="string">'./src/list.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后可以去github上查找html-webpack-plugin的配置项,或者往上翻<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">filename: <span class="string">'index.html'</span>,</span><br><span class="line">chunks: [<span class="string">'runtime'</span>, <span class="string">'vendors'</span>, <span class="string">'main'</span>],</span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">filename: <span class="string">'list.html'</span>,</span><br><span class="line">chunks: [<span class="string">'runtime'</span>, <span class="string">'vendors'</span>, <span class="string">'list'</span>],</span><br><span class="line">&#125;),</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>如果觉得每次这样复制不太友好，可以用封装一个函数来解决<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> makePlagins = <span class="function">(<span class="params">configs</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> plugins = [</span><br><span class="line">    <span class="comment">// new CleanWebpackPlugin(['dist'], &#123;</span></span><br><span class="line">    <span class="comment">//   root: path.resolve(__dirname, '../'),</span></span><br><span class="line">    <span class="comment">// &#125;),</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(configs.entry);</span><br><span class="line">  keys.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    plugins.push(</span><br><span class="line">      <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">        template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">        filename: <span class="string">`<span class="subst">$&#123;item&#125;</span>.html`</span>,</span><br><span class="line">        chunks: [<span class="string">'runtime'</span>, <span class="string">'vendors'</span>, item],</span><br><span class="line">      &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> files = fs.readdirSync(path.resolve(__dirname, <span class="string">'../dell'</span>));</span><br><span class="line">  files.forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/.*\.dell.js/</span>.test(file)) &#123;</span><br><span class="line">      plugins.push(<span class="keyword">new</span> AddAssetWebpackPlugin(&#123;</span><br><span class="line">        filepath: path.resolve(__dirname, <span class="string">'../dell'</span>, file),</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/.*\.manifast.json/</span>.test(file)) &#123;</span><br><span class="line">      plugins.push(<span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">        manifest: path.resolve(__dirname, <span class="string">'../dell'</span>, file),</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> plugins;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在这个操作之前先将<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> configs=&#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>configs.plugins = makePlagins(configs)<br>这样就可以实现动态改变打包的入口文件就可以生成新的一个页面</p><h3 id="如何编写一个loader"><a href="#如何编写一个loader" class="headerlink" title="如何编写一个loader"></a>如何编写一个loader</h3><p><a href="https://www.webpackjs.com/api/" target="_blank" rel="noopener">webpack API</a><br>写一个loader来做异常捕获<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//异常捕获start</span></span><br><span class="line">  <span class="keyword">try</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;).catch(e)&#123;&#125;</span><br><span class="line">  <span class="comment">//异常捕获end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = loaderUtils.getOptions(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">const</span> callback = <span class="keyword">this</span>.async()</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = source.replace(<span class="string">'hardy'</span>, options.name)</span><br><span class="line">    callback(<span class="literal">null</span>, result)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以用来写国际化<br>比如业务代码index.js中<br>console.log(‘webpack4.x‘)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">loader里头这么写</span><br><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node全局变量 === <span class="string">'中文'</span>) &#123;</span><br><span class="line">    source.replace(<span class="string">'&#123;&#123;title&#125;&#125;'</span>, <span class="string">'中文标题'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    source.replace(<span class="string">'&#123;&#123;title&#125;&#125;'</span>,<span class="string">'english title'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = loaderUtils.getOptions(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">const</span> callback = <span class="keyword">this</span>.async()</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = source.replace(<span class="string">'hardy'</span>, options.name)</span><br><span class="line">    callback(<span class="literal">null</span>, result)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="编写一个plugin"><a href="#编写一个plugin" class="headerlink" title="编写一个plugin"></a>编写一个plugin</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">   <span class="string">"debug"</span>: <span class="string">"node --inspect --inspect-brk node_modules/webpack/bin/webpack.js"</span>,   <span class="comment">//使用node的调试工具调试插件，--inspect开启调试工具，--inspect-brk在第一行打断点</span></span><br><span class="line">   <span class="string">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>最近拿了新offer，今天也是国庆，祖国70周年的生日！！！</p><p>分享一张觉得拍的不错的美图。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/webpack/1.jpg" alt="红线" title>                </div>                <div class="image-caption">红线</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack4.x =&amp;gt; vue.config.js但是 !== vue.config.js&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1369794434&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue+echarts+vant demo</title>
    <link href="http://yoursite.com/2019/08/31/vue-echarts-vant-demo/"/>
    <id>http://yoursite.com/2019/08/31/vue-echarts-vant-demo/</id>
    <published>2019-08-31T09:21:30.000Z</published>
    <updated>2019-08-31T09:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单弄了一个比较粗糙的东西</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=528283&auto=0&height=66"></iframe><p>它长这样<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/vue_echarts_vant/gif.gif" alt="show" title>                </div>                <div class="image-caption">show</div>            </figure><br>它在我的github上，喜欢可以点个star<br><a href="https://github.com/HHardyy/vue-ecahrts-vant" target="_blank" rel="noopener">https://github.com/HHardyy/vue-ecahrts-vant</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单弄了一个比较粗糙的东西&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outch
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="echarts" scheme="http://yoursite.com/tags/echarts/"/>
    
      <category term="vant" scheme="http://yoursite.com/tags/vant/"/>
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>react-native</title>
    <link href="http://yoursite.com/2019/08/22/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E8%B7%91%E4%B8%80%E4%B8%AAreact-native/"/>
    <id>http://yoursite.com/2019/08/22/从无到有跑一个react-native/</id>
    <published>2019-08-22T14:30:39.000Z</published>
    <updated>2020-01-13T15:29:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近老大突然提到了原生app开发，所以我。。。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28535311&auto=0&height=66"></iframe><br><a id="more"></a></p><p>所以我想到了react-native、flutter当然还有uni-app，当然这些写出来的app不能直接和原生比，而是只是接近原生的渲染机制，我和一个做了几年安卓原生的前辈交谈过，他认为这种机制更偏向于做一些数据渲染的应用，如果太多动画的话是跟不上原生安卓的体验的。</p><p>在做任何东西之前，先要搭建环境，即使是强无敌的jquery也要先下载jquery源码或者去BootSDN等引外链</p><h3 id="开发的平台"><a href="#开发的平台" class="headerlink" title="开发的平台"></a>开发的平台</h3><p>macOS || Windows || Linux =&gt; iOS || Android</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>搭建之前温馨提示几点：<br>1、需要全程保持“科学上网”，否则能ERROR或者跳网址到你怀疑人生<br>2、因为环境需要，npm的镜像可以设置成淘宝的镜像，否则还是要依赖“科学上网工具”<br>3、不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！<br>4、Node的版本必须大于等于10<br>5、Python的版本必须为 2.x（不支持 3.x）<br>6、JDK的版本必须是1.8（我用的1.7，目前不支持 1.9 及更高版本）。</p><h4 id="必须安装的依赖"><a href="#必须安装的依赖" class="headerlink" title="必须安装的依赖"></a>必须安装的依赖</h4><p>有：Node、React Native命令行工具、Python2 以及JDK和Android Studio（虽然你可以使用任何编辑器来开发应用，但你仍然必须安装 Android Studio来获得编译 Android 应用所需的工具和环境。）</p><p>Node安装是每个前端的标配（略），安装完成后用node -v查看版本号</p><p>Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。安装命令：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn react-native-cli</span><br></pre></td></tr></table></figure></p><p>yarn的镜像也可以设置成淘宝镜像<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="keyword">set</span> registry https://registry.npm.taobao.org --global</span><br><span class="line">yarn config <span class="keyword">set</span> disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure></p><h4 id="Android开发环境"><a href="#Android开发环境" class="headerlink" title="Android开发环境"></a>Android开发环境</h4><blockquote><p>请注意！！！国内用户必须必须必须有稳定的翻墙工具，否则在下载、安装、配置过程中会不断遭遇链接超时或断开，无法进行开发工作。某些翻墙工具可能只提供浏览器的代理功能，或只针对特定网站代理等等，请自行研究配置或更换其他软件。总之如果报错中出现有网址，那么 99% 就是无法正常翻墙。</p></blockquote><p><a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">安装Android Studio</a>,如果科学上网不了的话，即使有安装包安装过程也极大概率出问题，所以这一步先科学上网再继续<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装界面中选择<span class="string">"Custom"</span>选项，确保选中了以下几项：</span><br><span class="line">Android SDK</span><br><span class="line">Android SDK Platform</span><br><span class="line">Performance (Intel ® HAXM) </span><br><span class="line">Android Virtual Device</span><br></pre></td></tr></table></figure></p><p>然后点击”Next”来安装选中的组件。(如果选择框是灰的，你也可以先跳过，稍后再来安装这些组件。),看到欢迎界面就是安装完成了，然后继续下一步</p><h4 id="安装-Android-SDK"><a href="#安装-Android-SDK" class="headerlink" title="安装 Android SDK"></a>安装 Android SDK</h4><blockquote><p>Android Studio默认会安装最新版本的Android SDK。目前编译React Native应用需要的是Android 9(Pie)版本的SDK（注意 SDK 版本不等于终端系统版本，RN目前支持android4.1 以上设备）。你可以在Android Studio的 SDK Manager中选择安装各版本的SDK。</p></blockquote><p>在上面那一步安裝完成的Android Studio的欢迎界面中找到SDK Manager。点击”Configure”，然后就能看到”SDK Manager”。（SDK Manager还可以在Android Studio 的”Preferences”菜单中找到。具体路径是Appearance &amp; Behavior → System Settings → Android SDK。）</p><p>在SDK Manager中选择”SDK Platforms”选项卡，然后在右下角勾选”Show Package Details”。展开Android 9 (Pie)选项，确保勾选了下面这些组件（再次提醒你需要科学上网工具，否则看不到接下来的界面）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Android SDK Platform <span class="number">28</span></span><br><span class="line">Intel x86 Atom_64 System Image（官方模拟器镜像文件，使用非官方模拟器不需要安装此组件）</span><br></pre></td></tr></table></figure></p><p>然后点击”SDK Tools”选项卡，同样勾中右下角的”Show Package Details”。展开”Android SDK Build-Tools”选项，确保选中了React Native 所必须的28.0.3版本。你可以同时安装多个其他版本。</p><p>最后点击”Apply”来下载和安装这些组件。</p><h4 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h4><blockquote><p>React Native 需要通过环境变量来了解你的 Android SDK 装在什么路径，从而正常进行编译。</p></blockquote><p>在系统的环境变量创建一个名为ANDROID_HOME的环境变量（用户变量也可以），指向你的Android SDK所在的目录，也就是C:\你的电脑用户名\AppData\Local\Android\Sdk，这是Android Sdk默认的安装目录（不信的话可以在Android Studio的”Preferences”菜单中查看SDK的路径，具体是Appearance &amp; Behavior → System Settings → Android SDK。弄好之后关闭当前的命令行工具重新打开，新配置的环境变量才生效</p><h4 id="platform-tools目录添加到环境变量Path中"><a href="#platform-tools目录添加到环境变量Path中" class="headerlink" title="platform-tools目录添加到环境变量Path中"></a>platform-tools目录添加到环境变量Path中</h4><p>这个目录默认的路径是c:\Users\你的用户名\AppData\Local\Android\Sdk\platform-tools</p><p>做好了上面这些，接下来就可以开始你想做的了，就是建个项目跑一跑，其实只要上面的那些环境建好了，接下来的步骤都比较顺畅<br>创建一个react-native的项目<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init AwesomeProject</span><br></pre></td></tr></table></figure></p><blockquote><p>可以使用–version参数（注意是两个杠）创建指定版本的项目。例如react-native init MyApp –version 0.44.3。注意版本号必须精确到两个小数点。Windows 用户请注意，请不要在某些权限敏感的目录例如 System32 目录中 init 项目！会有各种权限限制导致不能运行！</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/11.png" alt="建好的目录结构是这样的" title>                </div>                <div class="image-caption">建好的目录结构是这样的</div>            </figure><p>创建好项目之后就可以运行了，运行的顺序也很讲究<br>1、启动Android Studio打开项目文件下面的android下面的app，然后Create Virtual Device创建一台虚拟安卓设备，然后开机<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/1.png" alt="Android Studio" title>                </div>                <div class="image-caption">Android Studio</div>            </figure><br>2、打开了安卓虚拟设备之后启动项目<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd AwesomeProject</span><br><span class="line">react-<span class="keyword">native</span> run-android</span><br></pre></td></tr></table></figure></p><p>如果配置没有问题，你应该可以看到应用自动安装到设备上并开始运行。第一次运行时需要下载大量编译依赖，耗时比较久。此过程严重依赖稳定的翻墙工具，否则将频繁遭遇链接超时和断开，导致无法运行。</p><p>如果运行之后安卓设备打开的界面是爆红的错误，请执行一个npm install将缺失的一些依赖安装上，然后执行react-native start启动项目<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/2.png" alt="start" title>                </div>                <div class="image-caption">start</div>            </figure><br>然后在Android Studio上点击编译并执行的绿色三角按钮，将app跑起来<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/2.jpg" alt="run" title>                </div>                <div class="image-caption">run</div>            </figure></p><p>那项目跑起来之后如何去修改里面的程序，写成自己想要的呢，其实和react一样，它的入口组件也是App.js,简单举个例子，我们改掉里面的小部分内容，其他就保留原样展示<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/code1.png" alt="code1" title>                </div>                <div class="image-caption">code1</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/code2.png" alt="code2" title>                </div>                <div class="image-caption">code2</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/code3.png" alt="code3" title>                </div>                <div class="image-caption">code3</div>            </figure><br>代码改动之后，重新编译然后启动发现app界面的内容没有变化的话，你可能会运行react-native run-android，让它重新打包，接着再react-native start启动，然后发现，App界面还是没有更新。这时候可以执行一下这个命令再启动项目<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --platform android --dev <span class="literal">false</span> --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/reset.png" alt="也就是这样" title>                </div>                <div class="image-caption">也就是这样</div>            </figure><p>如果有index.android.js，那么可以这样做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --platform android --dev <span class="literal">false</span> --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/</span><br></pre></td></tr></table></figure></p><p>之后再运行react-native start，修改的内容就更新了<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/rn/end.png" alt="App" title>                </div>                <div class="image-caption">App</div>            </figure><br>最后再解释一下这个项目的目录结构</p><table><thead><tr><th>名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>android</td><td style="text-align:center">Android项目目录，包含了使用AndroidStudio开发项目的环境配置文件</td></tr><tr><td>ios</td><td style="text-align:center">iOS项目目录，包含了XCode的环境</td></tr><tr><td>node_modules</td><td style="text-align:center">基于node文件依赖系统产生的相关依赖和第三方lib</td></tr><tr><td>index.js</td><td style="text-align:center">ios或android的入口，已经使用index.js代替index.ios.js/index.android.js，android中配置application文件的getJSMainModuleName()配置入口</td></tr><tr><td>app.json</td><td style="text-align:center">app的json文件</td></tr><tr><td>package.json</td><td style="text-align:center">项目基本信息以及依赖信息</td></tr><tr><td>package-lock.json</td><td style="text-align:center">npm install生成的文件，记录当前npm package的信息</td></tr><tr><td>App.js</td><td style="text-align:center">相当于Android的MainActivity，可以根据自己的需要进行修改或者删除（同时要修改index.js的注册的组件入口js文件名）</td></tr><tr><td>.babelrc</td><td style="text-align:center">Babel配置文件，在.babelrc配置文件中，主要是对预设（presets）和插件（plugins）进行配置，因此不同的转译器作用不同的配置项</td></tr><tr><td>.buckconfig</td><td style="text-align:center">Buck的配置文件，buck是Facebook开源的高效构建系统</td></tr><tr><td>.flowconfig</td><td style="text-align:center">Flow的配置文件，flowconfig是是Flow的配置文件</td></tr><tr><td>.gitattributes</td><td style="text-align:center">git配置文件，指定非文本文件的对比合并方式</td></tr><tr><td>.gitignore</td><td style="text-align:center">git配置文件，用于忽略你不想提交到Git上的文件</td></tr><tr><td>.watchmanconfig</td><td style="text-align:center">watchman的配置文件，watchman用于监控文件变化，辅助实现工程修改信息</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近老大突然提到了原生app开发，所以我。。。&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=28535311&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="Python2" scheme="http://yoursite.com/tags/Python2/"/>
    
      <category term="JDK" scheme="http://yoursite.com/tags/JDK/"/>
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常见设计模式</title>
    <link href="http://yoursite.com/2019/08/04/JavaScript%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/04/JavaScript常见设计模式/</id>
    <published>2019-08-03T19:05:36.000Z</published>
    <updated>2020-01-13T15:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>javascript常见设计模式</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=562613275&auto=0&height=66"></iframe><br><a id="more"></a></p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在js中，单例作为一个命名<br>空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p><blockquote><p>比如你买了个新房子，房子如果没有门，就创建一个门，如果有门就可以直接从门走出去，每个门归属于独立的房号，房间的住户可以通过门进行单例通信</p></blockquote><h4 id="模式作用："><a href="#模式作用：" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、模块间通信<br>2、系统中某个类的对象只能存在一个<br>3、保护自己的属性和方法</p><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、注意this的使用<br>2、闭包容易造成内存泄露，不需要的时候干掉<br>3、注意new的成本（继承）<br>举个栗子，页面上6个按钮的分别点击事件，如果用世界上最强的技术$.的话就是这么写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//业务逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#b'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//业务逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#c'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//业务逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#d'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//业务逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#e'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//业务逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#f'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//业务逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这么写的话，如果每个点击按钮的业务逻辑特别复杂，就乱掉了，而且如果$(‘#a’).click(function(){})里头声明了一个变量a=1,$(‘#b’).click(function(){})里面是不可能接收到的，因为a已经被$(‘#a’)给闭包了，所以如果用单例模式来开发这种代码，应该将它归属于不同的命名空间，比如：<br>a、b、c归属于tag1,d、e、f归属于tag2<br>采用单例的实现方式就是这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tag1=&#123;</span><br><span class="line">init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> me=<span class="keyword">this</span></span><br><span class="line">        me.btna=$(<span class="string">'#a'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> me=<span class="keyword">this</span></span><br><span class="line">        me.bina.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            me.test()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    test:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a=<span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tag2=&#123;</span><br><span class="line">init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> me=<span class="keyword">this</span></span><br><span class="line">        me.btna=$(<span class="string">'#d'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    bind:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> me=<span class="keyword">this</span></span><br><span class="line">        me.bina.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            me.test()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    test:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a=<span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>单例通讯的时候先绑定dom<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tag1=&#123;</span><br><span class="line">init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.render()</span><br><span class="line">    <span class="keyword">this</span>.bind()</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tag2=&#123;</span><br><span class="line">init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.render()</span><br><span class="line">    <span class="keyword">this</span>.bind()</span><br><span class="line">    &#125;,</span><br><span class="line">    test:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        tag1.a=<span class="number">6</span>      <span class="comment">//改变tag1里面的a</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>构造函数用于创建特定类型的对象—不仅声明了使用的对象，构造函数还可以接受参数以便第一次创建对象的时候设置对象的成员值。可以自定义自己的构造函数，然后在里面声明自定义类型<br>对象的属性或方法。</p><p>在js中，构造函数通常是认为用来实现实例的，js没有类的概念，但是有特殊的构造函数。通过new关键字来调用自定义的构造函数，在构造函数内部，this关键字引用的是新创建的对象</p><h4 id="模式作用：-1"><a href="#模式作用：-1" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、用于创建特定类型的对象<br>2、第一次声明的时候给对象赋值<br>3、自己声明构造函数，赋予属性和方法</p><h4 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、声明函数的时候处理业务逻辑<br>2、区分和单例的区别，配合单例实现初始化<br>3、构造函数大写字母开头<br>4、注意new的成本<br>代码实现其实就是构造函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hardy</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> hardy))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> hardy()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.age=age?age:<span class="string">'90'</span></span><br><span class="line">    <span class="keyword">this</span>.create=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> har=hardy(<span class="number">18</span>)</span><br><span class="line"><span class="keyword">let</span> har1=hardy1(<span class="number">19</span>)</span><br><span class="line"><span class="built_in">console</span>.log(har)   <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(har1)   <span class="comment">//19</span></span><br></pre></td></tr></table></figure></p><p>单例模式与构造函数结合<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A=&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span>：<span class="title">hardy</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> hardy))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> hardy()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.age=age?age:<span class="string">'90'</span></span><br><span class="line">        <span class="keyword">this</span>.create=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> B=&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span>：<span class="title">hardy</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> hardy))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> hardy()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.age=age?age:<span class="string">'90'</span></span><br><span class="line">        <span class="keyword">this</span>.create=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> har=<span class="keyword">new</span> AA.hardy(<span class="number">18</span>)</span><br><span class="line"><span class="keyword">let</span> har1=<span class="keyword">new</span> BB.hardy1(<span class="number">19</span>)</span><br><span class="line"><span class="built_in">console</span>.log(har)   <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(har1)   <span class="comment">//19</span></span><br></pre></td></tr></table></figure></p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>建造者模式可以将一个复杂对象的构建与其表示相分离，是的同样的构建过程可以创建不同的表示。也就是说如果我们用了建造者模式，那么用户就需要指定需要建造的类型就可以得到它们，建造者模式实际就是一个指挥者，一个建造者，一个使用指挥者调用具体建造者工作得出结果的客户。</p><p>建造者模式主要用于“分步骤构建一个复杂的对象”，在这其中“分步骤”是一个稳定的算法，而复杂对象的各个部分则经常变化</p><p>比如大家再熟悉不过的$.ajax，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;        <span class="comment">//这里的$.ajax就是建造者</span></span><br><span class="line">    url:<span class="string">'hardy.php'</span>,</span><br><span class="line">    succ:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    err:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>假设：<br>1、产出的东西是房子<br>2、baogongtou调用工人进行开工，而且他要很清楚工人们的某一个大项<br>3、工人是盖房子的工人可以建造卧室、客厅、厨房<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">House</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.room=<span class="string">""</span></span><br><span class="line"><span class="keyword">this</span>.living_room=<span class="string">""</span></span><br><span class="line"><span class="keyword">this</span>.kitchen=<span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foreman</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.gaifangzi=<span class="function"><span class="keyword">function</span>(<span class="params">worker</span>)</span>&#123;</span><br><span class="line">    worker.make_room()</span><br><span class="line">    worker.make_livingroom()</span><br><span class="line">    worker.make_kitchen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Worker</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.make_room=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'卧室我建好了'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.make_livingroom=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'客厅我建好了'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.make_kitchen=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'厨房我建好了'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.complate=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _house=<span class="keyword">new</span> House()</span><br><span class="line">        _house.room=<span class="string">"ok"</span></span><br><span class="line">        _house.living_room=<span class="string">"ok"</span></span><br><span class="line">        _house.kitchen=<span class="string">"ok"</span></span><br><span class="line">        <span class="keyword">return</span> _house</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> worker=<span class="keyword">new</span> Worker()</span><br><span class="line"><span class="keyword">let</span> foreman=<span class="keyword">new</span> Foreman()</span><br><span class="line">foreman.gaifangzi(worker)</span><br><span class="line"><span class="keyword">let</span> myhouse=worker.complate()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(myhouse))</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/make4.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型（抽象工厂）</p><p>这个模式十分有用，尤其是创建对象的流程赋值的时候，比如依赖于很多设置文件等。并且，你会经常在程序里看到工厂方法，用于让子类类定义需要创建的对象类型</p><h4 id="模式作用：-2"><a href="#模式作用：-2" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、对象的构建十分复杂<br>2、需要依赖具体的环境创建不同的实例<br>3、处理大量具有相同属性的小对象</p><h4 id="注意事项：-2"><a href="#注意事项：-2" class="headerlink" title="注意事项："></a>注意事项：</h4><p>不能滥用工厂，有时候仅仅是给代码增加复杂度<br>简单工厂<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> XMLHttpFactory=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">XMLHttpFactory.createXMLHttp=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> XMLHttp=<span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">XMLHttp=<span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line">XMLHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> XMLHttp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> AjaxHander=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> XMLHttp=XMLHttpFactory.createXMLHttp()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抽象工厂<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpFactory.prototype=&#123;</span><br><span class="line">createFactory:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'this is an abstract class'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> XHRHander=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">XMLHttpFactory.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">XHRHander.prototype=<span class="keyword">new</span> XMLHttpFactory()</span><br><span class="line">XHRHander.prototype.constructor=XHRHander</span><br><span class="line"></span><br><span class="line">XHRHander.prototype.createFactory=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> XMLHttp=<span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">    XMLHttp=<span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject(<span class="string">"Microsoft.XMLHTTP)&#123;</span></span><br><span class="line"><span class="string">        XMLHttp=new ActiveXObject('Microsoft.XMLHTTP')</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return XMLHttp</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观模式（Facade）为子系统中的一组接口提供了一个一致的界面，此模块定义了一个高层接口，这个接口使得这一子系统更加容易使用。<br>外观模式不仅简化类中的接口，而且对接口与调用者也进行了解耦。外观模式经常被认为开发者必备，它可以将一些复杂操作封装起来，并创建一个简单的接口用于调用</p><h4 id="模式作用：-3"><a href="#模式作用：-3" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、在设计初期，应该要意识地将不同的两个层分离，比如经典的三层结构。<br>2、在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观可以提供一个简单的接口，减少他们之间的依赖。<br>3、在维护一个遗留的大型系统时，为系统开发一个外观Facade类，为设计粗糙和高度复杂的遗留代码提供比较清晰的接口，让新系统和Facade对象交互。</p><h4 id="注意事项：-3"><a href="#注意事项：-3" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、外观模式被开发者连续使用时会产生一定的性能问题，因为在每次调用时都要检测功能的可用性</p><blockquote><p>代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stopEvent=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;   <span class="comment">//阻止冒泡和默认事件</span></span><br><span class="line">e.stopPropagation()</span><br><span class="line">e.preventDefault()</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">'.btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">stopEvent(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理，顾名思义就是帮助别人做事，GoF对代理模式的定义如下：<br>代理模式（Proxy），为其他对象提供一种代理以控制对这个对象的访问。<br>代理模式使得代理对象控制具体对象的引用。代理几乎可以是任何对象：文件，资源，内存中的对象，或者是一些难以复制的东西</p><h4 id="模式作用：-4"><a href="#模式作用：-4" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、远程代理（一个对象将不同空间的对象进行局部代理）<br>2、虚拟代理（根据需要创建开销很大的对象如渲染网页暂时用占位符代替真图）<br>3、安全代理（控制真实对象的访问权限）<br>4、智能指引（调用对象代理处理另外一些事情如垃圾回收机制）</p><h4 id="注意事项：-4"><a href="#注意事项：-4" class="headerlink" title="注意事项："></a>注意事项：</h4><p>不能滥用代理，有时候仅仅是给代码增加复杂度</p><blockquote><p>代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maijia</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=<span class="string">'小明'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zhongjie</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">zhongjie.prototype.maifang=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">new</span> fangdong(<span class="keyword">new</span> maijia()).maifang(<span class="string">'300'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fangdong</span>(<span class="params">maijia</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maijia_name=maijia.name</span><br><span class="line"><span class="keyword">this</span>.maifang=<span class="function"><span class="keyword">function</span>(<span class="params">money</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`收到<span class="subst">$&#123;<span class="keyword">this</span>.maijia_name&#125;</span>  <span class="subst">$&#123;money&#125;</span>万元`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">new</span> zhongjie).maifang()</span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式又叫发布订阅者模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化的时候就会通知所有的观察者对象，使得它们能够自动更新自己</p><h4 id="模式作用：-5"><a href="#模式作用：-5" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、支持简单的广播通信，自动通知所有已经订阅过的对象。<br>2、页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性<br>3、目标对象与观察者之间的抽象耦合关系能够扩展以及重用</p><h4 id="注意事项：-5"><a href="#注意事项：-5" class="headerlink" title="注意事项："></a>注意事项：</h4><p>监听要在触发之前</p><blockquote><p>代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在ES5中主要是通过Object.defineProperty方法定义对象属性的设置和获取，并在进行设置时执行相关的处理函数</span></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义值改变时的处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">oldVal, newVal</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 其他处理逻辑...</span></span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'name属性的值从 '</span>+ oldVal +<span class="string">' 改变为 '</span> + newVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义name属性及其set和get方法</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(targetObj, <span class="string">'name'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(val) &#123;</span><br><span class="line">        <span class="comment">//调用处理函数</span></span><br><span class="line">        observer(name, val)</span><br><span class="line">        name = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">targetObj.name = <span class="string">'Martin'</span>;</span><br><span class="line">targetObj.name = <span class="string">'Lucas'</span>;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'targetObj:'</span>, targetObj)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">name属性的值从 Martin 改变为 Lucas</span><br><span class="line">targetObj: &#123;<span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Lucas'</span>&#125;</span><br></pre></td></tr></table></figure><p>ES6<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TargetObj</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> name(val) &#123;</span><br><span class="line">        observer(name, val);</span><br><span class="line">        name = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> targetObj = <span class="keyword">new</span> TargetObj(<span class="number">1</span>, <span class="string">'Martin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义值改变时的处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">oldVal, newVal</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 其他处理逻辑...</span></span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'name属性的值从 '</span>+ oldVal +<span class="string">' 改变为 '</span> + newVal);</span><br><span class="line">&#125;</span><br><span class="line">targetObj.name = <span class="string">'Lucas'</span>;</span><br><span class="line"><span class="built_in">console</span>.info(targetObj)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">name属性的值从 Martin 改变为 Lucas</span><br><span class="line">targetObj: &#123;<span class="attr">age</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Lucas'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>proxy Api<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TargetObj</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> targetObj = <span class="keyword">new</span> TargetObj(<span class="number">1</span>, <span class="string">'Martin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> observerProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(targetObj, &#123;</span><br><span class="line">    <span class="keyword">set</span>(target, property, value, reciever) &#123;</span><br><span class="line">        <span class="keyword">if</span> (property === <span class="string">'name'</span>) &#123;</span><br><span class="line">            observer(target[property], value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Reflect</span>.set(target, property, value, reciever);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义值改变时的处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">oldVal, newVal</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 其他处理逻辑...</span></span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`name属性的值从 <span class="subst">$&#123;oldVal&#125;</span> 改变为 <span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">observerProxy.name = <span class="string">'Lucas'</span>;</span><br><span class="line"><span class="built_in">console</span>.info(targetObj);</span><br></pre></td></tr></table></figure></p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式定义了算法家族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户</p><h4 id="模式作用：-6"><a href="#模式作用：-6" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、所有的这些算法都是做相同的事情，只是实现不同<br>2、以相同的方式调用所有的方法，减少了各种算法类与使用算法类之间的耦合<br>3、单独定义算法类，也方便了单元测试</p><h4 id="注意事项：-6"><a href="#注意事项：-6" class="headerlink" title="注意事项："></a>注意事项：</h4><p>不仅可以封装算法，也可以用来封装几乎任何类型的规则，是要在分析过程中需要在不同时间应用不同的业务规则，就可以考虑是要策略模式来处理各种变化</p><blockquote><p>代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如验证一个电话号码输入</span></span><br><span class="line"><span class="keyword">let</span> val = <span class="built_in">document</span>.querySelector(<span class="string">'#input'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> valLint=&#123;</span><br><span class="line">isEmpty:<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> boolean</span><br><span class="line">    &#125;,</span><br><span class="line">    isTel:<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boolean</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这是一个策略对象，也可以将所用的所有策略分别写入valLint里面，然后封装成一个.js文件，在需要用到策略的时候进行require然后传值判断，直接得到需要的boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用策略</span></span><br><span class="line"><span class="keyword">let</span> isEmpty=valLint.isEmpty(val)</span><br><span class="line"><span class="keyword">let</span> isTel=valLint.isTel(val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!isEmpty&amp;&amp;isTel)&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>命令模式(Command)的定义是：用来对方法调用进行参数化处理和传送，经过这样处理过的方法调用可以在任何需要的时候执行。也就是说该模式旨在将函数的调用、请求和操作封装成一个单一的对象，然后对这个对象进行一系列的处理。它也可以用来消除调用操作的对象和实现操作的对象之间的耦合。这为各种具体的类的更换带来了极大的灵活性。</p><h4 id="模式作用：-7"><a href="#模式作用：-7" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、将函数的封装、请求、调用结合为一体<br>2、调用具体的函数解耦命令对象与接收对象<br>3、提高程序模块化的灵活性</p><h4 id="注意事项：-7"><a href="#注意事项：-7" class="headerlink" title="注意事项："></a>注意事项：</h4><p>不需要接口一致，直接调用函数即可，以免造成浪费</p><blockquote><p>代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lian=&#123;&#125;</span><br><span class="line"></span><br><span class="line">lian.bubing=<span class="function"><span class="keyword">function</span>(<span class="params">bu_num</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`步兵<span class="subst">$&#123;bu_num&#125;</span>开始战斗`</span>)</span><br><span class="line">&#125;</span><br><span class="line">lian.paobing=fnuction(pao_num)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`炮兵<span class="subst">$&#123;pao_num&#125;</span>开始战斗`</span>)</span><br><span class="line">&#125;</span><br><span class="line">lian.lianzhang=<span class="function"><span class="keyword">function</span>(<span class="params">mingling</span>)</span>&#123;</span><br><span class="line">lian[mingling.type](mingling.num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发布命令</span></span><br><span class="line">lian.lianzhang(&#123;</span><br><span class="line">type:<span class="string">'bubing'</span>,</span><br><span class="line">num:<span class="number">100</span></span><br><span class="line">&#125;)</span><br><span class="line">lian.lianzhang(&#123;</span><br><span class="line">type:<span class="string">'paobing'</span>,</span><br><span class="line">num:<span class="number">50</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//步兵100开始战斗，炮兵50开始战斗</span></span><br></pre></td></tr></table></figure><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式提供一种方法顺序访问一个聚合对象中各个元素，而又不需要暴露该方法中的内部表示</p><h4 id="模式作用：-8"><a href="#模式作用：-8" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作（比如jquery中的$.each()）<br>2、集合内部尝尝变化各异，不想暴露其内部结构，但是又想让客户代码透明地访问其中的元素，就可以用迭代器模式。</p><h4 id="注意事项：-8"><a href="#注意事项：-8" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、一般的迭代，至少需要有2个方法，hasNext()和Next()，这样做才做到遍历所有的对象。<br>2、遍历的同时更改迭代器所在的集合结构可能会导致问题（比如c#的foreach里不允许修改item）</p><blockquote><p>代码：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/iterator10.JPG" alt="code" title>                </div>                <div class="image-caption">code</div>            </figure><h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><p>职责链模式是使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连城一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。<br>（举个栗子：客户需要开发一个系统，于是联系大boss，大boss肯定不会自己写代码，于是大boss把任务指派给项目经理，项目经理自己有几率不写，于是指派给coder来写代码,在这个过程中，客户没有直接和coder说，而是通过大boss层层指派，形成一条链，并沿着这条链传递该任务，上面说的对象指的就是我们这些coder）</p><p>链中收到请求的对象要么亲自处理它，要么转发给下一个候选者。提交方并不明确有多少个对象会处理它，任一候选者都可以响应的请求，可以在运行时刻决定哪些候选者参与到链中。</p><blockquote><p>代码：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/chain_of_resibilities11.jpg" alt="“职责链实现”" title>                </div>                <div class="image-caption">“职责链实现”</div>            </figure><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式（Adapter）是将一个类（对象）的接口（方法或属性）转换成客户希望的另外一个接口（方法或属性），适配器模式使得原本由<br>于接口不兼容而不能一起工作的那些类（对象）可以一起工作。</p><h4 id="模式作用：-9"><a href="#模式作用：-9" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、使用一个已经存在的对象，但其方法或接口不符合你的要求<br>2、创建一个可复用的对象，该对象可以与其他不相关或不可见的对象协同工作<br>3、使用已经存在的一个或多个对象，但是不能继承已匹配它的接口</p><h4 id="注意事项：-9"><a href="#注意事项：-9" class="headerlink" title="注意事项："></a>注意事项：</h4><p>与代理模式的区别，代理模式是不改变原接口适配时原接口不符合规范</p><blockquote><p>举个栗子：假如本来你做的一个项目里头有一个Object</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">test:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">go:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">a.test()</span><br><span class="line"><span class="comment">//这是你原来写的东西，然后假如项目重构，别人嫌弃你的静态方法，于是写成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.test=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">b.prototype.go=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//别人重构之后你所有调a的地方都要写成let a=new b()，然后改着改着自己就乱了</span></span><br></pre></td></tr></table></figure><blockquote><p>代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在别人重构之后，我们可以这样</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Adapter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> h=<span class="keyword">new</span> b()</span><br><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    test:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        h.test()</span><br><span class="line">        &#125;,</span><br><span class="line">        go:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            h.go()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=Adapter()</span><br><span class="line">a.test()</span><br><span class="line">a.go()</span><br></pre></td></tr></table></figure><p>这样就迁移回来了，假如在参加一个比较大的项目的时候有功能一样的a.js和b.js，一般来说要判断<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(...)&#123;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'a.js'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(...)&#123;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'b.js'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实没必要，因为可以封装一个c.js的适配器，然后暴露a,b相应的接口对外，在a,b接口判断相应的逻辑，然后处理a.js和b.js</p><h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><p>模板方法(TemplateMethod)定义了一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>模板方法是一种代码复用的基本技术，在类库中尤为重要，因为他们提取了类库中的公共行为。模板方法导致一种反向的控制结构，这种结构就是传说中的”好莱坞法则”，即”别找我们，我们找你”，这指的是父类调用一个类的操作，而不是相反。具体体现是面向对象编程语言里面的抽象类（以及其中的抽象方法），以及继承该抽象类（和抽象方法）的子类</p><h4 id="模式作用：-10"><a href="#模式作用：-10" class="headerlink" title="模式作用："></a>模式作用：</h4><p>1、一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现<br>2、各子类中公共的行为应该被提取出来并集中到一个公共父类中规避代码重复，不同之处分离为新的操作，最后，用一个钓鱼这些新操作的模板方法来替换这些不同的代码<br>3、控制子类扩展，模板方法只在特定点调用”hook”，这样就允许在这些点进行扩展</p><h4 id="注意事项：-10"><a href="#注意事项：-10" class="headerlink" title="注意事项："></a>注意事项：</h4><p>和策略模式不同，模板方法使用继承来改变算法的一部分，而策略模式使用委托来改变整个算法</p><blockquote><p>实现一个游戏流程：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Process</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Process.prototype.start=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">confirm(<span class="string">'开始游戏'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Process.prototype.loading=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'loading...'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Process.prototype.out=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">confirm(<span class="string">'结束游戏'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Angry_birds</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Angry_birds.prototype=<span class="keyword">new</span> Process()</span><br><span class="line">Angry_birds.start()</span><br></pre></td></tr></table></figure><p>上述代码=&gt;建立一个游戏流程的模板，然后有一个愤怒的小鸟的游戏直接继承了该模板，有其他游戏也可以直接继承该游戏模板</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型模式（prototype）是指用原型实例指向创建对象的种类，并且通过拷贝这些原型创建新的对象，这里的prototype不是js里面的prototype，而是一个原型的英文单词，只不过js里面的prototype刚好符合这种原型模式，真正在设计模式里面是有原型模式这样的概念的，所以不能把js里面的prototype和原型模式prototype语法混淆。</p><p>对于原型模式，可以利用JavaScript特有的原型继承特性去创建对象的方式，真正的原型继承是作为最新版的ECMAScript5标准提出的，使用Object.create方法来创建这样的对象，比如Object.create(prototype,optionalDescriptorObjects)</p><h4 id="模式作用：-11"><a href="#模式作用：-11" class="headerlink" title="模式作用："></a>模式作用：</h4><p>原型对象本身就是有效地利用了每个构造器创建的对象</p><h4 id="注意事项：-11"><a href="#注意事项：-11" class="headerlink" title="注意事项："></a>注意事项：</h4><p>1、注意的依然是浅拷贝和深拷贝的问题，免得出现引用问题<br>2、现有的文献里查看原型模式的定义，没有针对JavaScript的，你可能发现很多讲解的都是关于类的，但是现实情况是基于原型继承 的JavaScript完全避免了类（class）的概念</p><blockquote><p>代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myobj=&#123;</span><br><span class="line">        str:<span class="string">'mystring'</span>,</span><br><span class="line">        num:<span class="number">1</span>,</span><br><span class="line">        myarr:[</span><br><span class="line">            <span class="number">30</span>,</span><br><span class="line">            &#123;<span class="attr">arrgo</span>:<span class="string">'i am arr'</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        myobj1:&#123;</span><br><span class="line">            innerobj:&#123;</span><br><span class="line">                test:<span class="number">25</span></span><br><span class="line">            &#125;,</span><br><span class="line">            innerstr:<span class="string">'myobjInnerstr'</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clone=<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obt=&#123;&#125;,k</span><br><span class="line">    <span class="keyword">for</span>(k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        obt[k]=obj[k]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result=clone(myobj)</span><br><span class="line"><span class="built_in">console</span>.log(myobj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'----------------------------'</span>)</span><br><span class="line">result.myobj1.innerstr=<span class="string">""</span></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="built_in">console</span>.log(myobj)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/14-1.png" alt=".log" title>                </div>                <div class="image-caption">.log</div>            </figure><p>克隆之后修改了myobj1里面的innerstr，然而原来的myobj里面的myobj1[innerstr]也改变了，这是因为受到了引用的影响，可以重写一下clone<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clone=<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obt=&#123;&#125;,k,b</span><br><span class="line">    <span class="keyword">if</span>((b=(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>))||obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">        obt=b?[]:&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span>(k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>((obj[k] <span class="keyword">instanceof</span> <span class="built_in">Array</span>)||(obj[k] <span class="keyword">instanceof</span> <span class="built_in">Object</span>))&#123;</span><br><span class="line">                obt[k]=clone(obj[k])</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                obt[k]=obj[k]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/14-2.png" alt=".log" title>                </div>                <div class="image-caption">.log</div>            </figure><p>也可以用Object.create来实现，但是结构打印不出来,值可以拿到，这个是为什么我后续再研究一下，毕竟凌晨4点了。。。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myobj=&#123;</span><br><span class="line">        str:<span class="string">'mystring'</span>,</span><br><span class="line">        num:<span class="number">1</span>,</span><br><span class="line">        myarr:[</span><br><span class="line">            <span class="number">30</span>,</span><br><span class="line">            &#123;<span class="attr">arrgo</span>:<span class="string">'i am arr'</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        obj:&#123;</span><br><span class="line">            innerobj:&#123;</span><br><span class="line">                test:<span class="number">25</span></span><br><span class="line">            &#125;,</span><br><span class="line">            innerstr:<span class="string">'myobjInnerstr'</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> m=<span class="built_in">Object</span>.create(myobj)</span><br><span class="line"><span class="built_in">console</span>.log(myobj)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------'</span>)</span><br><span class="line">m.num=<span class="number">666</span></span><br><span class="line"><span class="built_in">console</span>.log(m.num)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myobj)</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsantd/14-3.png" alt=".log" title>                </div>                <div class="image-caption">.log</div>            </figure><p>！！！总之！！！！！！不要为了设计模式而设计模式！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript常见设计模式&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=562613275&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="深拷贝" scheme="http://yoursite.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>前端架构</title>
    <link href="http://yoursite.com/2019/07/24/%E6%B5%85%E8%B0%88%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2019/07/24/浅谈前端架构/</id>
    <published>2019-07-23T16:59:39.000Z</published>
    <updated>2019-07-24T15:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>阿里前辈的经验</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1297742771&auto=0&height=66"></iframe><br><a id="more"></a><br><a href="https://blog.csdn.net/qq20004604/article/details/70480932" target="_blank" rel="noopener">‘中小型项目前端架构浅谈’</a><br><a href="https://blog.csdn.net/qq20004604/article/details/90575092" target="_blank" rel="noopener">‘大型项目前端架构浅谈’</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里前辈的经验&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=1297742771&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端架构" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>React16.6配置代理&amp;style私有</title>
    <link href="http://yoursite.com/2019/06/22/React16-6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2019/06/22/React16-6配置代理/</id>
    <published>2019-06-22T09:56:19.000Z</published>
    <updated>2020-03-19T07:38:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>你或许想知道的新代理</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=426341675&auto=0&height=66"></iframe><br><a id="more"></a></p><p>在脚手架中，一般配置代理会在package.json中写上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>:<span class="string">"url"</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="string">"name"</span>: <span class="string">"hardy"</span>,</span><br><span class="line"><span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line"><span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"proxy"</span>:<span class="string">"url"</span>,</span><br></pre></td></tr></table></figure></p><p>这是配置单个代理的时候的情况，假如需要配置多个代理就写成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"name"</span>: <span class="string">"proxy"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"proxy"</span>:&#123;</span><br><span class="line">    <span class="string">"/api"</span>: &#123;</span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"url"</span>,</span><br><span class="line">        <span class="string">"ws"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">  <span class="string">"/apb"</span>: &#123;</span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"url"</span>,</span><br><span class="line">        <span class="string">"ws"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>但是如果在react16.6中这样使用，项目运行的时候会报错，提示不允许Object<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span> <span class="keyword">in</span> package.json must be a string</span><br></pre></td></tr></table></figure></p><p>而且在react16.6中，上面的配置已经解决不了代理问题了，这里我亲测了一个极简的demo，用node简单写一个在3001端口返回简单数据的接口，然后用16的脚手架构建了一个初级应用，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/nodemock.JPG" alt="nodemock" title>                </div>                <div class="image-caption">nodemock</div>            </figure><br>然后用react脚手架创建一个应用，接着在App这个组件中写一个请求<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/easyget.JPG" alt="easyget" title>                </div>                <div class="image-caption">easyget</div>            </figure><br>请求之后，打开控制台发现network中确实已经发出了请求，并且有了返回值<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/mocked.png" alt="mocked" title>                </div>                <div class="image-caption">mocked</div>            </figure><br>但是打印出来是这样的<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/cors.JPG" alt="cors" title>                </div>                <div class="image-caption">cors</div>            </figure><br>在react16.6中，create-react-app使用了webpack4.0，如果proxy不是字符串的话，是不能够在package.json中直接配置，并且会报错，其实在脚手架的配置文件中是可以找到配置代理的地方的，比如翻一下这个脚手架的webpack配置文件就发现了这个<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/1.JPG" alt="setupProxy.*" title>                </div>                <div class="image-caption">setupProxy.*</div>            </figure><br>说明在src这个目录下面可以创建一个名为setupProxy的文件用来写代理，<a href="https://facebook.github.io/create-react-app/docs/getting-started" target="_blank" rel="noopener">这个在官网也有说明</a><br>解决方案就是使用http-proxy-middleware管理包来解决代理问题<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/install.JPG" alt="install" title>                </div>                <div class="image-caption">install</div>            </figure><br>根据脚手架中webpack配置文件中得到的信息，在src下面创建setupProxy.js文件，然后写入代理<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/thiscode.JPG" alt="install" title>                </div>                <div class="image-caption">install</div>            </figure><br>写完之后重启服务，代理成功<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/success.JPG" alt="install" title>                </div>                <div class="image-caption">install</div>            </figure><br><a href="https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development#docsNav" target="_blank" rel="noopener">更加详细戳这里</a>   </p><p>@2020-3-19更新<br>现在你使用上面的那种写法可能会报错:proxy is not a function，这是因为版本升级导致的，现在的用法应该是这样<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/createProxyMiddleware.jpg" alt="createProxyMiddleware" title>                </div>                <div class="image-caption">createProxyMiddleware</div>            </figure></p><h3 id="scoped-amp-amp-styled-components"><a href="#scoped-amp-amp-styled-components" class="headerlink" title="scoped&amp;&amp;styled-components"></a>scoped&amp;&amp;styled-components</h3><p>在index.js引入index.css的时候假如index.css里面有个.hardy,那么在APP组件里面的div使用ClassName=’hardy’也会生效。</p><blockquote><p>在vue组件中，在style标签上添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的，这是一个非常好的机制。但是在实际业务中我们往往会对公共组件样式做细微的<br>调整，如果添加了scoped属性，那么样式将会变得不易修改。</p></blockquote><p>在react中我们可以使用一个依赖叫styled-components<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install styled-components</span><br></pre></td></tr></table></figure></p><p>来实现css的私有<br>举例个小栗子（reset统一不同内核浏览器的标签）：<br>1、安装styled-components<br>2、把index.css改成style.js<br>然后在style.js中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; injectGlobal &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line">injectGlobal <span class="string">`</span></span><br><span class="line"><span class="string">    body&#123;background:red&#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><p>在早一点的版本中，这么写是没问题的，body应该会变红，但是<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/styled-components.JPG" alt="error" title>                </div>                <div class="image-caption">error</div>            </figure><br>原因是：styled-components 4.x版本将原来的injectGlobal方法用createGlobalStyle替换了。createGlobalStyle是这么用的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//style.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;createGlobalStyle&#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GlobalStyle=createGlobalStyle <span class="string">`</span></span><br><span class="line"><span class="string">    body&#123;</span></span><br><span class="line"><span class="string">      background:red;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> React,&#123;fragments&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;GlobalStyle&#125; <span class="keyword">from</span> <span class="string">'./style.js'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;fragments&gt;</span><br><span class="line">  &lt;GlobalStyle/&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/fragments&gt;</span></span><br><span class="line"><span class="regexp">  , document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react166/red.JPG" alt="succ" title>                </div>                <div class="image-caption">succ</div>            </figure><p>重置的话写成这样就可以了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createGlobalStyle&#125; <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> GlobalStyle=createGlobalStyle <span class="string">`</span></span><br><span class="line"><span class="string">    html, body, div, span, applet, object, iframe,</span></span><br><span class="line"><span class="string">    h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span></span><br><span class="line"><span class="string">    a, abbr, acronym, address, big, cite, code,</span></span><br><span class="line"><span class="string">    del, dfn, em, img, ins, kbd, q, s, samp,</span></span><br><span class="line"><span class="string">    small, strike, strong, sub, sup, tt, var,</span></span><br><span class="line"><span class="string">    b, u, i, center,</span></span><br><span class="line"><span class="string">    dl, dt, dd, ol, ul, li,</span></span><br><span class="line"><span class="string">    fieldset, form, label, legend,</span></span><br><span class="line"><span class="string">    table, caption, tbody, tfoot, thead, tr, th, td,</span></span><br><span class="line"><span class="string">    article, aside, canvas, details, embed, </span></span><br><span class="line"><span class="string">    figure, figcaption, footer, header, hgroup, </span></span><br><span class="line"><span class="string">    menu, nav, output, ruby, section, summary,</span></span><br><span class="line"><span class="string">    time, mark, audio, video &#123;</span></span><br><span class="line"><span class="string">      margin: 0;</span></span><br><span class="line"><span class="string">      padding: 0;</span></span><br><span class="line"><span class="string">      border: 0;</span></span><br><span class="line"><span class="string">      font-size: 100%;</span></span><br><span class="line"><span class="string">      font: inherit;</span></span><br><span class="line"><span class="string">      vertical-align: baseline;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="string">    article, aside, details, figcaption, figure, </span></span><br><span class="line"><span class="string">    footer, header, hgroup, menu, nav, section &#123;</span></span><br><span class="line"><span class="string">      display: block;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    body &#123;</span></span><br><span class="line"><span class="string">      line-height: 1;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    ol, ul &#123;</span></span><br><span class="line"><span class="string">      list-style: none;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    blockquote, q &#123;</span></span><br><span class="line"><span class="string">      quotes: none;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    blockquote:before, blockquote:after,</span></span><br><span class="line"><span class="string">    q:before, q:after &#123;</span></span><br><span class="line"><span class="string">      content: '';</span></span><br><span class="line"><span class="string">      content: none;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    table &#123;</span></span><br><span class="line"><span class="string">      border-collapse: collapse;</span></span><br><span class="line"><span class="string">      border-spacing: 0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你或许想知道的新代理&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=426341675&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="React16.6" scheme="http://yoursite.com/tags/React16-6/"/>
    
      <category term="create-react-app" scheme="http://yoursite.com/tags/create-react-app/"/>
    
      <category term="proxy" scheme="http://yoursite.com/tags/proxy/"/>
    
      <category term="scoped" scheme="http://yoursite.com/tags/scoped/"/>
    
      <category term="css私有" scheme="http://yoursite.com/tags/css%E7%A7%81%E6%9C%89/"/>
    
  </entry>
  
  <entry>
    <title>根据经纬度计算两点间距</title>
    <link href="http://yoursite.com/2019/06/15/%E6%A0%B9%E6%8D%AE%E7%BB%8F%E7%BA%AC%E5%BA%A6%E8%AE%A1%E7%AE%97%E4%B8%A4%E7%82%B9%E9%97%B4%E8%B7%9D/"/>
    <id>http://yoursite.com/2019/06/15/根据经纬度计算两点间距/</id>
    <published>2019-06-15T07:37:32.000Z</published>
    <updated>2020-01-13T15:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>打卡是很多人每天都要做两次的事情，钉钉很多人都用过，但是应该怎么判断你的位置可不可以打卡呢</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=35476986&auto=0&height=66"></iframe><br><a id="more"></a></p><blockquote><p>我最近在做一个打卡的工具，简略它就是设置一个打卡的地点，允许打卡的范围等，然后提醒某个团体进行打卡，但是只能在设定的范围内打卡，不在范围或者不在打卡时间则打卡失败，因为源代码和软件是公司的东西，这里就写一个大家都玩的小例子来计算一下经纬度间的距离。</p></blockquote><h3 id="计算距离主要需要的数据就是"><a href="#计算距离主要需要的数据就是" class="headerlink" title="计算距离主要需要的数据就是"></a>计算距离主要需要的数据就是</h3><p>1、设置的活动地点的经纬度<br>2、打卡者当前位置的经纬度（这个经纬度有可能会改变，因为打卡者有可能在移动，或者是在没进入范围的时候发起的打卡，避免进入范围之后打卡失败）<br>得到上面1、2的数据之后，就可以根据计算出的距离≤设置的打卡范围（100米，200米，500米等），则打卡成功<br>3、地球半径<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/earch_juli/1.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> PI = <span class="built_in">Math</span>.PI;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDistance</span>(<span class="params">lat1,lng1,lat2,lng2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = getRad((lat1 + lat2)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> g = getRad((lat1 - lat2)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> l = getRad((lng1 - lng2)/<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sg = <span class="built_in">Math</span>.sin(g);</span><br><span class="line">    <span class="keyword">var</span> sl = <span class="built_in">Math</span>.sin(l);</span><br><span class="line">    <span class="keyword">var</span> sf = <span class="built_in">Math</span>.sin(f);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> s,c,w,r,d,h1,h2;</span><br><span class="line">    <span class="keyword">var</span> a = EARTH_RADIUS;</span><br><span class="line">    <span class="keyword">var</span> fl = <span class="number">1</span>/<span class="number">298.257</span>;</span><br><span class="line">    </span><br><span class="line">    sg = sg*sg;</span><br><span class="line">    sl = sl*sl;</span><br><span class="line">    sf = sf*sf;</span><br><span class="line">    </span><br><span class="line">    s = sg*(<span class="number">1</span>-sl) + (<span class="number">1</span>-sf)*sl;</span><br><span class="line">    c = (<span class="number">1</span>-sg)*(<span class="number">1</span>-sl) + sf*sl;</span><br><span class="line">    </span><br><span class="line">    w = <span class="built_in">Math</span>.atan(<span class="built_in">Math</span>.sqrt(s/c));</span><br><span class="line">    r = <span class="built_in">Math</span>.sqrt(s*c)/w;</span><br><span class="line">    d = <span class="number">2</span>*w*a;</span><br><span class="line">    h1 = (<span class="number">3</span>*r <span class="number">-1</span>)/<span class="number">2</span>/c;</span><br><span class="line">    h2 = (<span class="number">3</span>*r +<span class="number">1</span>)/<span class="number">2</span>/s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> d*(<span class="number">1</span> + fl*(h1*sf*(<span class="number">1</span>-sg) - h2*(<span class="number">1</span>-sf)*sg));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRad</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d*PI/<span class="number">180.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以是这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getDistance:<span class="function"><span class="keyword">function</span>(<span class="params">lat1,lng1,lat2,lng2</span>)</span>&#123;</span><br><span class="line">      lat1 = lat1 || <span class="number">0</span>;</span><br><span class="line">      lng1 = lng1 || <span class="number">0</span>;</span><br><span class="line">      lat2 = lat2 || <span class="number">0</span>;</span><br><span class="line">      lng2 = lng2 || <span class="number">0</span>;    </span><br><span class="line">      <span class="keyword">var</span> rad1 = lat1 * <span class="built_in">Math</span>.PI / <span class="number">180.0</span>;    </span><br><span class="line">      <span class="keyword">var</span> rad2 = lat2 * <span class="built_in">Math</span>.PI / <span class="number">180.0</span>;    </span><br><span class="line">      <span class="keyword">var</span> a = rad1 - rad2;    </span><br><span class="line">      <span class="keyword">var</span> b = lng1 * <span class="built_in">Math</span>.PI / <span class="number">180.0</span> - lng2 * <span class="built_in">Math</span>.PI / <span class="number">180.0</span>;    </span><br><span class="line">      <span class="keyword">var</span> r = <span class="number">637139.3</span>;  <span class="comment">//地球半径</span></span><br><span class="line">      <span class="keyword">var</span> distance = r * <span class="number">2</span> * <span class="built_in">Math</span>.asin(<span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sin(a / <span class="number">2</span>), <span class="number">2</span>) + <span class="built_in">Math</span>.cos(rad1) * <span class="built_in">Math</span>.cos(rad2) * <span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sin(b / <span class="number">2</span>), <span class="number">2</span>)));  </span><br><span class="line">      <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cosbeta通过搜索找到了一个js的计算脚本（其实是google map的计算脚本，应该算是比较准确了），做成了<a href="http://www.storyday.com/wp-content/uploads/2008/09/latlung_dis.html" target="_blank" rel="noopener">一个根据经纬度计算两点距离的工具</a>，前辈利用google map的经纬度到距离计算的js脚本还原出来的公式是这个样子的<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/earch_juli/2.JPG" alt title>                </div>                <div class="image-caption"></div>            </figure><br>公式中经纬度均用弧度表示，<a href="http://www.360doc.com/content/10/1228/10/284485_81937345.shtml" target="_blank" rel="noopener">可以参考这里</a></p><p>lat1 lng1 表示A点纬度和经度<br>lat2 lng2 表示B点纬度和经度</p><p>两点纬度之差: a=lat1 – lat2<br>两点经度之差: b=lng1 - lng2</p><p>637139.3为地球半径，单位为米<br>计算过程为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算距离，参数分别为第一点的纬度，经度；第二点的纬度，经度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDistance</span>(<span class="params">lat1,lng1,lat2,lng2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> radLat1 = Rad(lat1);</span><br><span class="line">    <span class="keyword">var</span> radLat2 = Rad(lat2);</span><br><span class="line">    <span class="keyword">var</span> a = radLat1 - radLat2;</span><br><span class="line">    <span class="keyword">var</span>  b = Rad(lng1) - Rad(lng2);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">2</span> * <span class="built_in">Math</span>.asin(<span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sin(a/<span class="number">2</span>),<span class="number">2</span>) + <span class="built_in">Math</span>.cos(radLat1)*<span class="built_in">Math</span>.cos(radLat2)*<span class="built_in">Math</span>.pow(<span class="built_in">Math</span>.sin(b/<span class="number">2</span>),<span class="number">2</span>)))*<span class="number">637139.3</span>;</span><br><span class="line">    s = <span class="built_in">Math</span>.round(s * <span class="number">10000</span>) / <span class="number">10000</span>; </span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rad</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d * <span class="built_in">Math</span>.PI / <span class="number">180.0</span>;<span class="comment">//经纬度转换成三角函数中度分表形式。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总之，计算的的精度取决于传入的经纬度的精度，同样的经纬度在百度、腾讯、高德等得到的位置有可能都不一样，不过偏差可以尽量缩小</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打卡是很多人每天都要做两次的事情，钉钉很多人都用过，但是应该怎么判断你的位置可不可以打卡呢&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=35476986&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="longitude" scheme="http://yoursite.com/tags/longitude/"/>
    
      <category term="latitude" scheme="http://yoursite.com/tags/latitude/"/>
    
      <category term="经纬度" scheme="http://yoursite.com/tags/%E7%BB%8F%E7%BA%AC%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>读React源码</title>
    <link href="http://yoursite.com/2019/04/06/%E4%BA%86%E8%A7%A3React/"/>
    <id>http://yoursite.com/2019/04/06/了解React/</id>
    <published>2019-04-06T05:43:36.000Z</published>
    <updated>2020-01-13T16:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我年轻需要指点</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=543210521&auto=0&height=66"></iframe><br><a id="more"></a></p><p>首先得有源码<br>通过 CDN 获得 React 和 ReactDOM 的 UMD 版本。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react@16/umd/react.development.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react-dom@16/umd/react-dom.development.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上述版本仅用于开发环境，不适合用于生产环境。React 的压缩和优化之后的生产环境版本链接如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react@16/umd/react.production.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果需要加载指定版本的 react 和 react-dom，可以把 16 替换成需要加载的版本号。react16完全重写了核心代码，但是对于使用者来说是毫无感知的，不像vue和ng一样大版本更新的时候需要<br>调整兼容，react16还引入了fiber概念，从根本上解决js单线程运行当数据流量大动画卡帧的问题。  </p><h3 id="1、JSX代码转变到javascript之createElement"><a href="#1、JSX代码转变到javascript之createElement" class="headerlink" title="1、JSX代码转变到javascript之createElement"></a>1、JSX代码转变到javascript之createElement</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(<span class="string">'div'</span>,&#123;</span><br><span class="line">    class:'aaa',</span><br><span class="line">    data-name:<span class="string">'hardy'</span></span><br><span class="line">&#125;,<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"aaa"</span> data-name=<span class="string">"hardy"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">React.createElement('div',&#123;</span></span><br><span class="line"><span class="regexp">    data-name='hardy',</span></span><br><span class="line"><span class="regexp">    React.createElement('span',null,'1'),</span></span><br><span class="line"><span class="regexp">    React.createElement('span',null,'2')</span></span><br><span class="line"><span class="regexp">&#125;,'hardy')</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div data-name='hardy'&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;1&lt;/</span>span&gt;</span><br><span class="line">    &lt;span&gt;<span class="number">2</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    hardy</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>如果是组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hardy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>hardy<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;Hardy id=<span class="string">'hardyid'</span>&gt;</span><br><span class="line">  &lt;span&gt;<span class="number">1</span>&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;span&gt;2&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/Hardy&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么createElement的第一项就不是字符串了，而是当成变量去传<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hardy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> React.createElement(<span class="string">"a"</span>, <span class="literal">null</span>, <span class="string">"hardy"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">React.createElement(Hardy, &#123;</span><br><span class="line">  id: <span class="string">"hardyid"</span></span><br><span class="line">&#125;, React.createElement(<span class="string">"span"</span>, <span class="literal">null</span>, <span class="string">"1"</span>), React.createElement(<span class="string">"span"</span>, <span class="literal">null</span>, <span class="string">"2&gt;"</span>));</span><br></pre></td></tr></table></figure></p><p>如果自定义的这个组件叫hardy的话，它会被认为是原生dom里面的标签。在执行的时候就会报错，所以在声明自定义组件的时候，首字母一定要大写，这是一个规范.</p><h3 id="2、react-Element"><a href="#2、react-Element" class="headerlink" title="2、react-Element"></a>2、react-Element</h3><p>在react中createElement这个方法是这么实现的，它传入3个参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, config, children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> propName = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Reserved names are extracted</span></span><br><span class="line">  <span class="keyword">var</span> props = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> key = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> ref = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> source = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (config != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasValidRef(config)) &#123;</span><br><span class="line">      ref = config.ref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasValidKey(config)) &#123;</span><br><span class="line">      key = <span class="string">''</span> + config.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self = config.__self === <span class="literal">undefined</span> ? <span class="literal">null</span> : config.__self;</span><br><span class="line">    source = config.__source === <span class="literal">undefined</span> ? <span class="literal">null</span> : config.__source;</span><br><span class="line">    <span class="comment">// Remaining properties are added to a new props object</span></span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hasOwnProperty$<span class="number">1.</span>call(config, propName) &amp;&amp; !RESERVED_PROPS.hasOwnProperty(propName)) &#123;</span><br><span class="line">        props[propName] = config[propName];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Children can be more than one argument, and those are transferred onto</span></span><br><span class="line">  <span class="comment">// the newly allocated props object.</span></span><br><span class="line">  <span class="keyword">var</span> childrenLength = <span class="built_in">arguments</span>.length - <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">    props.children = children;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> childArray = <span class="built_in">Array</span>(childrenLength);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] = <span class="built_in">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Object</span>.freeze) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.freeze(childArray);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    props.children = childArray;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Resolve default props</span></span><br><span class="line">  <span class="keyword">if</span> (type &amp;&amp; type.defaultProps) &#123;</span><br><span class="line">    <span class="keyword">var</span> defaultProps = type.defaultProps;</span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> defaultProps) &#123;</span><br><span class="line">      <span class="keyword">if</span> (props[propName] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        props[propName] = defaultProps[propName];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (key || ref) &#123;</span><br><span class="line">      <span class="keyword">var</span> displayName = <span class="keyword">typeof</span> type === <span class="string">'function'</span> ? type.displayName || type.name || <span class="string">'Unknown'</span> : type;</span><br><span class="line">      <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        defineKeyPropWarningGetter(props, displayName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (ref) &#123;</span><br><span class="line">        defineRefPropWarningGetter(props, displayName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3个参数中的type，就是节点类型，如果是原生节点是字符串，如果是自定义组件就是class component 或者function component，或者react的组件Fragment、StricMode、Suspense,config是写在标签上的所有attr，它们都会变成keyvalue的形式存到config对象里面，我们需要从config里面筛选出props的内容或者href这种特殊的attr,children是标签中放的内容，可以是子标签或者文字,过程就是判断有没有合理的ref，有没有合理的key<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (hasValidRef(config)) &#123;</span><br><span class="line">    ref = config.ref;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hasValidKey(config)) &#123;</span><br><span class="line">    key = <span class="string">''</span> + config.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就是对props进行处理，将不是内嵌的props另存到一个新的对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (propName <span class="keyword">in</span> config) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasOwnProperty$<span class="number">1.</span>call(config, propName) &amp;&amp; !RESERVED_PROPS.hasOwnProperty(propName)) &#123;</span><br><span class="line">        props[propName] = config[propName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>内嵌的也就是RESERVED_PROPS中做了这样的声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RESERVED_PROPS=&#123;</span><br><span class="line">   key:<span class="literal">true</span>,</span><br><span class="line">   ref:<span class="literal">true</span>,</span><br><span class="line">   __self:<span class="literal">true</span>,</span><br><span class="line">   __soure:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里面的属性都不会出现在比如react项目中组件通信的时候的this.props中，然后是处理children<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> childrenLength = <span class="built_in">arguments</span>.length - <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (childrenLength === <span class="number">1</span>) &#123;</span><br><span class="line">    props.children = children;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLength &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> childArray = <span class="built_in">Array</span>(childrenLength);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class="line">      childArray[i] = <span class="built_in">arguments</span>[i + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Object</span>.freeze) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.freeze(childArray);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    props.children = childArray;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>children是可以有多个的，在一个节点上可能有很多兄弟节点，createElement(type, config, children),<br>默认是可以传入3个参数，但是实际上我们可以传入很多个，第三个参数之后的参数都认为是一个children,所以arguments.length-2就等于接下来的这些参数都是children，接着将这些children<br>存到新声明的数组childArray，最终它再放到props.children里面，通过this.props.children就可以拿到;接着是对默认props的处理，比如在写一个自己的组件的时候可以加上这么个值，这样<br>如果给别人用的时候，他没有传入这个值，就默认是设置的默认值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">impoert React,&#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line">Hardy.defaultProps=&#123; <span class="attr">name</span>:hardy &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hardy</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type &amp;&amp; type.defaultProps) &#123;   </span><br><span class="line">    <span class="keyword">var</span> defaultProps = type.defaultProps;</span><br><span class="line">    <span class="keyword">for</span> (propName <span class="keyword">in</span> defaultProps) &#123;</span><br><span class="line">      <span class="comment">//如果==就代表null和undefined都需要设置默认值，===就表示即使是null也不需要设置默认值</span></span><br><span class="line">      <span class="keyword">if</span> (props[propName] === <span class="literal">undefined</span>) &#123;    </span><br><span class="line">        props[propName] = defaultProps[propName];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里的时候，预处理的内容已经完成了，然后它return了一个ReactElement，并传入上面处理的那些内容，return ReactElement(type, key, ref, self, source,<br>ReactCurrentOwner.current, props);ReactElement在第1881行的时候做了这样的声明<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/1ReactElement.JPG" alt="“like this”" title>                </div>                <div class="image-caption">“like this”</div>            </figure><br>ReactElement最终return一个这样的Object<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = &#123;</span><br><span class="line">    <span class="comment">// This tag allows us to uniquely identify this as a React Element</span></span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_ELEMENT_TYPE,   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Built-in properties that belong on the element</span></span><br><span class="line">    type: type,</span><br><span class="line">    key: key,</span><br><span class="line">    ref: ref,</span><br><span class="line">    props: props,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Record the component responsible for creating this element.</span></span><br><span class="line">    _owner: owner</span><br><span class="line">  &#125;;</span><br><span class="line">$$<span class="keyword">typeof</span>是REACT_ELEMENT_TYPE，用来标识Element是什么类型的，type是传进来的type，key是处理过的key，ref就是ref，props就是props，_owner就是_owner</span><br></pre></td></tr></table></figure></p><h3 id="3、react-Component"><a href="#3、react-Component" class="headerlink" title="3、react-Component"></a>3、react-Component</h3><p>Component就是组件<br>一般<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123; Component &#125; <span class="keyword">from</span> <span class="string">'react</span></span><br><span class="line"><span class="string">class hardy extends Component&#123;&#125;</span></span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hardy</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>hardy都是去继承React的Component的base Class,其实React中有Component和PureComponent，两者唯一的区别就是PureComponent保证了组件在没有任何变化的情况下能够减少不必要的更新<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/2react中的Component和PualComponent.JPG" alt="“PureComponent”" title>                </div>                <div class="image-caption">“PureComponent”</div>            </figure><br>Component:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/3react中的Component.JPG" alt="Component" title>                </div>                <div class="image-caption">Component</div>            </figure><br>Component被声明成了一个函数，接收3个参数props, context, updater，this.props和this.context是可以直接用的，emptyObject是我们获取的节点的实例然后挂载在this.refs上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyObject = &#123;&#125;;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">Object</span>.freeze(emptyObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来第421行代码，Component的原型上挂载了一个setState，这是使用频率最多的api，它是用来更新组件状态的，partialState是要更新的新的state，可以是对象，也可以是个方法，callba<br>ck是更新完之后执行的方法，this.setState主要的部分是this.updater.enqueueSetState，也就是调用this.setState的时候初始化调用Component的时候传入的updater对象上面的enqueueS<br>etState方法，enqueueSetState在reactDom里面实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Component.prototype.setState = <span class="function"><span class="keyword">function</span> (<span class="params">partialState, callback</span>) </span>&#123;</span><br><span class="line">  !(<span class="keyword">typeof</span> partialState === <span class="string">'object'</span> || <span class="keyword">typeof</span> partialState === <span class="string">'function'</span> || partialState == <span class="literal">null</span>) ? invariant(<span class="literal">false</span>, <span class="string">'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'</span>) : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.updater.enqueueSetState(<span class="keyword">this</span>, partialState, callback, <span class="string">'setState'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Component上面还有个方法叫forceUpdate，作用就是强制react的state更新<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Component.prototype.forceUpdate = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.updater.enqueueForceUpdate(<span class="keyword">this</span>, callback, <span class="string">'forceUpdate'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Component的内容就是这些了，确实内容还是蛮少</p><h3 id="4、PureComponent"><a href="#4、PureComponent" class="headerlink" title="4、PureComponent:"></a>4、PureComponent:</h3><p>PureComponent继承自Component，区别就是加了isReactComponent=true,通过这个来标识继承自Component的是PureComponent<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/4pureComponent.JPG" alt="pureComponent" title>                </div>                <div class="image-caption">pureComponent</div>            </figure></p><h3 id="5、react-ref的三种方式"><a href="#5、react-ref的三种方式" class="headerlink" title="5、react-ref的三种方式"></a>5、react-ref的三种方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.objRef=React.createRef()</span><br><span class="line">&#125;</span><br><span class="line">componentDitMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.refs.stringRef.textContent=<span class="string">"hardy string"</span>;     <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">this</span>.methodsRef.textContent=<span class="string">"hardy function"</span>;       <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">this</span>.objRef.current.textContent=<span class="string">"hardy createRef"</span>   <span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1、string-ref"><a href="#1、string-ref" class="headerlink" title="1、string ref"></a>1、string ref</h4><p>想要获取节点的元素的props上添加一个ref属性，然后传入字符串，然后在完成这个节点的渲染之后在this.refs上面挂载这个属性的key，如果是节点就是节点，如果是组件就是组件，对应的就是<br>这个节点的实例的对象（将要被废弃的使用方式）</p><p></p><p ref="stringRef"></p><p></p><h4 id="2、function"><a href="#2、function" class="headerlink" title="2、function"></a>2、function</h4><p>ref传入一个方法，方法接收一个参数，参数就是当前的实例，如果是节点就是节点，如果是组件就是组件</p><p></p><p ref="{ele=">(this.methodsRef=ele)}&gt;</p><p></p><h4 id="3、createRef"><a href="#3、createRef" class="headerlink" title="3、createRef"></a>3、createRef</h4><p>这个是react提供的api,利用this.objRef=React.createRef()创建了一个null的current对象，然后传给某个节点，传完之后在组件渲染完成之后，将对应的节点挂载到current上</p><p></p><p ref="{this.objRef}"></p><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/5react下的createRef.JPG" alt="createRef" title>                </div>                <div class="image-caption">createRef</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/6createRefdo.JPG" alt="createRefdo" title>                </div>                <div class="image-caption">createRefdo</div>            </figure><br>Object.seal()方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。<p></p><h3 id="6、forwardRef"><a href="#6、forwardRef" class="headerlink" title="6、forwardRef"></a>6、forwardRef</h3><p>之前从上层组件传到子组件的方式只有props，forwardRef可以传入第二个参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Childcom=React.forwardRef(<span class="function">(<span class="params">props,ref</span>)=&gt;</span>&#123;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> ref=&#123;ref&#125;&gt;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Com extends React.Component&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.creaRef=React.createRef()</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="keyword">this</span>.ref.current.value=<span class="string">"hardy forwardRef"</span></span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Childcom ref=&#123;<span class="keyword">this</span>.ref&#125;&gt;&lt;<span class="regexp">/Childcom&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>在react中forwardRef的实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forwardRef</span>(<span class="params">render</span>) </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (render != <span class="literal">null</span> &amp;&amp; render.$$<span class="keyword">typeof</span> === REACT_MEMO_TYPE) &#123;</span><br><span class="line">      warningWithoutStack$<span class="number">1</span>(<span class="literal">false</span>, <span class="string">'forwardRef requires a render function but received a `memo` '</span> + <span class="string">'component. Instead of forwardRef(memo(...)), use '</span> + <span class="string">'memo(forwardRef(...)).'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> render !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      warningWithoutStack$<span class="number">1</span>(<span class="literal">false</span>, <span class="string">'forwardRef requires a render function but was given %s.'</span>, render === <span class="literal">null</span> ? <span class="string">'null'</span> : <span class="keyword">typeof</span> render);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      !(</span><br><span class="line">      <span class="comment">// Do not warn for 0 arguments because it could be due to usage of the 'arguments' object</span></span><br><span class="line">      render.length === <span class="number">0</span> || render.length === <span class="number">2</span>) ? warningWithoutStack$<span class="number">1</span>(<span class="literal">false</span>, <span class="string">'forwardRef render functions accept exactly two parameters: props and ref. %s'</span>, render.length === <span class="number">1</span> ? <span class="string">'Did you forget to use the ref parameter?'</span> : <span class="string">'Any additional parameter will be undefined.'</span>) : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (render != <span class="literal">null</span>) &#123;</span><br><span class="line">      !(render.defaultProps == <span class="literal">null</span> &amp;&amp; render.propTypes == <span class="literal">null</span>) ? warningWithoutStack$<span class="number">1</span>(<span class="literal">false</span>, <span class="string">'forwardRef render functions do not support propTypes or defaultProps. '</span> + <span class="string">'Did you accidentally pass a React component?'</span>) : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    $$<span class="keyword">typeof</span>: REACT_FORWARD_REF_TYPE,</span><br><span class="line">    render: render</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7、context"><a href="#7、context" class="headerlink" title="7、context"></a>7、context</h3><p>react中组件组件通信用props,多层组件通信的时候中间隔着不同的组件，这时候用context，父组件设置了一个context，其所有的子组件都可以通过context访问到<br>context的实现方式有两种<br>1、childContextTypes（即将被废弃）<br>2、createContext（re16提供的）<br>关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;&#123;</span><br><span class="line">    &lt;Parent&gt;</span><br><span class="line">        &lt;Child/&gt;</span><br><span class="line">        &lt;Child/&gt;</span><br><span class="line">    &lt;<span class="regexp">/Parent&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>父组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">       <span class="keyword">super</span>()</span><br><span class="line">       <span class="keyword">this</span>.state=&#123;</span><br><span class="line">           ChildContext:<span class="string">"hardy"</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getChildContext()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">value</span>:<span class="keyword">this</span>.state.ChildContext&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Parent.childContextTypes=&#123;</span><br><span class="line">    value:PropTypes.string   <span class="comment">//和PropTypes一样，如果不声明是无法获取到的，</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Child.contextTypes=&#123;</span><br><span class="line">    value:PropTypes.string</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.context.value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面那是老的context用法 ，接下来是新的api<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Provider,Consumer &#125; =React.createContext(<span class="string">'default'</span>)</span><br></pre></td></tr></table></figure></p><p>Provider和Consumer分别是context的提供方和订阅方,在Parent直接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider value=&#123;<span class="keyword">this</span>.state.newContext&#125;&gt;&lt;<span class="regexp">/Provider&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在Child这边需要用到的地方直接,Consumer,在父组件定义了context之后，子组件的哪个地方需要用到这个context就可以直接用这个组件就可以了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Consumer&gt;&#123;value=&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>newContext:&#123;value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;&lt;<span class="regexp">/Consumer&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/7newcreateContext.JPG" alt="newcreateContext" title>                </div>                <div class="image-caption">newcreateContext</div>            </figure><p>createContext接收两个参数，一个是defaultValue，另一个calculateChangedBits用来计算新老API变化的，<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/8newcreateContext.JPG" alt="newcreateContext" title>                </div>                <div class="image-caption">newcreateContext</div>            </figure><br>_currentValue: defaultValue,_currentValue2: defaultValue是用来更新最新的defaultValue值</p><h3 id="8、ConCurrentMode（re16之后）"><a href="#8、ConCurrentMode（re16之后）" class="headerlink" title="8、ConCurrentMode（re16之后）"></a>8、ConCurrentMode（re16之后）</h3><p>ConCurrentMode（本叫assignMode）16.6之后名字更新，作用是让react的渲染过程进行优先的排比，并且能让整体的渲染过程中断，它可以进行任务调度，把更多的cpu性能（javascript是单线<br>程语言，如果react的某个更新渲染占用了非常长的进程，会导致动画卡顿或者其他的一些响应变卡，因为这时候js正在运行react的更新，这时候react可以有选择的优先进行优先级更高的任务，比<br>如一个人在游泳，他一次要游到水底再上来，如果他中间岸上有人有更重要的事情找他，但是只能等他先游上来才能继续，但是这个就提供了每隔一段时间会看一下是否有更重要的事情然后先做。）<br>ConCurrentMode有个特性，在ConCurrentMode子树中渲染了ConCurrentMode之后，它下面所有节点的更新就是低优先级的更新<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/9concurrentmodeJustSymbol.JPG" alt="concurrentmodeJustSymbol" title>                </div>                <div class="image-caption">concurrentmodeJustSymbol</div>            </figure><br>react16.6已经可以使用一部分功能的新的react filter<br>Suspense：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuspenseComp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data=requestData()</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;&#123;</span><br><span class="line">   &lt;Suspense fallback=<span class="string">"loading"</span>&gt;  </span><br><span class="line">       &lt;SuspenseComp/&gt;    <span class="comment">//SuspenseComp中的data还没有的时候显示loading</span></span><br><span class="line">   &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这个api目前在正式的项目不建议用，可以先用lazy(lazy.js)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt; <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>lazy comp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React,&#123; lazy &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> lazyComp=lazy(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">import</span>(./lazy.js)&#125;)</span><br></pre></td></tr></table></figure></p><p>这个就是用了webpack的异步加载的api,看源码之后发现Suspense也是个symbol<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/10suspenseYeshichangliangJPG.JPG" alt="suspenseYeshichangliang" title>                </div>                <div class="image-caption">suspenseYeshichangliang</div>            </figure><br>lazy函数接收一个方法，ctor<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/konwReact/11lazyNotaSymbol.JPG" alt="lazyNotaSymbol" title>                </div>                <div class="image-caption">lazyNotaSymbol</div>            </figure><br>_status用来记录状态<br>_result用来记录promise对象返回之后的属性，最终resolve出来的会放在_result上面</p><h3 id="9、hooks"><a href="#9、hooks" class="headerlink" title="9、hooks"></a>9、hooks</h3><p>要安装hooks必须要react&amp;&amp;react-dom16.7以上，如果没有16.7.0，可以安装react16.7.0-alpha.2&amp;&amp;react-dom16.7.0-alpha.2，如果已经有了直接安装最新版<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;&#123;</span><br><span class="line"><span class="keyword">const</span> [name,setname]=useState(<span class="string">'hardy'</span>)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;&gt;</span><br><span class="line">   &lt;p&gt;my name is:&#123;name&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"> &lt;input type="text" value=&#123;name&#125; onChange=&#123;e=&gt;setName(e.target.value)&#125;&gt;&lt;/i</span>nput&gt;</span><br><span class="line">&lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这是一个函数组件，和class组件的区别就是没有this对象，没有this就没有this.state,也没有生命周期方法，这个demo用hooks来给组件存储state，给useState传入一个默认值，然后返回一个<br>数组，再解构。name是变量，setname是改变变量的方法.</p><h3 id="react中的diff算法"><a href="#react中的diff算法" class="headerlink" title="react中的diff算法"></a>react中的diff算法</h3><p>虚拟dom中的diff算法<br>1、state<br>2、jsx模板<br>3、数据+模板  生成虚拟dom（虚拟dom就是一个js对象，用它来描述真实dom）（损耗了性能）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'div'</span>,&#123;<span class="attr">id</span>:<span class="string">'abc'</span>&#125;,[<span class="string">'span'</span>,&#123;&#125;,<span class="string">'helloword'</span>]]</span><br></pre></td></tr></table></figure></p><p>4、用虚拟dom的结构生成真实的dom，来显示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">'abc'</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello word<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><p>5、state 发生变化<br>6、数据+模板  生成新的虚拟dom （提升性能）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'div'</span>,&#123;<span class="attr">id</span>:<span class="string">'abc'</span>&#125;,[<span class="string">'span'</span>,&#123;&#125;,<span class="string">'bye bye'</span>]]</span><br></pre></td></tr></table></figure></p><p>7、比较原始虚拟dom和新的虚拟dom的区别，找到区别是span中的内容（提升性能）<br>8、直接操作dom，改变span中的内容<br>优点：<br>性能提升<br>使得跨端应用得以实现（比如react native）</p><p>待续….</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我年轻需要指点&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=543210521&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="jsx" scheme="http://yoursite.com/tags/jsx/"/>
    
      <category term="diff" scheme="http://yoursite.com/tags/diff/"/>
    
  </entry>
  
</feed>
